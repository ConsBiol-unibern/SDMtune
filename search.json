[{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement sergio.vignali@unibe.ch. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions","title":"Contributing to SDMtune","text":"question, please file issue GitHub use channels like Stack Overflow.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing to SDMtune","text":"Please, filing issue check whether already exists. reporting bug make sure latest version SDMtune installed. important provide minimal reproducible example. example include code related issue, please take time remove line code relevant problem.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"Issues","what":"Code of Conduct","title":"Contributing to SDMtune","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"prepare-data-for-the-analysis","dir":"Articles","previous_headings":"","what":"Prepare data for the analysis","title":"SDMtune - basic use","text":"section learn prepare data train models using SDMtune. use virtualSp dataset included package environmental predictors WorldClim dataset. First let’s load packages use visualize data:","code":"library(ggplot2)    # To plot locations library(maps)       # To access useful maps library(rasterVis)  # To plot raster objects"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"acquire-environmental-variables","dir":"Articles","previous_headings":"Prepare data for the analysis","what":"Acquire environmental variables","title":"SDMtune - basic use","text":"use climate data WorldClim version 1.4 (Hijmans et al. 2005) terrestrial ecoregions WWF (Olson et al. 2001) included dismo package: convert files raster object used later analysis: nine environmental variables, eight continuous one categorical: bio1 Annual Mean Temperature bio5 Max Temperature Warmest Month bio6 Min Temperature Coldest Month bio7 Temperature Annual Range (bio5-bio6) bio8 Mean Temperature Wettest Quarter bio12 Annual Precipitation bio16 Precipitation Wettest Quarter bio17 Precipitation Driest Quarter biome Terrestrial Ecoregions World can plot bio1 using gplot function rasterVis package:","code":"files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE) predictors <- terra::rast(files) names(predictors) gplot(predictors$bio1) +     geom_tile(aes(fill = value)) +     coord_equal() +     scale_fill_gradientn(colours = c(\"#2c7bb6\", \"#abd9e9\", \"#ffffbf\", \"#fdae61\", \"#d7191c\"),                          na.value = \"transparent\",                          name = \"°C x 10\") +     labs(title = \"Annual Mean Temperature\",          x = \"longitude\",          y = \"latitude\") +     scale_x_continuous(expand = c(0, 0)) +     scale_y_continuous(expand = c(0, 0)) +     theme_minimal() +     theme(plot.title = element_text(hjust = 0.5),           axis.ticks.x = element_blank(),           axis.ticks.y = element_blank())"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"prepare-presence-and-background-locations","dir":"Articles","previous_headings":"Prepare data for the analysis","what":"Prepare presence and background locations","title":"SDMtune - basic use","text":"Let’s load SDMtune package: demonstrating use SDMtune use random generated virtualSp dataset included package. Plot study area together presence locations: plot background locations run following code:","code":"library(SDMtune) help(virtualSp) p_coords <- virtualSp$presence bg_coords <- virtualSp$background ggplot(map_data(\"world\"), aes(long, lat)) +     geom_polygon(aes(group = group), fill = \"grey95\", color = \"gray40\", size = 0.2) +     geom_jitter(data = p_coords, aes(x = x, y = y), color = \"red\",                 alpha = 0.4, size = 1) +     labs(x = \"longitude\", y = \"latitude\") +     theme_minimal() +     theme(legend.position = \"none\") +     coord_fixed() +     scale_x_continuous(limits = c(-125, -32)) +     scale_y_continuous(limits = c(-56, 40)) ggplot(map_data(\"world\"), aes(long, lat)) +     geom_polygon(aes(group = group), fill = \"grey95\", color = \"gray40\", size = 0.2) +     geom_jitter(data = as.data.frame(bg_coords), aes(x = x, y = y),                 color = \"blue\", alpha = 0.4, size = 0.5) +     labs(x = \"longitude\", y = \"latitude\") +     theme_minimal() +     theme(legend.position = \"none\") +     coord_fixed() +     scale_x_continuous(limits = c(-125, -32)) +     scale_y_continuous(limits = c(-56, 40))"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"create-an-swd-object","dir":"Articles","previous_headings":"Prepare data for the analysis","what":"Create an SWD object","title":"SDMtune - basic use","text":"training model prepare data correct format. prepareSWD function creates SWD object stores species’ name, coordinates species presence absence/background locations value environmental variables locations. argument categorical indicates environmental variables categorical. example biome categorical (can pass vector one categorical environmental variable). function extracts value environmental variables location excludes locations NA value least one environmental variable.","code":"data <- prepareSWD(species = \"Virtual species\",                     p = p_coords,                     a = bg_coords,                    env = predictors,                     categorical = \"biome\")"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"explore-the-swd-object","dir":"Articles","previous_headings":"Prepare data for the analysis","what":"Explore the SWD object","title":"SDMtune - basic use","text":"Let’s look SWD object just created: print SWD object get bunch information: name class; name species; number presence locations; number absence/background locations; name continuous environmental variables, ; name categorical environmental variables, . object contains four slots: @species, @coords @data @pa. @pa contains vector 1 presence 0 absence/background locations. visualize data run: can visualize coordinates : name species :","code":"data head(data@data) head(data@coords) data@species"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"save-an-swd-object","dir":"Articles","previous_headings":"Prepare data for the analysis","what":"Save an SWD object","title":"SDMtune - basic use","text":"can save SWD object .csv file using function swd2csv (function saves file working directory). two possibilities: save object single file column pa indicating location presence (1) absence/background (0) site save object two separate files: one presence absence/background locations","code":"swd2csv(data,          file_name = \"data.csv\") swd2csv(data,          file_name = c(\"presence.csv\", \"background.csv\"))"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"train-a-model","dir":"Articles","previous_headings":"","what":"Train a model","title":"SDMtune - basic use","text":"SDMtune supports four methods model training: Artificial Neural Networks ANN, using nnet package (Venables Ripley 2002); Boosted Regression Trees BRT, using gbm package (Greenwell et al. 2019); Maxent using dismo package (Hijmans et al. 2017); Maxnet using maxnet package (Phillips 2017); Random Forest RF, using randomForest package (Liaw Wiener 2002). code necessary train model implementations. show train Maxent model, can adapt code methods check presence absence models vignette.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"train-a-model-with-default-settings","dir":"Articles","previous_headings":"Train a model","what":"Train a model with default settings","title":"SDMtune - basic use","text":"use function train train Maxent model. need provide two arguments: method: “Maxent” case; data: SWD object presence background locations. function trains model using default settings : linear, quadratic, product hinge feature class combinations; regularization multiplier equal 1; 500 algorithm iterations. see later change default settings, moment let’s look model object.","code":"model <- train(method = \"Maxent\",                 data = data)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"explore-an-sdmmodel-object","dir":"Articles","previous_headings":"Train a model","what":"Explore an SDMmodel object","title":"SDMtune - basic use","text":"output function train object class SDMmodel. Let’s print model object ’ve just created: print SDMmodel object get following information: name class; method used train model; name species; number presence locations; number absence/background locations; fc: feature class combinations; reg: regularization multiplier; iter: number iterations; name continuous environmental variables, ; name categorical environmental variables, . SDMmodel object two slots: data: SWD object presence absence/background locations used train model; model: Maxent object, case, model configurations. slot model contains configurations model plus information used make predictions. important : fc, reg iter contain values model configuration.","code":"model slotNames(model) slotNames(model@model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"train-a-model-changing-the-default-settings","dir":"Articles","previous_headings":"Train a model","what":"Train a model changing the default settings","title":"SDMtune - basic use","text":"function train() accepts optional arguments can used change default model settings. previous example trained model using: following example train model using linear hinge feature class combination, 0.5 regularization multiplier 700 iterations: default Maxent models trained using arguments “removeduplicates=false” “addsamplestobackground=false”. user full control data used train model, expected duplicated locations already removed presence locations already included background locations, desired. can use function thinData remove duplicated locations function addSamplesToBg add presence locations background locations.","code":"model <- train(method = \"Maxent\",                 data = data,                 fc = \"lqph\",                 reg = 1,                 iter = 500) model <- train(method = \"Maxent\",                 data = data,                 fc = \"lh\",                 reg = 0.5,                 iter = 700)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"make-prediction","dir":"Articles","previous_headings":"","what":"Make prediction","title":"SDMtune - basic use","text":"New locations predicted function predict. function takes three main arguments: trained model given SDMmodel object; new dataset, used make prediction (can data.frame, SWD object raster object); output type, Maxent models can : raw, logistic cloglog. Next get prediction training locations using cloglog output type: output case vector containing predicted values training locations: can get prediction presence location : models trained Maxent method, function performs prediction R without calling MaxEnt Java software. results faster computation large datasets might result slightly different output compared Java software.","code":"pred <- predict(model,                  data = data,                  type = \"cloglog\") head(pred) p <- data@data[data@pa == 1, ] pred <- predict(model,                  data = p,                  type = \"cloglog\") tail(pred)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"create-a-distribution-map","dir":"Articles","previous_headings":"Make prediction","what":"Create a distribution map","title":"SDMtune - basic use","text":"can use function create distribution map starting predictors raster object: case output raster object: map can saved file directly running prediction, just pass additional arguments predict function. next example save map file called “my_file” GeoTIFF format: function predict arguments useful predicting large datasets: progress: can set \"text\" visualize progress bar; extent: can passed reduce prediction given extent. next example restrict prediction Chile plot prediction:","code":"map <- predict(model,                 data = predictors,                 type = \"cloglog\") map map <- predict(model,                 data = predictors,                 type = \"cloglog\",                 file = \"my_map\",                format = \"GTiff\") # First create the extent that surrounds Chile e = terra::ext(c(-77, -60, -56, -15)) # Now use the extent to make the prediction map_e <- predict(model,                   data = predictors,                   type = \"cloglog\",                   extent = e)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"plot-a-distribution-map","dir":"Articles","previous_headings":"Make prediction","what":"Plot a distribution map","title":"SDMtune - basic use","text":"plot distribution map can use function plotPred: function plotPred plots map color ramp similar one used MaxEnt Java software. can pass additional arguments customize map. next example provide custom color ramp add title legend:","code":"plotPred(map) plotPred(map,           lt = \"Habitat\\nsuitability\",          colorramp = c(\"#2c7bb6\", \"#abd9e9\", \"#ffffbf\", \"#fdae61\", \"#d7191c\"))"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"plot-a-presenceabsence-map","dir":"Articles","previous_headings":"Make prediction","what":"Plot a presence/absence map","title":"SDMtune - basic use","text":"plot presence/absence map need threshold value splits prediction presence absence values. function thresholds returns commonly used threshold values starting SDMmodel object. next example print threshold values using type \"cloglog\": example want create presence/absence map using threshold maximize training sensitivity plus specificity. use function plotPA passing threshold value argument: can also save map file following code: functions plotPred plotPA argument hrto plot map high resolution, useful map used scientific publication.","code":"ths <- thresholds(model,                    type = \"cloglog\") ths plotPA(map,         th = ths[3, 2]) plotPA(map,         th = ths[3, 2],         filename = \"my_pa_map\",         format = \"GTiff\")"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"evaluate-a-model","dir":"Articles","previous_headings":"","what":"Evaluate a model","title":"SDMtune - basic use","text":"SDMtune implements three evaluation metrics: AUC: Area ROC curve (Fielding Bell 1997) TSS: True Skill Statistic (Allouche, Tsoar, Kadmon 2006) AICc: Akaike Information Criterion corrected small sample size (Warren Seifert 2011) compute value metrics training dataset.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"auc","dir":"Articles","previous_headings":"Evaluate a model","what":"AUC","title":"SDMtune - basic use","text":"AUC can calculated using function auc: can also plot ROC curve using function plotROC:","code":"auc(model) plotROC(model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"tss","dir":"Articles","previous_headings":"Evaluate a model","what":"TSS","title":"SDMtune - basic use","text":"TSS computed function tss:","code":"tss(model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"aicc","dir":"Articles","previous_headings":"Evaluate a model","what":"AICc","title":"SDMtune - basic use","text":"AICc use function aicc. case need pass env argument predictors raster object:","code":"aicc(model,       env = predictors)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"training-and-testing","dir":"Articles","previous_headings":"Evaluate a model","what":"Training and testing","title":"SDMtune - basic use","text":"’s always good practice split species locations two parts use one part train model remaining part evaluate . can use trainValTest function purpose. Let’s say want use 80% species locations train model 20% testing dataset evaluate : Now train model using train dataset: only_presence argument used split presence background locations. can now evaluate model using testing dataset used train model: can plot ROC curve , training testing datasets, : approach valid large dataset. case, observations, evaluation depends strongly split presence locations. Let’s run small experiment perform different train/test splits compute AUC: testing AUC varies different train/test partitions. deal small dataset better approach cross validation.","code":"library(zeallot)  # For unpacking assignment c(train, test) %<-% trainValTest(data,                                   test = 0.2,                                   only_presence = TRUE,                                  seed = 25) model <- train(\"Maxent\",                 data = train) auc(model) auc(model, test = test) plotROC(model, test = test) # Create an empty data.frame output <- data.frame(matrix(NA, nrow = 10, ncol = 3)) colnames(output) <- c(\"seed\", \"trainAUC\", \"testAUC\")  # Create 10 different random seeds set.seed(25) seeds <- sample.int(1000, 10)  # Loop through the seeds for (i in 1:length(seeds)) {   # Make the train/test split   c(train, test) %<-% trainValTest(data,                                     test = 0.2,                                     seed = seeds[i],                                    only_presence = TRUE)      # train the model   m <- train(\"Maxent\", data = train)      # Populate the output data.frame   output[i, 1] <- seeds[i]   output[i, 2] <- auc(m)   output[i, 3] <- auc(m, test = test) }  # Print the output output # compute the range of the testing AUC range(output[, 3])"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"cross-validation","dir":"Articles","previous_headings":"Evaluate a model","what":"Cross validation","title":"SDMtune - basic use","text":"perform cross validation SDMtune pass fold argument train function. First create folds. several way create , explain make random partition 4 folds using function randomFolds: output function list containing two matrices, first training second testing locations. column one matrix represents fold TRUE locations included FALSE excluded partition. Let’s perform 4 fold cross validation using Maxent method (note use full dataset): output case SDMmodelCV object. contains four trained models models slot fold partitions folds slot. can compute AUC SDMmodelCV object using: returns AUC value averaged across four different models.","code":"folds <- randomFolds(data,                       k = 4,                       only_presence = TRUE,                       seed = 25) cv_model <- train(\"Maxent\",                    data = data,                    folds = folds) cv_model auc(cv_model) auc(cv_model, test = TRUE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/basic-use.html","id":"spatial-cross-validation","dir":"Articles","previous_headings":"Evaluate a model","what":"Spatial Cross Validation","title":"SDMtune - basic use","text":"train() function accepts folds created two packages: ENMeval (Muscarella et al. 2014) blockCV (Valavi et al. 2019) function convert internally created folds correct format SDMtune. packages specific function create folds partitions spatially environmentally independent. Block partition using ENMeval package: Checkerboard1 partition using ENMeval package: Environmental block using package blockCV:","code":"library(ENMeval) block_folds <- get.block(occ = data@coords[data@pa == 1, ],                          bg.coords = data@coords[data@pa == 0, ])  model <- train(method = \"Maxent\",                 data = data,                 fc = \"l\",                 reg = 0.8,                folds = block_folds) cb_folds <- get.checkerboard1(occ = data@coords[data@pa == 1, ],                               env = predictors,                               bg.coords = data@coords[data@pa == 0, ],                               aggregation.factor = 4)  model <- train(method = \"Maxent\",                 data = data,                 fc = \"l\",                 reg = 0.8,                folds = cb_folds) library(blockCV) # Create sf object sf_df <- sf::st_as_sf(cbind(data@coords, pa = data@pa),                       coords = c(\"X\", \"Y\"),                       crs = terra::crs(predictors,                                        proj = TRUE))  # Spatial blocks spatial_folds <- cv_spatial(x = sf_df,                             column = \"pa\",                             rows_cols = c(8, 10),                             k = 5,                             hexagon = FALSE,                             selection = \"systematic\")  model <- train(method = \"Maxent\",                 data = data,                 fc = \"l\",                 reg = 0.8,                folds = spatial_folds)"},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluate-model.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Evaluate a model","text":"previous articles learned prepare data analysis, train model make predictions using SDMtune. article learn evaluate model using three different metrics. SDMtune implements three evaluation metrics: AUC: Area ROC curve (Fielding Bell 1997) TSS: True Skill Statistic (Allouche, Tsoar, Kadmon 2006) AICc: Akaike Information Criterion corrected small sample size (Warren Seifert 2011) compute value metrics training dataset, using default model trained previous article.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluate-model.html","id":"auc","dir":"Articles","previous_headings":"","what":"AUC","title":"Evaluate a model","text":"usually first load SDMtune package: AUC can calculated using function auc(): can also plot ROC curve using function plotROC():","code":"library(SDMtune) #>  #>    _____  ____   __  ___ __ #>   / ___/ / __ \\ /  |/  // /_ __  __ ____   ___ #>   \\__ \\ / / / // /|_/ // __// / / // __ \\ / _ \\ #>  ___/ // /_/ // /  / // /_ / /_/ // / / //  __/ #> /____//_____//_/  /_/ \\__/ \\__,_//_/ /_/ \\___/  version 1.3.3 #>  #> To cite this package in publications type: citation(\"SDMtune\"). auc(default_model) #> [1] 0.8728322 plotROC(default_model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluate-model.html","id":"tss","dir":"Articles","previous_headings":"","what":"TSS","title":"Evaluate a model","text":"TSS computed function tss():","code":"tss(default_model) #> [1] 0.6419"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluate-model.html","id":"aicc","dir":"Articles","previous_headings":"","what":"AICc","title":"Evaluate a model","text":"AICc use function aicc(). case need pass env argument ‘predictors’ raster object created first article:","code":"aicc(default_model,       env = predictors) #> [1] 6618.725"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluate-model.html","id":"try-yourself","dir":"Articles","previous_headings":"AICc","what":"Try yourself","title":"Evaluate a model","text":"Try compute three metrics using model trained using Maxnet method.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluate-model.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Evaluate a model","text":"article learned: calculate AUC; plot ROC curve; calculate TSS; calculate AICc. next article learn two different strategies can used correctly evaluate model performance.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluation-strategies.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Evaluation strategies","text":"previous articles learned prepare data analysis, train model, make predictions evaluate model using SDMtune. article learn different evaluation strategies achieve better estimate model performance.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluation-strategies.html","id":"training-and-testing-datasets","dir":"Articles","previous_headings":"","what":"Training and testing datasets","title":"Evaluation strategies","text":"First load SDMtune package: ’s always good practice split species locations two parts use one part train model remaining part evaluate . can use trainValTest() function purpose. Let’s say want use 80% species locations train model 20% testing dataset evaluate : only_presence argument used split presence background locations. can now evaluate model using testing dataset used train model: can plot ROC curve , training testing datasets, :  approach valid large dataset. case, 320 observations, evaluation depends strongly split presence locations. Let’s run small experiment perform different train/test splits compute AUC: testing AUC varies 0.834 0.867. deal small dataset better approach cross validation.","code":"library(SDMtune) #>  #>    _____  ____   __  ___ __ #>   / ___/ / __ \\ /  |/  // /_ __  __ ____   ___ #>   \\__ \\ / / / // /|_/ // __// / / // __ \\ / _ \\ #>  ___/ // /_/ // /  / // /_ / /_/ // / / //  __/ #> /____//_____//_/  /_/ \\__/ \\__,_//_/ /_/ \\___/  version 1.3.3 #>  #> To cite this package in publications type: citation(\"SDMtune\"). library(zeallot)  # For unpacking assignment c(train, test) %<-% trainValTest(data,                                   test = 0.2,                                   only_presence = TRUE,                                   seed = 25)  maxnet_model <- train(\"Maxnet\",                        data = train) cat(\"Training auc: \", auc(maxnet_model)) #> Training auc:  0.8752144 cat(\"Testing auc: \", auc(maxnet_model, test = test)) #> Testing auc:  0.8505888 plotROC(maxnet_model,          test = test) output <- data.frame(matrix(NA, nrow = 10, ncol = 3)) # Create an empty data.frame colnames(output) <- c(\"seed\", \"trainAUC\", \"testAUC\")  set.seed(25) seeds <- sample.int(1000, 10) # Create 10 different random seeds  for (i in seq_along(seeds)) { # Loop through the seeds   c(train, test) %<-% trainValTest(data,                                     test = 0.2,                                     seed = seeds[i],                                     only_presence = TRUE) # Make the train/test split      m <- train(\"Maxnet\",               data = train) # train the model      # Populate the output data.frame   output[i, 1] <- seeds[i]   output[i, 2] <- auc(m)   output[i, 3] <- auc(m, test = test) } # Print the output output"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluation-strategies.html","id":"cross-validation","dir":"Articles","previous_headings":"","what":"Cross validation","title":"Evaluation strategies","text":"perform cross validation SDMtune pass fold argument train() function. First create folds. several way create , explain make random partition 4 folds using function randomFolds(): output function list containing two matrices, first training second testing locations. column one matrix represents fold TRUE locations included FALSE excluded partition. Let’s perform 4 fold cross validation using Maxnet method (note use full dataset): output case SDMmodelCV() object. contains four trained models models slot fold partitions folds slot. can compute AUC SDMmodelCV() object using: returns AUC value averaged across four different models.","code":"folds <- randomFolds(data,                       k = 4,                       only_presence = TRUE,                       seed = 25) cv_model <- train(\"Maxnet\",                    data = data,                    folds = folds) cv_model #>  #> ── Object of class: <SDMmodelCV> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters #> • fc: \"lqph\" #> • reg: 1 #>  #> ── Info #> • Species: Virtual species #> • Replicates: 4 #> • Total presence locations: 400 #> • Total absence locations: 5000 #>  #> ── Variables #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" cat(\"Training AUC: \", auc(cv_model)) #> Training AUC:  0.8734151 cat(\"Testing AUC: \", auc(cv_model, test = TRUE)) #> Testing AUC:  0.8553538"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluation-strategies.html","id":"try-yourself","dir":"Articles","previous_headings":"Cross validation","what":"Try yourself","title":"Evaluation strategies","text":"Repeat analysis using default_model created train model article.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluation-strategies.html","id":"spatial-cross-validation","dir":"Articles","previous_headings":"Cross validation","what":"Spatial Cross Validation","title":"Evaluation strategies","text":"train() function accepts folds created two packages: ENMeval (Muscarella et al. 2014) blockCV (Valavi et al. 2019) function convert internally created folds correct format SDMtune. packages specific function create folds partitions spatially environmentally independent. Block partition using package ENMeval: Checkerboard1 partition using package ENMeval: Environmental block using package blockCV:","code":"library(ENMeval) block_folds <- get.block(occ = data@coords[data@pa == 1, ],                           bg.coords = data@coords[data@pa == 0, ])  model <- train(method = \"Maxnet\",                 data = data,                 fc = \"l\",                 reg = 0.8,                 folds = block_folds) cb_folds <- get.checkerboard1(occ = data@coords[data@pa == 1, ],                                env = predictors,                                bg.coords = data@coords[data@pa == 0, ],                                aggregation.factor = 4)  model <- train(method = \"Maxnet\",                 data = data,                 fc = \"l\",                 reg = 0.8,                 folds = cb_folds) library(blockCV) # Create sf object sf_df <- sf::st_as_sf(cbind(data@coords, pa = data@pa),                       coords = c(\"X\", \"Y\"),                       crs = terra::crs(predictors,                                        proj = TRUE))  # Spatial blocks spatial_folds <- cv_spatial(x = sf_df,                             column = \"pa\",                             rows_cols = c(8, 10),                             k = 5,                             hexagon = FALSE,                             selection = \"systematic\")  model <- train(method = \"Maxent\",                 data = data,                 fc = \"l\",                 reg = 0.8,                folds = spatial_folds)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/evaluation-strategies.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Evaluation strategies","text":"article learned: split presence dataset training testing folds; evaluate model using held testing dataset; create random folds cross validation; perform cross validation; use packages create folds k-fold cross validation; evaluate SDMmodelCV() object. next article learn display variable importance plot response curve.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/hyper-tuning.html","id":"training-validation-and-testing-split","dir":"Articles","previous_headings":"","what":"Training, validation and testing split","title":"SDMtune - hyperparameter tuning","text":"tune model hyperparameters iteratively adjust hyperparameters monitoring changes evaluation metric computed using testing dataset. process, information contained testing dataset leaks model therefore, end process, testing dataset doesn’t represent anymore independent set evaluate model Chollet Allaire (2018). better strategy, splitting observation locations training testing, split training, validation testing datasets. training dataset used train model, validation datasets drive hyperparameter tuning testing dataset evaluate tuned model. function trainValTest allows split data three folds containing provided percentage data. illustration purpose let’s split presence locations training (60%), validation (20%) testing (20%) datasets. following steps described basic-use vignette, refer following code clear:","code":"library(SDMtune) library(zeallot)  # Prepare data files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                      full.names = TRUE)  predictors <- terra::rast(files) data <- prepareSWD(species = \"Virtual species\",                     p = virtualSp$presence,                    a = virtualSp$background,                     env = predictors,                    categorical = \"biome\")  # Split data in training, validation and testing datasets c(train, val, test) %<-% trainValTest(data,                                        val = 0.2,                                        test = 0.2,                                       only_presence = TRUE,                                        seed = 61516)  cat(\"# Training  : \", nrow(train@data)) cat(\"\\n# Validation: \", nrow(val@data)) cat(\"\\n# Testing   : \", nrow(test@data))  # Train Maxnet model with default settings model <- train(\"Maxnet\",                 data = train)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/hyper-tuning.html","id":"check-the-effect-of-varying-one-hyperparameter","dir":"Articles","previous_headings":"Training, validation and testing split","what":"Check the effect of varying one hyperparameter","title":"SDMtune - hyperparameter tuning","text":"see effect varying one hyperparameter model performance can use function gridSearch. function iterates set predefined hyperparameter values, train model displays real-time evaluation metric RStudio viewer pane (hover points get tooltip extra information). Let’s see AUC changes varying regularization multiplier. First define values hyperparameter want test. create named list use argument function gridSearch: noticed used validation dataset test argument. output function object class SDMtune. Let’s print : print output, text contains models configuration used execution function. case, regularization multiplier reg multiple values. can plot SDMtune object: can also recreate interactive chart using: SDMtune object stores results slot @results: can order : next example check TSS changes varying regularization multiplier 1 4: AUC changes varying feature combinations using following values: l, lq, lh, lqp, lqph lqpht: Train Maxent model see AUC changes varying number iterations 300 1100 increments 200 (highlight see solution): see hyperparameters can tuned given model use function getTunableArgs. example:","code":"# Define the values for the regularization multiplier h <- list(reg = seq(0.2, 1, 0.1))  # Call the gridSearch function exp_1 <- gridSearch(model,                      hypers = h,                      metric = \"auc\",                      test = val) exp_1 plot(exp_1,       title = \"Experiment 1\") plot(exp_1,       title = \"Experiment 1\",       interactive = TRUE) exp_1@results exp_1@results[order(-exp_1@results$test_AUC), ] # Define the values for reg h <- list(reg = 1:4)  # Call the gridSearch function exp_2 <- gridSearch(model,                      hypers = h,                      metric = \"tss\",                      test = val) # Define the values for fc h <- list(fc = c(\"l\", \"lq\", \"lh\", \"lqp\", \"lqph\", \"lqpht\"))  # Call the gridSearch function exp_3 <- gridSearch(model,                      hypers = h,                      metric = \"auc\",                      test = val) maxent_model <- train(\"Maxent\",                        data = data)  # Define the values for fc h <- list(\"iter\" = seq(300, 1100, 200))  # Call the gridSearch function exp_4 <- gridSearch(maxent_model,                      hypers = h,                      metric = \"auc\",                      test = val) getTunableArgs(model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/hyper-tuning.html","id":"tune-hyperparameters","dir":"Articles","previous_headings":"","what":"Tune hyperparameters","title":"SDMtune - hyperparameter tuning","text":"tune model hyperparameters run possible combinations hyperparameters. example using combinations regularization multiplier feature classes: code takes already quite long train 60 models. Imagine want check values regularization multiplier maybe add number iterations (case Maxent model). number models trained increases exponentially consequently execution time. next two paragraphs present two possible alternative gridSearch function.","code":"h <- list(reg = seq(0.2, 2, 0.2),           fc = c(\"l\", \"lq\", \"lh\", \"lqp\", \"lqph\", \"lqpht\"))  exp_5 <- gridSearch(model,                      hypers = h,                      metric = \"auc\",                      test = val)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/hyper-tuning.html","id":"random-search","dir":"Articles","previous_headings":"Tune hyperparameters","what":"Random search","title":"SDMtune - hyperparameter tuning","text":"function randomSearch trains models taking random sample predefined configurations. next example select 10 random configurations: real-time chart plots two different graphs, one chosen metric trained model one evaluation metric starting best found model. can see, function able find better combination model hyperparameters compared starting model; training 10 instead 150 models. results includes 10 trained model. happy solution, can check best hyperparameter combinations gives intuition ones hyperparameters “refine” using function gridSearch. SDMtune object stores results data.frame can accessed following command:","code":"h <- list(reg = seq(0.2, 5, 0.2),            fc = c(\"l\", \"lq\", \"lh\", \"lp\", \"lqp\", \"lqph\"))  exp_6 <- randomSearch(model,                        hypers = h,                        metric = \"auc\",                        test = val,                        pop = 10,                       seed = 65466) exp_6@results"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/hyper-tuning.html","id":"optimize-model","dir":"Articles","previous_headings":"Tune hyperparameters","what":"Optimize Model","title":"SDMtune - hyperparameter tuning","text":"previous function doesn’t learn anything trained models, just selects n random combinations hyperparameters. function optimizeModel instead uses genetic algorithm find optimum near optimum solution. Check function documentation understand works, provide code execute :","code":"exp_7 <- optimizeModel(model,                        hypers = h,                        metric = \"auc\",                        test = val,                        pop = 15,                        gen = 2,                        seed = 798)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/hyper-tuning.html","id":"evaluate-final-model","dir":"Articles","previous_headings":"Tune hyperparameters","what":"Evaluate final model","title":"SDMtune - hyperparameter tuning","text":"Let’s say want use best tuned model found randomSearch function. evaluating model using testing dataset, can merge training validation datasets together increase number locations train new model merged observations tuned configuration. point may removed variables using varSel reduceVar function. case, merge directly initial datasets contain environmental variables. can extract train dataset selected variables output experiment merge validation dataset using function mergeSWD: val dataset contains initial environmental variables mergeSWD function merge present datasets (case performed variable selection). get model configuration experiment 6: Now can evaluate final model using held apart testing dataset:","code":"# Index of the best model in the experiment index <- which.max(exp_6@results$test_AUC)  # New train dataset containing only the selected variables new_train <- exp_6@models[[index]]@data   # Merge only presence data merged_data <- mergeSWD(new_train,                         val,                         only_presence = TRUE) final_model <- train(\"Maxnet\",                      data = merged_data,                      fc = exp_6@results[index, 1],                      reg = exp_6@results[index, 2]) auc(final_model, test = test)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/hyper-tuning.html","id":"hyperparameters-tuning-with-cross-validation","dir":"Articles","previous_headings":"","what":"Hyperparameters tuning with cross validation","title":"SDMtune - hyperparameter tuning","text":"Another approach split data two folds: training testing, use cross validation strategy training dataset tune model hyperparameters, evaluate tuned model unseen held apart testing dataset. previous examples can applied cross validation, example randomSearch (note case testing dataset provided taken folds stored SDMmodelCV): function randomSearch orders models according best value metric testing dataset. case can train model using best hyperparameters configuration without cross validation :","code":"# Create the folds from the training dataset folds <- randomFolds(train,                      k = 4,                      only_presence = TRUE,                      seed = 25)  # Train the model cv_model <- train(\"Maxent\",                   data = train,                   folds = folds) h <- list(reg = seq(0.2, 5, 0.2),           fc = c(\"l\", \"lq\", \"lh\", \"lp\", \"lqp\", \"lqph\"))  exp_8 <- randomSearch(cv_model,                       hypers = h,                       metric = \"auc\",                       pop = 10,                       seed = 65466) final_model <- combineCV(exp_8@models[[1]])  auc(final_model, test = test)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/make-predictions.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Make predictions","text":"previous articles learned prepare data analysis train model using SDMtune. article learn use trained model make predictions. use default model trained previous article predict distribution virtual species.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/make-predictions.html","id":"make-prediction","dir":"Articles","previous_headings":"","what":"Make prediction","title":"Make predictions","text":"First load SDMtune package: New locations predicted function predict(). function takes three main arguments: trained model given SDMmodel() object; new dataset, used make prediction (can data.frame, SWD() object raster object); output type, Maxent models can : raw, logistic cloglog. Next get prediction training locations using cloglog output type: output case vector containing predicted values training locations: can get prediction presence location : models trained Maxent method, function performs prediction R without calling MaxEnt Java software. results faster computation large datasets might result slightly different output compared Java software.","code":"library(SDMtune) #>  #>    _____  ____   __  ___ __ #>   / ___/ / __ \\ /  |/  // /_ __  __ ____   ___ #>   \\__ \\ / / / // /|_/ // __// / / // __ \\ / _ \\ #>  ___/ // /_/ // /  / // /_ / /_/ // / / //  __/ #> /____//_____//_/  /_/ \\__/ \\__,_//_/ /_/ \\___/  version 1.3.3 #>  #> To cite this package in publications type: citation(\"SDMtune\"). pred <- predict(default_model,                 data = data,                 type = \"cloglog\") head(pred) #> [1] 0.8246888 0.6886814 0.5675941 0.7317644 0.7472581 0.6938709 p <- data@data[data@pa == 1, ] pred <- predict(default_model,                 data = p,                 type = \"cloglog\") tail(pred) #> [1] 0.9571988 0.9222179 0.6833005 0.2801192 0.6050091 0.7394861"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/make-predictions.html","id":"create-a-distribution-map","dir":"Articles","previous_headings":"","what":"Create a distribution map","title":"Make predictions","text":"can use function create distribution map starting predictors raster object created first article. case output raster object: map can saved file directly running prediction, just pass additional arguments predict() function. next example save map file called “my_file” GeoTIFF format: predict() function arguments useful predicting large datasets: progress: can set \"text\" visualize progress bar; extent: can passed reduce prediction given extent.","code":"map <- predict(default_model,                data = predictors,                type = \"cloglog\") map #> class       : SpatRaster  #> size        : 192, 186, 1  (nrow, ncol, nlyr) #> resolution  : 0.5, 0.5  (x, y) #> extent      : -125, -32, -56, 40  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs  #> source(s)   : memory #> name        :         lyr1  #> min value   : 2.401041e-07  #> max value   : 9.665651e-01 map <- predict(default_model,                data = predictors,                type = \"cloglog\",                file = \"my_map\",                format = \"GTiff\")"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/make-predictions.html","id":"plot-a-distribution-map","dir":"Articles","previous_headings":"","what":"Plot a distribution map","title":"Make predictions","text":"plot distribution map can use function plotPred():  function plotPred() plots map color ramp similar one used MaxEnt Java software. can pass additional arguments customize map. next example provide custom color ramp add title legend:","code":"plotPred(map) plotPred(map,          lt = \"Habitat\\nsuitability\",          colorramp = c(\"#2c7bb6\", \"#abd9e9\", \"#ffffbf\", \"#fdae61\", \"#d7191c\"))"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/make-predictions.html","id":"try-yourself","dir":"Articles","previous_headings":"Plot a distribution map","what":"Try yourself","title":"Make predictions","text":"Restrict prediction Chile plot prediction. see solution highlight following cell:","code":"# First create the extent that surrounds Chile e = terra::ext(c(-77, -60, -56, -15)) # Now use the extent to make the prediction map_e <- predict(default_model,                   data = predictors,                   type = \"cloglog\",                   extent = e) # And finally plot the prediction plotPred(map_e)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/make-predictions.html","id":"plot-a-presenceabsence-map","dir":"Articles","previous_headings":"","what":"Plot a presence/absence map","title":"Make predictions","text":"plot presence/absence map need threshold value splits prediction presence absence values. function thresholds() returns commonly used threshold values starting SDMmodel() object. next example print threshold values default_model object using type \"cloglog\": example want create presence/absence map using threshold maximize training sensitivity plus specificity. use function plotPA() passing threshold value argument:  can also save map file following code: functions plotPred() plotPA() argument hrto plot map high resolution, useful map used scientific publication. arguments functions used article please refer documentation.","code":"ths <- thresholds(default_model,                    type = \"cloglog\")  ths plotPA(map,         th = ths[3, 2]) plotPA(map,         th = ths[3, 2],         filename = \"my_pa_map\",         format = \"GTiff\")"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/make-predictions.html","id":"try-yourself-1","dir":"Articles","previous_headings":"Plot a presence/absence map","what":"Try yourself","title":"Make predictions","text":"Repeat analysis using model trained Maxnet method.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/make-predictions.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Make predictions","text":"article learned: make prediction datasets; create save distribution map; plot distribution map; get thresholds values create presence/absence map; plot save presence/absence map. next article learn evaluate model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/prepare-data.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Prepare data for the analysis","text":"article learn prepare data train models using SDMtune. use virtualSp dataset included package environmental predictors WorldClim dataset.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/prepare-data.html","id":"set-working-environment","dir":"Articles","previous_headings":"","what":"Set working environment","title":"Prepare data for the analysis","text":"Load required packages analysis:","code":"library(ggplot2)    # To plot locations library(maps)       # To access useful maps library(rasterVis)  # To plot raster objects"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/prepare-data.html","id":"acquire-environmental-variables","dir":"Articles","previous_headings":"","what":"Acquire environmental variables","title":"Prepare data for the analysis","text":"analysis use climate data WorldClim version 1.4 (Hijmans et al. 2005) terrestrial ecoregions WWF (Olson et al. 2001) included dismo package: convert files raster object used later analysis: nine environmental variables, eight continuous one categorical: bio1 Annual Mean Temperature bio5 Max Temperature Warmest Month bio6 Min Temperature Coldest Month bio7 Temperature Annual Range (bio5-bio6) bio8 Mean Temperature Wettest Quarter bio12 Annual Precipitation bio16 Precipitation Wettest Quarter bio17 Precipitation Driest Quarter biome Terrestrial Ecoregions World can plot bio1 using gplot function rasterVis package:","code":"files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE) predictors <- terra::rast(files) names(predictors) #> [1] \"bio1\"  \"bio12\" \"bio16\" \"bio17\" \"bio5\"  \"bio6\"  \"bio7\"  \"bio8\"  \"biome\" gplot(predictors$bio1) +     geom_tile(mapping = aes(fill = value)) +     coord_equal() +     scale_fill_gradientn(colours = c(\"#2c7bb6\", \"#abd9e9\", \"#ffffbf\", \"#fdae61\", \"#d7191c\"),                          na.value = \"transparent\",                          name = \"°C x 10\") +     labs(title = \"Annual Mean Temperature\",          x = \"longitude\",          y = \"latitude\") +     scale_x_continuous(expand = c(0, 0)) +     scale_y_continuous(expand = c(0, 0)) +     theme_minimal() +     theme(plot.title = element_text(hjust = 0.5),           axis.ticks.x = element_blank(),           axis.ticks.y = element_blank())"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/prepare-data.html","id":"prepare-presence-and-background-locations","dir":"Articles","previous_headings":"","what":"Prepare presence and background locations","title":"Prepare data for the analysis","text":"Let’s load SDMtune package: demonstrating use SDMtune use random generated virtual species virtualSp dataset included package. dataset contains 400 coordinates presence 5000 background locations. Plot study area together presence locations:  plot background locations run following code:","code":"library(SDMtune) #>  #>    _____  ____   __  ___ __ #>   / ___/ / __ \\ /  |/  // /_ __  __ ____   ___ #>   \\__ \\ / / / // /|_/ // __// / / // __ \\ / _ \\ #>  ___/ // /_/ // /  / // /_ / /_/ // / / //  __/ #> /____//_____//_/  /_/ \\__/ \\__,_//_/ /_/ \\___/  version 1.3.3 #>  #> To cite this package in publications type: citation(\"SDMtune\"). help(virtualSp) p_coords <- virtualSp$presence bg_coords <- virtualSp$background ggplot(data = map_data(\"world\"), mapping = aes(x = long, y = lat)) +     geom_polygon(aes(group = group), fill = \"grey95\", color = \"gray40\", size = 0.2) +     geom_jitter(data = p_coords, aes(x = x, y = y), color = \"red\",                 alpha = 0.4, size = 1) +     labs(x = \"longitude\", y = \"latitude\") +     theme_minimal() +     theme(legend.position = \"none\") +     coord_fixed() +     scale_x_continuous(limits = c(-125, -32)) +     scale_y_continuous(limits = c(-56, 40)) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. ggplot(data = map_data(\"world\"), mapping = aes(x = long, y = lat)) +     geom_polygon(aes(group = group), fill = \"grey95\", color = \"gray40\", size = 0.2) +     geom_jitter(data = as.data.frame(bg_coords), aes(x = x, y = y),                 color = \"blue\", alpha = 0.4, size = 0.5) +     labs(x = \"longitude\", y = \"latitude\") +     theme_minimal() +     theme(legend.position = \"none\") +     coord_fixed() +     scale_x_continuous(limits = c(-125, -32)) +     scale_y_continuous(limits = c(-56, 40))"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/prepare-data.html","id":"create-an-swd-object","dir":"Articles","previous_headings":"","what":"Create an SWD object","title":"Prepare data for the analysis","text":"training model prepare data correct format. prepareSWD() function creates SWD() object stores species name, coordinates species presence absence/background locations value environmental variables locations. argument categorical indicates environmental variables categorical. example biome categorical (can pass vector one categorical environmental variable). function extracts value environmental variables location excludes locations NA value least one environmental variable.","code":"data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\")"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/prepare-data.html","id":"explore-the-swd-object","dir":"Articles","previous_headings":"","what":"Explore the SWD object","title":"Prepare data for the analysis","text":"Let’s look created SWD() object: print SWD() object get bunch information: name class; name species; number presence locations; number absence/background locations; name continuous environmental variables, ; name categorical environmental variables, . object contains four slots: @species, @coords @data @pa. @pa contains vector 1 presence 0 absence/background locations. visualize data run: can visualize coordinates : name species :","code":"data #>  #> ── Object of class: <SWD> ── #>  #> ── Info #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 5000 #>  #> ── Variables #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" head(data@data) head(data@coords) data@species #> [1] \"Virtual species\""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/prepare-data.html","id":"save-an-swd-object","dir":"Articles","previous_headings":"","what":"Save an SWD object","title":"Prepare data for the analysis","text":"can save SWD() object .csv file using function swd2csv() (function saves file working directory). two possibilities: save object single file column pa indicating location presence (1) absence/background (0) site save object two separate files: one presence absence/background locations","code":"swd2csv(data, file_name = \"data.csv\") swd2csv(data, file_name = c(\"presence.csv\", \"background.csv\"))"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/prepare-data.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Prepare data for the analysis","text":"article learned: create raster object; plot raster object using gplot function included rasterVis package; plot locations using ggplot maps packages; create SWD() objects; extract information SWD() object; save SWD() object .csv file. Move second article learn train models using SDMtune.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/presence-absence.html","id":"train-the-model","dir":"Articles","previous_headings":"","what":"Train the model","title":"SDMtune - presence absence models","text":"first train model default settings using 10 neurons: Let’s check training testing AUC:","code":"set.seed(25) model <- train(\"ANN\",                data = train,                size = 10,                folds = folds)  model auc(model) auc(model, test = TRUE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/presence-absence.html","id":"tune-model-hyperparameters","dir":"Articles","previous_headings":"","what":"Tune model hyperparameters","title":"SDMtune - presence absence models","text":"check hyperparameters can tuned use function getTunableArgs function: use function optimizeModel tune hyperparameters: best model :","code":"getTunableArgs(model) h <- list(size = 10:50,           decay = c(0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5),           maxit = c(50, 100, 300, 500))  om <- optimizeModel(model,                     hypers = h,                     metric = \"auc\",                     seed = 25) best_model <- om@models[[1]] om@results[1, ]"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/presence-absence.html","id":"evaluate-the-final-model","dir":"Articles","previous_headings":"","what":"Evaluate the final model","title":"SDMtune - presence absence models","text":"now train model configuration found functionoptimizeModel, without cross validation, using train data, evaluate using held apart testing dataset:","code":"set.seed(25) final_model <- train(\"ANN\",                      data = train,                      size = om@results[1, 1],                      decay = om@results[1, 2],                      maxit = om@results[1, 4])  plotROC(final_model,         test = test)"},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-model.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Train a model","text":"previous article learned prepare data analysis using virtualSp dataset WorldClim environmental variables. Now ’s time train first model, let’s ! SDMtune supports four methods model training: Artificial Neural Networks ANN, using nnet package (Venables Ripley 2002); Boosted Regression Trees BRT, using gbm package (Greenwell et al. 2019); Maxent using dismo package (Hijmans et al. 2017); Maxnet using maxnet package (Phillips 2017); Random Forest RF, using randomForest package (Liaw Wiener 2002). code necessary train model implementations. show train Maxent model, can adapt code methods check article.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-model.html","id":"train-a-model-with-default-settings","dir":"Articles","previous_headings":"","what":"Train a model with default settings","title":"Train a model","text":"First load SDMtune package: use function train() train Maxent model. need provide two arguments: method: “Maxent” case; data: SWD() object presence background locations created previous article. function trains model using default settings : linear, quadratic, product hinge feature class combinations; regularization multiplier equal 1; 500 algorithm iterations. see later change default settings, moment let’s look default_model object.","code":"library(SDMtune) #>  #>    _____  ____   __  ___ __ #>   / ___/ / __ \\ /  |/  // /_ __  __ ____   ___ #>   \\__ \\ / / / // /|_/ // __// / / // __ \\ / _ \\ #>  ___/ // /_/ // /  / // /_ / /_/ // / / //  __/ #> /____//_____//_/  /_/ \\__/ \\__,_//_/ /_/ \\___/  version 1.3.3 #>  #> To cite this package in publications type: citation(\"SDMtune\"). default_model <- train(method = \"Maxent\",                        data = data)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-model.html","id":"explore-an-sdmmodel-object","dir":"Articles","previous_headings":"","what":"Explore an SDMmodel object","title":"Train a model","text":"output function train() object class SDMmodel(). Let’s print : print SDMmodel object get following information: name class; method used train model; name species; number presence locations; number absence/background locations; fc: feature class combinations; reg: regularization multiplier; iter: number iterations; name continuous environmental variables, ; name categorical environmental variables, . SDMmodel() object two slots: data: SWD() object presence absence/background locations used train model; model: Maxent() object, case, model configurations. slot model contains configurations model plus information used make predictions. moment important : fc, reg iter contain values model configuration. explore others later another article.","code":"default_model #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxent #>  #> ── Hyperparameters #> • fc: \"lqph\" #> • reg: 1 #> • iter: 500 #>  #> ── Info #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 5000 #>  #> ── Variables #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" slotNames(default_model) #> [1] \"data\"  \"model\" slotNames(default_model@model) #>  [1] \"results\"    \"reg\"        \"fc\"         \"iter\"       \"extra_args\" #>  [6] \"lambdas\"    \"coeff\"      \"formula\"    \"lpn\"        \"dn\"         #> [11] \"entropy\"    \"min_max\""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-model.html","id":"train-a-model-changing-the-default-settings","dir":"Articles","previous_headings":"","what":"Train a model changing the default settings","title":"Train a model","text":"function train() accepts optional arguments can used change default model settings. previous example trained model using:","code":"default_model <- train(method = \"Maxent\",                         data = data,                         fc = \"lqph\",                         reg = 1,                         iter = 500)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-model.html","id":"try-yourself","dir":"Articles","previous_headings":"Train a model changing the default settings","what":"Try yourself","title":"Train a model","text":"Try change default settings train model using linear hinge feature class combination, 0.5 regularization multiplier 700 iterations. see solution highlight next cell: default Maxent models trained using arguments “removeduplicates=false” “addsamplestobackground=false”. user full control data used train model, expected duplicated locations already removed presence locations already included background locations, desired. can use function thinData() remove duplicated locations function addSamplesToBg() add presence locations background locations.","code":"model <- train(method = \"Maxent\",                 data = data,                 fc = \"lh\",                 reg = 0.5,                 iter = 700)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-model.html","id":"train-a-maxnet-model","dir":"Articles","previous_headings":"","what":"Train a Maxnet model","title":"Train a model","text":"Train model using Maxnet method simple changing name method train() function, difference set number iteration.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-model.html","id":"try-yourself-1","dir":"Articles","previous_headings":"Train a Maxnet model","what":"Try yourself","title":"Train a model","text":"Try train model using Maxnet method. see solution highlight following cell:","code":"maxnet_model <- train(\"Maxnet\",                        data = data)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-model.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Train a model","text":"article learned: train Maxent model using default settings; explore SDMmodel() object; train model changing default settings; train model using Maxnet method. next article learn use model just trained get predicted value new localities.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-tune-presence-absence-models.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Train presence absence models","text":"previous articles based presence methods, article learn train presence absence model. following examples based Artificial Neural Networks method (Venables Ripley 2002), can adapt code supported methods.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-tune-presence-absence-models.html","id":"prepare-the-data-for-the-analysis","dir":"Articles","previous_headings":"","what":"Prepare the data for the analysis","title":"Train presence absence models","text":"use first 8 environmental variables virtualSp() dataset selecting absence instead background locations. 400 presence 300 absence locations. model evaluation create training testing datasets, holding apart 20% data: point 560 training 140 testing locations. create 4-folds partition run cross validation:","code":"p_coords <- virtualSp$presence a_coords <- virtualSp$absence  data <- prepareSWD(species = \"Virtual species\",                     p = p_coords,                     a = a_coords,                     env = predictors[[1:8]])  data #>  #> ── Object of class: <SWD> ── #>  #> ── Info #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 300 #>  #> ── Variables #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: NA library(zeallot) c(train, test) %<-% trainValTest(data,                                   test = 0.2,                                   seed = 25) folds <- randomFolds(train,                       k = 4,                       seed = 25)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-tune-presence-absence-models.html","id":"train-the-model","dir":"Articles","previous_headings":"","what":"Train the model","title":"Train presence absence models","text":"first train model default settings 10 neurons: Let’s check training testing AUC:","code":"set.seed(25) model <- train(\"ANN\",                 data = train,                 size = 10,                 folds = folds) model #>  #> ── Object of class: <SDMmodelCV> ── #>  #> Method: Artificial Neural Networks #>  #> ── Hyperparameters #> • size: 10 #> • decay: 0 #> • rang: 0.7 #> • maxit: 100 #>  #> ── Info #> • Species: Virtual species #> • Replicates: 4 #> • Total presence locations: 320 #> • Total absence locations: 240 #>  #> ── Variables #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: NA auc(model) #> [1] 0.8180469 auc(model, test = TRUE) #> [1] 0.7931771"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-tune-presence-absence-models.html","id":"tune-model-hyperparameters","dir":"Articles","previous_headings":"","what":"Tune model hyperparameters","title":"Train presence absence models","text":"check hyperparameters can tuned use function getTunableArgs() function: use function optimizeModel() tune hyperparameters: best model : validation AUC increased 0.7931771 default models 0.9545833 optimized one.","code":"getTunableArgs(model) #> [1] \"size\"  \"decay\" \"rang\"  \"maxit\" h <- list(size = 10:50,            decay = c(0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5),           maxit = c(50, 100, 300, 500))  om <- optimizeModel(model,                      hypers = h,                      metric = \"auc\",                      seed = 25) best_model <- om@models[[1]] om@results[1, ]"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-tune-presence-absence-models.html","id":"evaluate-the-final-model","dir":"Articles","previous_headings":"","what":"Evaluate the final model","title":"Train presence absence models","text":"now train model configuration found function optimizeModel() without cross validation (.e. using presence background locations) evaluate using held apart testing dataset:","code":"set.seed(25) final_model <- combineCV(om@models[[1]])  plotROC(final_model,          test = test)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/train-tune-presence-absence-models.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Train presence absence models","text":"tutorial learned general way train, evaluate tune model using Artificial Neural Network, can apply workflow methods.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/tune-hyperparameters.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Tune model hyperparameters","text":"previous articles learned core functions SDMtune perform data-driven variable selection. article learn tune model hyperparameters.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/tune-hyperparameters.html","id":"training-validation-and-testing-split","dir":"Articles","previous_headings":"","what":"Training, validation and testing split","title":"Tune model hyperparameters","text":"tune model hyperparameters iteratively adjust hyperparameters monitoring changes evaluation metric computed using testing dataset. process, information contained testing dataset leaks model therefore, end process, testing dataset doesn’t represent anymore independent set evaluate model Chollet Allaire (2018). better strategy, splitting observation locations training testing, split training, validation testing datasets. training dataset used train model, validation datasets drive hyperparameter tuning testing dataset evaluate tuned model. function trainValTest() allows split data three folds containing provided percentage data. illustration purpose let’s split presence locations training (60%), validation (20%) testing (20%) datasets: now train Maxnet model default settings using training dataset: Another approach split data two folds: training testing, use cross validation strategy training dataset tune model hyperparameters, evaluate tuned model unseen held apart testing dataset. execution time reason demonstrate first approach free try second one.","code":"library(zeallot)  # For unpacking assignment c(train, val, test) %<-% trainValTest(data,                                        val = 0.2,                                        test = 0.2,                                        only_presence = TRUE,                                        seed = 61516)  cat(\"# Training  : \", nrow(train@data)) #> # Training  :  5240 cat(\"# Validation: \", nrow(val@data)) #> # Validation:  5080 cat(\"# Testing   : \", nrow(test@data)) #> # Testing   :  5080 model <- train(\"Maxnet\",                 data = train)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/tune-hyperparameters.html","id":"check-the-effect-of-varying-one-hyperparameter","dir":"Articles","previous_headings":"","what":"Check the effect of varying one hyperparameter","title":"Tune model hyperparameters","text":"see effect varying one hyperparameter model performance can use function gridSearch(). function iterates set predefined hyperparameter values, train model displays real-time evaluation metric RStudio viewer pane (hover points get tooltip extra information). Let’s see AUC changes varying regularization multiplier. First define values hyperparameter want test. create named list use argument function gridSearch(): noticed used validation dataset test argument. output function object class SDMtune(). Let’s print : print output, text contains models configuration used execution function. case, regularization multiplier reg multiple values. can plot SDMtune() object:  can also recreate interactive chart using: SDMtune() object stores results slot @results: can order :","code":"# Define the values for the regularization multiplier h <- list(reg = seq(0.2, 1, 0.1))  # Call the gridSearch function exp_1 <- gridSearch(model,                      hypers = h,                      metric = \"auc\",                      test = val) exp_1 #>  #> ── Object of class: <SDMtune> ── #>  #> Method: Maxnet #>  #> ── Tested hyperparameters #> • fc: \"lqph\" #> • reg: 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, and 1 plot(exp_1,       title = \"Experiment 1\") plot(exp_1,       title = \"Experiment 1\",       interactive = TRUE) exp_1@results exp_1@results[order(-exp_1@results$test_AUC), ]"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/tune-hyperparameters.html","id":"try-yourself","dir":"Articles","previous_headings":"Check the effect of varying one hyperparameter","what":"Try yourself","title":"Tune model hyperparameters","text":"Try see TSS changes varying regularization multiplier 1 4 (highlight see solution): AUC changes varying feature combinations using following values: l, lq, lh, lqp, lqph lqpht (highlight see solution): Train Maxent model see AUC changes varying number iterations 300 1100 increments 200 (highlight see solution): see hyperparameters can tuned given model use function getTunableArgs(). example:","code":"# Define the values for reg h <- list(reg = 1:4)  # Call the gridSearch function exp_2 <- gridSearch(model,                      hypers = h,                      metric = \"tss\",                      test = val) # Define the values for fc h <- list(fc = c(\"l\", \"lq\", \"lh\", \"lqp\", \"lqph\", \"lqpht\"))  # Call the gridSearch function exp_3 <- gridSearch(model,                      hypers = h,                      metric = \"auc\",                      test = val) maxent_model <- train(\"Maxent\",                        data = data)  # Define the values for fc h <- list(\"iter\" = seq(300, 1100, 200))  # Call the gridSearch function exp_4 <- gridSearch(maxent_model,                      hypers = h,                      metric = \"auc\",                      test = val) getTunableArgs(model) #> [1] \"fc\"  \"reg\""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/tune-hyperparameters.html","id":"tune-hyperparameters","dir":"Articles","previous_headings":"","what":"Tune hyperparameters","title":"Tune model hyperparameters","text":"tune model hyperparameters run possible combinations hyperparameters. example using combinations regularization multiplier feature classes: code takes already quite long train 60 models. Imagine want check values regularization multiplier maybe add number iterations (case Maxent model). number models trained increases exponentially consequently execution time. next two paragraphs present two possible alternative gridSearch() function.","code":"h <- list(reg = seq(0.2, 2, 0.2),            fc = c(\"l\", \"lq\", \"lh\", \"lqp\", \"lqph\", \"lqpht\"))  exp_5 <- gridSearch(model,                      hypers = h,                      metric = \"auc\",                      test = val)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/tune-hyperparameters.html","id":"random-search","dir":"Articles","previous_headings":"","what":"Random search","title":"Tune model hyperparameters","text":"function randomSearch() trains models taking random sample predefined configurations. next example select 10 random configurations: real-time chart plots two different graphs, one chosen metric trained model one evaluation metric starting best found model. can see, function able find better combination model hyperparameters compared starting model; training 10 instead 150 models. results includes 10 trained model. happy solution, can check best hyperparameter combinations gives intuition ones hyperparameters “refine” using function gridSearch(). SDMtune() object stores results data.frame can accessed following command:","code":"h <- list(reg = seq(0.2, 5, 0.2),            fc = c(\"l\", \"lq\", \"lh\", \"lp\", \"lqp\", \"lqph\"))  exp_6 <- randomSearch(model,                        hypers = h,                        metric = \"auc\",                        test = val,                        pop = 10,                        seed = 65466) exp_6@results"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/tune-hyperparameters.html","id":"optimize-model","dir":"Articles","previous_headings":"","what":"Optimize Model","title":"Tune model hyperparameters","text":"previous function doesn’t learn anything trained models, just selects n random combinations hyperparameters. function optimizeModel() uses genetic algorithm find optimum near optimum solution. Check function documentation understand works, provide code execute :","code":"exp_7 <- optimizeModel(model,                         hypers = h,                         metric = \"auc\",                         test = val,                         pop = 15,                         gen = 2,                         seed = 798)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/tune-hyperparameters.html","id":"evaluate-final-model","dir":"Articles","previous_headings":"","what":"Evaluate final model","title":"Tune model hyperparameters","text":"Let’s say want use best tuned model found randomSearch() function. evaluating model using testing dataset, can merge training validation datasets together increase number locations train new model merged observations tuned configuration. point may removed variables using varSel() reduceVar() function. case, merge directly initial datasets contain environmental variables. can extract train dataset selected variables output experiment merge validation dataset using function mergeSWD(): val dataset contains initial environmental variables mergeSWD() function merge present datasets (case performed variable selection). get model configuration experiment 6: best model row 1 trained using lp feature class combination 2.2 regularization multiplier: Now can evaluate final model using held apart testing dataset:","code":"# Index of the best model in the experiment index <- which.max(exp_6@results$test_AUC)  # New train dataset containing only the selected variables new_train <- exp_6@models[[index]]@data   # Merge only presence data merged_data <- mergeSWD(new_train,                         val,                         only_presence = TRUE) head(exp_6@results) final_model <- train(\"Maxnet\",                       data = merged_data,                       fc = exp_6@results[index, 1],                       reg = exp_6@results[index, 2]) auc(final_model,      test = test) #> [1] 0.8325913"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/tune-hyperparameters.html","id":"hyperparameters-tuning-with-cross-validation","dir":"Articles","previous_headings":"","what":"Hyperparameters tuning with cross validation","title":"Tune model hyperparameters","text":"Another approach split data two folds: training testing, use cross validation strategy training dataset tune model hyperparameters, evaluate tuned model unseen held apart testing dataset. previous examples can applied cross validation, example randomSearch (note case testing dataset provided taken folds stored SDMmodelCV): function randomSearch orders models according best value metric testing dataset. case can train model using best configuration hyperparameters without cross validation (.e. using presence background locations) :","code":"# Create the folds from the training dataset folds <- randomFolds(train,                       k = 4,                       only_presence = TRUE,                       seed = 25)  # Train the model cv_model <- train(\"Maxent\",                    data = train,                    folds = folds) h <- list(reg = seq(0.2, 5, 0.2),            fc = c(\"l\", \"lq\", \"lh\", \"lp\", \"lqp\", \"lqph\"))  exp_8 <- randomSearch(cv_model,                        hypers = h,                        metric = \"auc\",                        pop = 10,                        seed = 65466) final_model <- combineCV(exp_8@models[[1]])  auc(final_model,      test = test)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/tune-hyperparameters.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Tune model hyperparameters","text":"article learned: training/validation/testing evaluation strategy; explore effect changing one model hyperparameter time; tune model hyperparameters using three different functions; merge two SWD() objects; evaluate final model using held apart testing dataset.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/var-selection.html","id":"load-data-and-train-model","dir":"Articles","previous_headings":"","what":"Load data and train model","title":"SDMtune - variable selection","text":"following steps described basic-use vignette, refer following code clear:","code":"library(SDMtune) library(zeallot)  # Prepare data files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE) predictors <- terra::rast(files) data <- prepareSWD(species = \"Virtual species\",                    p = virtualSp$presence,                    a = virtualSp$background,                    env = predictors,                    categorical = \"biome\")  c(train, test) %<-% trainValTest(data,                                  test = 0.2,                                  only_presence = TRUE,                                  seed = 25)  # Train model model <- train(\"Maxent\",                data = train)  # Train cross validation model folds <- randomFolds(data,                      k = 4,                      only_presence = TRUE,                      seed = 25)  cv_model <- train(\"Maxent\",                   data = data,                   folds = folds)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/var-selection.html","id":"variable-importance","dir":"Articles","previous_headings":"","what":"Variable importance","title":"SDMtune - variable selection","text":"Maxent model can get variable importance values output MaxEnt Java software. values stored model object can displayed using following command: function maxentVarImp extracts variable importance values previous output formats human readable way: can see function returns data.frame variable name, percent contribution permutation importance. can plot variable importance bar chart using function plotVarImp. example can plot percent contribution using: permutation importance : SDMtune function compute permutation importance iterates several permutations return averaged value together standard deviation. use function compute permutation importance Maxnet model.","code":"model@model@results vi <- maxentVarImp(model) vi plotVarImp(vi[, 1:2]) plotVarImp(vi[, c(1,3)])"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/var-selection.html","id":"permutation-importance","dir":"Articles","previous_headings":"Variable importance","what":"Permutation importance","title":"SDMtune - variable selection","text":"example train Maxnet model: Now can calculate variable importance function varImp() using 5 permutations: plot : Next compute permutation importance Maxent model using 10 permutations compare results Maxent output: difference probably due different shuffling presence background locations permutation process example performed 10 permutations averaged values.","code":"maxnet_model <- train(\"Maxnet\",                       data = train) vi_maxnet <- varImp(maxnet_model,                     permut = 5)  vi_maxnet plotVarImp(vi_maxnet) # Compute the permutation importance vi_maxent <- varImp(model,                     permut = 10)  # Print it vi_maxent  # Compare with Maxent output maxentVarImp(model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/var-selection.html","id":"jackknife-test-for-variable-importance","dir":"Articles","previous_headings":"Variable importance","what":"Jackknife test for variable importance","title":"SDMtune - variable selection","text":"Another method estimate variable importance leave one Jackknife test. test removes one variable time records change chosen metric. use function doJk, AUC evaluation metric maxnet_model: can also plot output using function plotJk. following example plot previous result add line representing AUC full model trained using variables. First plot Jackknife test training AUC: Jackknife test testing AUC:","code":"jk <- doJk(maxnet_model,            metric = \"auc\",            test = test)  jk plotJk(jk,        type = \"train\",        ref = auc(maxnet_model)) plotJk(jk,        type = \"test\",        ref = auc(maxnet_model, test = test))"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/var-selection.html","id":"response-curves","dir":"Articles","previous_headings":"Variable importance","what":"Response curves","title":"SDMtune - variable selection","text":"function plotResponse possible plot marginal univariate response curve. Let’s plot cloglog univariate response curve bio1: top displayed rug presence locations bottom rug background locations. another example can plot logistic marginal response curve biome categorical variable, keeping variables mean value: case SDMmodelCV response curve shows averaged value prediction together one Standard Deviation error interval:","code":"plotResponse(maxnet_model,              var = \"bio1\",              type = \"cloglog\",              only_presence = TRUE,              marginal = FALSE,              rug = TRUE) plotResponse(maxnet_model,              var = \"biome\",              type = \"logistic\",              only_presence = TRUE,              marginal = TRUE,              fun = mean,              color = \"blue\") plotResponse(cv_model,              var = \"bio1\",              type = \"cloglog\",              only_presence = TRUE,              marginal = TRUE,              fun = mean,              rug = TRUE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/var-selection.html","id":"model-report","dir":"Articles","previous_headings":"Variable importance","what":"Model report","title":"SDMtune - variable selection","text":"learned till now con saved summarized calling function modelReport. function : save training, background testing locations separated csv files; train evaluate model; create report html format ROC curve, threshold values, response curves, predicted map Jackknife test; save predicted distribution map; save curves plot folder; save model .Rds extension can loaded R using readRDS function. function totally inspired default output MaxEnt Java software (Phillips, Anderson, Schapire 2006) extends methods. can decide include report using dedicated function arguments, like response_curves, jk env function used SDMmodelCV objects. Run following code create report Maxnet model trained : output displayed browser files saved virtual-sp folder.","code":"modelReport(maxnet_model,             type = \"cloglog\",             folder = \"virtual-sp\",             test = test,             response_curves = TRUE,             only_presence = TRUE,             jk = TRUE,             env = predictors)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/var-selection.html","id":"data-driven-variable-selection","dir":"Articles","previous_headings":"","what":"Data-driven variable selection","title":"SDMtune - variable selection","text":"explore correlation among variables extract 10000 background locations using functionrandomPoints included dismo package (set seed reproducible results). create SWD object using prepareSWD function: environmental variables downloaded coarse resolution function can extract bit less 10000 random locations (see warning message). function plotCor can create heat map showing degree autocorrelation: can select different correlation method set different correlation threshold. Another useful function corVar instead creating heat map prints pairs correlated variables according given method correlation threshold: can see variables correlation coefficient greater 0.7 absolute value.","code":"set.seed(25) bg <- terra::spatSample(predictors,                         size = 10000,                         method = \"random\",                         na.rm = TRUE,                         xy = TRUE,                         values = FALSE)  bg <- prepareSWD(species = \"Bgs\",                  a = bg,                  env = predictors,                  categorical = \"biome\") plotCor(bg,         method = \"spearman\",         cor_th = 0.7) corVar(bg,        method = \"spearman\",        cor_th = 0.7)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/var-selection.html","id":"remove-highly-correlated-variables","dir":"Articles","previous_headings":"Data-driven variable selection","what":"Remove highly correlated variables","title":"SDMtune - variable selection","text":"SDMtune implements algorithm removes highly correlated variables repeating following steps: ranks variables according permutation importance percent contribution (second method available Maxent models). checks variable ranked important highly correlated variables, according given method correlation threshold. algorithm finds correlated variables moves next step, otherwise checks variables rank; performs leave one Jackknife test among correlated variables; remove variable decreases less model performance removed, according given metric training dataset. process repeated remaining variables correlation coefficient lower provided correlation threshold. next example remove variables Spearman correlation coefficient |rs|≤0.7|r_s|\\leq0.7 checking AUC training dataset (use one permutation save time free increase value). use RStudio, function creates interactive real-time chart viewer pane. Run following code hover chart execution function get extra information: can see variables removed. output function model trained selected variables: next example remove highly correlated variables using Maxent model, ranking variables percent contribution using AICc evaluation metric:","code":"selected_variables_model <- varSel(maxnet_model,                                    metric = \"auc\",                                    test = test,                                    bg4cor = bg,                                    method = \"spearman\",                                    cor_th = 0.7,                                    permut = 1) selected_variables_model selected_variables_model <- varSel(model,                                    metric = \"aicc\",                                    bg4cor = bg,                                    method = \"spearman\",                                    cor_th = 0.7,                                    env = predictors,                                    use_pc = TRUE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/var-selection.html","id":"remove-variables-with-low-importance","dir":"Articles","previous_headings":"Data-driven variable selection","what":"Remove variables with low importance","title":"SDMtune - variable selection","text":"cases model environmental variables ranked low contribution may want remove reduce model complexity. SDMtune offers two different strategies implemented function reduceVar. use Maxent model trained variables. Let’s first check permutation importance (use one permutation save time): first example want remove environmental variables permutation importance lower 6%, matter model performance decreases. function removes last ranked environmental variable, trains new model computes new rank. process repeated remaining environmental variables importance greater 6%: second example want remove environmental variables permutation importance lower 15% removing variables model performance decrease, according given metric. case function performs leave one Jackknife test remove environmental variables step-wise fashion described previous example, model performance doesn’t drop: can see case several variables removed AUC testing dataset didn’t decrease.","code":"varImp(model,        permut = 1) cat(\"Testing AUC before: \", auc(maxnet_model, test = test))  reduced_variables_model <- reduceVar(maxnet_model,                                      th = 6,                                      metric = \"auc\",                                      test = test,                                      permut = 1)  cat(\"Testing AUC after: \", auc(reduced_variables_model, test = test)) cat(\"Testing AUC before: \", auc(maxnet_model, test = test))  reduced_variables_model <- reduceVar(maxnet_model,                                      th = 15, metric = \"auc\",                                      test = test,                                      permut = 1,                                      use_jk = TRUE)  cat(\"Testing AUC after: \", auc(reduced_variables_model, test = test))"},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-importance.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Variable Importance","text":"previous articles learned prepare data analysis, train model, make predictions, evaluate model two different evaluation strategies using SDMtune. article learn display plot variable importance plot response curves.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-importance.html","id":"variable-importance-for-maxent-models","dir":"Articles","previous_headings":"","what":"Variable importance for Maxent models","title":"Variable Importance","text":"First load SDMtune package: Maxent model can get variable importance values output MaxEnt Java software. values stored model object can displayed using following command: function maxentVarImp() extracts variable importance values previous output formats human readable way: can see function returns data.frame variable name, percent contribution permutation importance. can plot variable importance bar chart using function plotVarImp(). example can plot percent contribution using:","code":"library(SDMtune) #>  #>    _____  ____   __  ___ __ #>   / ___/ / __ \\ /  |/  // /_ __  __ ____   ___ #>   \\__ \\ / / / // /|_/ // __// / / // __ \\ / _ \\ #>  ___/ // /_/ // /  / // /_ / /_/ // / / //  __/ #> /____//_____//_/  /_/ \\__/ \\__,_//_/ /_/ \\___/  version 1.3.3 #>  #> To cite this package in publications type: citation(\"SDMtune\"). default_model@model@results vi <- maxentVarImp(default_model) vi plotVarImp(vi[, 1:2])"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-importance.html","id":"try-yourself","dir":"Articles","previous_headings":"Variable importance for Maxent models","what":"Try yourself","title":"Variable Importance","text":"Plot permutation importance bar chart. see solution highlight following cell: SDMtune function compute permutation importance iterates several permutations return averaged value together standard deviation. use function compute permutation importance Maxnet model.","code":"# The function accepts a data.frame with 2 columns: one with the variable name # and one with the values, so it is enough to select the first and the third # columns from the vi data.frame plotVarImp(vi[, c(1,3)])"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-importance.html","id":"permutation-importance","dir":"Articles","previous_headings":"","what":"Permutation importance","title":"Variable Importance","text":"example use Maxnet model training/testing validation strategy like previous article: Now can calculate variable importance function varImp() using 5 permutations: plot :","code":"library(zeallot)  # For unpacking assignment c(train, test) %<-% trainValTest(data,                                   test = 0.2,                                   only_presence = TRUE,                                   seed = 25)  maxnet_model <- train(\"Maxnet\",                        data = train) vi_maxnet <- varImp(maxnet_model,                      permut = 5) vi_maxnet plotVarImp(vi_maxnet)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-importance.html","id":"try-yourself-1","dir":"Articles","previous_headings":"Permutation importance","what":"Try yourself","title":"Variable Importance","text":"Use varImp() function compute permutation importance default_model using 10 permutations compare results Maxent output. see solution highlight following cell: difference probably due different shuffling presence background locations permutation process example performed 10 permutations averaged values.","code":"# Compute the permutation importance vi_maxent <- varImp(default_model,                      permut = 10)  # Print it vi_maxent  # Compare with Maxent output maxentVarImp(default_model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-importance.html","id":"jackknife-test-for-variable-importance","dir":"Articles","previous_headings":"","what":"Jackknife test for variable importance","title":"Variable Importance","text":"Another method estimate variable importance leave one Jackknife test. test removes one variable time records change chosen metric. use function doJk(), AUC evaluation metric maxnet_model: can also plot output using function plotJk(). following example plot previous result add line representing AUC full model trained using variables. First plot Jackknife test training AUC:  Jackknife test testing AUC:","code":"jk <- doJk(maxnet_model,             metric = \"auc\",             test = test) jk plotJk(jk,         type = \"train\",         ref = auc(maxnet_model)) plotJk(jk,         type = \"test\",         ref = auc(maxnet_model, test = test))"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-importance.html","id":"try-yourself-2","dir":"Articles","previous_headings":"Jackknife test for variable importance","what":"Try yourself","title":"Variable Importance","text":"Repeat Jackknife part using TSS AICc evaluation metric using dafult_model","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-importance.html","id":"response-curves","dir":"Articles","previous_headings":"","what":"Response curves","title":"Variable Importance","text":"function plotResponse() possible plot marginal univariate response curve. Let’s plot cloglog univariate response curve bio1:  top displayed rug presence locations bottom rug background locations. another example can plot logistic marginal response curve biome categorical variable, keeping variables mean value:","code":"plotResponse(maxnet_model,               var = \"bio1\",               type = \"cloglog\",               only_presence = TRUE,               marginal = FALSE,               rug = TRUE) plotResponse(maxnet_model,               var = \"biome\",               type = \"logistic\",               only_presence = TRUE,               marginal = TRUE,               fun = mean,               color = \"blue\")"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-importance.html","id":"try-yourself-3","dir":"Articles","previous_headings":"Response curves","what":"Try yourself","title":"Variable Importance","text":"Plot green univariate cloglog response curve bio17 removing rug using default_model, see solution highlight following cell: case SDMmodelCV() response curve shows averaged value prediction together one Standard Deviation error interval. use cross validation model trained previous article:","code":"plotResponse(default_model,               var = \"bio17\",               type = \"cloglog\",               only_presence = TRUE,               marginal = FALSE,               color = \"green\") plotResponse(cv_model,               var = \"bio1\",               type = \"cloglog\",               only_presence = TRUE,               marginal = TRUE,               fun = mean,               rug = TRUE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-importance.html","id":"model-report","dir":"Articles","previous_headings":"","what":"Model report","title":"Variable Importance","text":"learned till now con saved summarized calling function modelReport(). function : save training, background testing locations separated csv files; train evaluate model; create report html format ROC curve, threshold values, response curves, predicted map Jackknife test; save predicted distribution map; save curves plot folder; save model .Rds extension can loaded R using readRDS function. function totally inspired default output MaxEnt Java software [@Phillips2006] extends methods. can decide include report using dedicated function arguments, like response_curves, jk env function used SDMmodelCV() objects. Run following code create report Maxnet model trained : output displayed browser files saved virtual-sp folder.","code":"modelReport(maxnet_model,              type = \"cloglog\",              folder = \"virtual-sp\",              test = test,              response_curves = TRUE,              only_presence = TRUE,              jk = TRUE,              env = predictors)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-importance.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Variable Importance","text":"article learned: get plot variable importance Maxent models; compute plot permutation importance; perform leave one Jackknife test; plot marginal univariate response curve; create model report. next article learn perform data-driven variable selection.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-selection.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Data-driven variable selection","text":"previous articles learned core functions SDMtune training, evaluating display output model. article learn perform data-driven variable selection.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-selection.html","id":"explore-variable-correlation","dir":"Articles","previous_headings":"","what":"Explore variable correlation","title":"Data-driven variable selection","text":"extract 10000 background locations using function randomPoints included dismo package (set seed reproducible results). create SWD() object using prepareSWD() function: environmental variables downloaded coarse resolution function can extract bit less 10000 random locations (see warning message). function plotCor() can create heat map showing degree autocorrelation:  can select different correlation method set different correlation threshold. Another useful function corVar() instead creating heat map prints pairs correlated variables according given method correlation threshold: can see variables correlation coefficient greater 0.7 absolute value.","code":"set.seed(25) bg <- terra::spatSample(predictors,                         size = 10000,                         method = \"random\",                         na.rm = TRUE,                         xy = TRUE,                         values = FALSE)  bg <- prepareSWD(species = \"Bgs\",                   a = bg,                   env = predictors,                   categorical = \"biome\") #> Warning: [spatSample] fewer cells returned than requested plotCor(bg,          method = \"spearman\",          cor_th = 0.7) corVar(bg,         method = \"spearman\",         cor_th = 0.7)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-selection.html","id":"remove-highly-correlated-variables","dir":"Articles","previous_headings":"","what":"Remove highly correlated variables","title":"Data-driven variable selection","text":"SDMtune implements algorithm removes highly correlated variables repeating following steps: ranks variables according permutation importance percent contribution (second method available Maxent models). checks variable ranked important highly correlated variables, according given method correlation threshold. algorithm finds correlated variables moves next step, otherwise checks variables rank; performs leave one Jackknife test among correlated variables; remove variable decreases less model performance removed, according given metric training dataset. process repeated remaining variables correlation coefficient lower provided correlation threshold. next example remove variables Spearman correlation coefficient |rs|≤0.7|r_s|\\leq0.7 checking AUC training dataset (use one permutation save time free increase value). use RStudio, function creates interactive real-time chart viewer pane. Run following code hover chart execution function get extra information: can see variables removed. output function model trained selected variables:","code":"selected_variables_model <- varSel(maxnet_model,                                     metric = \"auc\",                                     test = test,                                     bg4cor = bg,                                     method = \"spearman\",                                     cor_th = 0.7,                                     permut = 1) #> ✔ The variables bio16, bio6, bio7, and bio8 have been removed selected_variables_model #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters #> • fc: \"lqph\" #> • reg: 1 #>  #> ── Info #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables #> • Continuous: \"bio1\", \"bio12\", \"bio17\", and \"bio5\" #> • Categorical: \"biome\""},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-selection.html","id":"try-yourself","dir":"Articles","previous_headings":"Remove highly correlated variables","what":"Try yourself","title":"Data-driven variable selection","text":"Remove highly correlated variables using default_model, ranking variables percent contribution using AICc evaluation metric. Check help function varSel() highlight next cell see solution:","code":"# You need to pass the env argument for the AICc and the use_pc argument to use the percent contribution selected_variables_model <- varSel(default_model,                                     metric = \"aicc\",                                     bg4cor = bg,                                     method = \"spearman\",                                     cor_th = 0.7,                                     env = predictors,                                     use_pc = TRUE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-selection.html","id":"remove-variables-with-low-importance","dir":"Articles","previous_headings":"","what":"Remove variables with low importance","title":"Data-driven variable selection","text":"cases model environmental variables ranked low contribution may want remove reduce model complexity. SDMtune offers two different strategies implemented function reduceVar(). use maxnet_model trained variables. Let’s first check permutation importance (use one permutation save time): use function reduceVar() demonstration purpose. first example want remove environmental variables permutation importance lower 6%, matter model performance decreases. function removes last ranked environmental variable, trains new model computes new rank. process repeated remaining environmental variables importance greater 6%: second example want remove environmental variables permutation importance lower 15% removing variables model performance decrease, according given metric. case function performs leave one Jackknife test remove environmental variables step-wise fashion described previous example, model performance doesn’t drop: can see case several variables removed AUC testing dataset didn’t decrease.","code":"varImp(maxnet_model,         permut = 1) cat(\"Testing AUC before: \", auc(maxnet_model, test = test)) #> Testing AUC before:  0.8505888  reduced_variables_model <- reduceVar(maxnet_model,                                       th = 6,                                       metric = \"auc\",                                       test = test,                                       permut = 1) #> ✔ The variables bio16, bio6, bio7, bio5, bio17, and biome have been removed  cat(\"Testing AUC after: \", auc(reduced_variables_model, test = test)) #> Testing AUC after:  0.8520787 cat(\"Testing AUC before: \", auc(maxnet_model, test = test)) #> Testing AUC before:  0.8505888  reduced_variables_model <- reduceVar(maxnet_model,                                       th = 15,                                       metric = \"auc\",                                       test = test,                                       permut = 1,                                       use_jk = TRUE) #> ✔ The variables bio16, bio6, bio5, bio12, biome, and bio8 have been removed  cat(\"Testing AUC after: \", auc(reduced_variables_model, test = test)) #> Testing AUC after:  0.8533188"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-selection.html","id":"try-yourself-1","dir":"Articles","previous_headings":"Remove variables with low importance","what":"Try yourself","title":"Data-driven variable selection","text":"Reduce number variables using model trained cross validation using metric TSS. Highlight following cell solution:","code":"# You need to pass TRUE to the test argument selected_variables_model <- reduceVar(cv_model,                                        th = 6,                                        metric = \"tss\",                                        test = TRUE,                                        permut = 1)"},{"path":"https://consbiol-unibern.github.io/SDMtune/articles/variable-selection.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Data-driven variable selection","text":"article learned: explore correlation environmental variables; possible approach remove highly correlated environmental variables; two possible methods remove environmental variables low importance. next article learn tune model hyperparameters.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sergio Vignali. Author, maintainer. Arnaud Barras. Author. Veronika Braunisch. Author. Conservation Biology - University Bern. Funder.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vignali, S., Barras, . G., Arlettaz, R., Braunisch, V. (2022). SDMtune: R package tune evaluate species distribution models. Ecology Evolution, 10(20), 11488–11506. https://doi.org/10.1002/ece3.6786","code":"@Article{,   title = {SDMtune: An R package to tune and evaluate species distribution models},   author = {{Sergio Vignali} and {Arnaud G. Barras} and {Raphaël Arlettaz} and {Veronika Braunisch}},   journal = {Ecology and Evolution},   year = {2020},   volume = {10},   number = {20},   pages = {11488–11506},   doi = {10.1002/ece3.6786}, }"},{"path":"https://consbiol-unibern.github.io/SDMtune/index.html","id":"sdmtune-","dir":"","previous_headings":"","what":"Species Distribution Model Selection","title":"Species Distribution Model Selection","text":"SDMtune provides user-friendly framework enables training evaluation species distribution models (SDMs). package implements functions data driven variable selection model tuning includes numerous utilities display results. functions used select variables tune model hyperparameters interactive real-time chart displayed RStudio viewer pane execution. Visit package website learn use SDMtune starting first article Prepare data analysis.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Species Distribution Model Selection","text":"can install latest release version CRAN: development version GitHub:","code":"install.packages(\"SDMtune\") devtools::install_github(\"ConsBiol-unibern/SDMtune\")"},{"path":"https://consbiol-unibern.github.io/SDMtune/index.html","id":"hyperparameters-tuning--real-time-charts","dir":"","previous_headings":"","what":"Hyperparameters tuning & real-time charts","title":"Species Distribution Model Selection","text":"SDMtune implements three functions hyperparameters tuning: gridSearch: runs possible combinations predefined hyperparameters’ values; randomSearch: randomly selects fraction possible combinations predefined hyperparameters’ values; optimizeModel: uses genetic algorithm aims optimize given evaluation metric combining predefined hyperparameters’ values. amount hyperparameters’ combinations high, computation time necessary train defined models long. function optimizeModel offers valid alternative reduces computation time thanks implemented genetic algorithm. function seeks best combination hyperparameters reaching near optimal optimal solution reduced amount time compared gridSearch. following code shows example using simulated dataset. First model trained using Maxnet algorithm implemented maxnet package default hyperparameters’ values. model trained, gridSearch optimizeModel functions executed compare execution time model performance evaluated AUC metric. following code clear, please check articles website. execution “tuning” “variable selection” functions, real-time charts displaying training validation metrics displayed RStudio viewer pane (screencast previous executed optimizeModel function).","code":"library(SDMtune)  # Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\", full.names = TRUE) predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\", p = p_coords, a = bg_coords,                    env = predictors, categorical = \"biome\")  # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data, test = 0.2, only_presence = TRUE, seed = 25) train <- datasets[[1]] test <- datasets[[2]]  # Train a Maxnet model model <- train(method = \"Maxnet\", data = train)  # Define the hyperparameters to test h <- list(reg = seq(0.1, 3, 0.1), fc = c(\"lq\", \"lh\", \"lqp\", \"lqph\", \"lqpht\"))  # Test all the possible combinations with gridSearch gs <- gridSearch(model, hypers = h, metric = \"auc\", test = test) head(gs@results[order(-gs@results$test_AUC), ])  # Best combinations  # Use the genetic algorithm instead with optimizeModel om <- optimizeModel(model, hypers = h, metric = \"auc\", test = test, seed = 4) head(om@results)  # Best combinations"},{"path":"https://consbiol-unibern.github.io/SDMtune/index.html","id":"speed-test","dir":"","previous_headings":"","what":"Speed test","title":"Species Distribution Model Selection","text":"following example train Maxent model: compare execution time predict function SDMtune uses algorithm dismo (Hijmans et al. 2017) calls MaxEnt Java software (Phillips, Anderson, Schapire 2006). first convert object sdmtune_model object accepted dismo: Next function used test results equal, tolerance 1e-7: Now test execution time using microbenckmark package: plot output:","code":"# Train a Maxent model sdmtune_model <- train(method = \"Maxent\", data = data) maxent_model <- SDMmodel2MaxEnt(sdmtune_model) my_check <- function(values) {   return(all.equal(values[[1]], values[[2]], tolerance = 1e-7)) } bench <- microbenchmark::microbenchmark(   SDMtune = predict(sdmtune_model, data = data, type = \"cloglog\"),   dismo = predict(maxent_model, data@data),   check = my_check ) library(ggplot2) ggplot(bench, aes(x = expr, y = time/1000000, fill = expr)) +   geom_boxplot() +   labs(fill = \"\", x = \"Package\", y = \"time (milliseconds)\") +   theme_minimal()"},{"path":"https://consbiol-unibern.github.io/SDMtune/index.html","id":"set-working-environment","dir":"","previous_headings":"","what":"Set working environment","title":"Species Distribution Model Selection","text":"train Maxent model using Java implementation need : Java JDK software installed package rJava installed can check version MaxEnt used dismo following command: MaxEnt jar file used dismo located folder returned following command: case want upgrade newer version MaxEnt (available), download file maxent.jar replace file already present previous folder. function checkMaxentInstallation checks Java JDK rJava installed, file maxent.jar correct folder. everything correctly configured dismo, command dismo::maxent() return new MaxEnt version.","code":"dismo::maxent() system.file(package=\"dismo\") checkMaxentInstallation()"},{"path":"https://consbiol-unibern.github.io/SDMtune/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Species Distribution Model Selection","text":"Please note project follows Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/ANN-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Artificial Neural Network — ANN-class","title":"Artificial Neural Network — ANN-class","text":"Class represents Artificial Neural Network model object hosts information related model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/ANN-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Artificial Neural Network — ANN-class","text":"","code":"# S4 method for class 'ANN' show(object)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/ANN-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Artificial Neural Network — ANN-class","text":"object ANN object","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/ANN-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Artificial Neural Network — ANN-class","text":"See nnet meaning slots.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/ANN-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Artificial Neural Network — ANN-class","text":"size integer. Number units hidden layer. decay numeric. Weight decay. rang numeric. Initial random weights. maxit integer. Maximum number iterations. model nnet. nnet model object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/ANN-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Artificial Neural Network — ANN-class","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/BRT-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Boosted Regression Tree — BRT-class","title":"Boosted Regression Tree — BRT-class","text":"Class represents Boosted Regression Tree model objects hosts information related model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/BRT-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boosted Regression Tree — BRT-class","text":"","code":"# S4 method for class 'BRT' show(object)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/BRT-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boosted Regression Tree — BRT-class","text":"object BRT object","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/BRT-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boosted Regression Tree — BRT-class","text":"See gbm meaning slots.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/BRT-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Boosted Regression Tree — BRT-class","text":"distribution character. Name used distribution. n.trees integer. Maximum number grown trees. interaction.depth integer. Maximum depth tree. shrinkage numeric. shrinkage parameter. bag.fraction numeric. Random fraction data used tree expansion. model gbm. Boosted Regression Tree model object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/BRT-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boosted Regression Tree — BRT-class","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/Maxent-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Maxent — Maxent-class","title":"Maxent — Maxent-class","text":"Class represents MaxEnt model objects hosts information related model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/Maxent-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maxent — Maxent-class","text":"","code":"# S4 method for class 'Maxent' show(object)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/Maxent-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maxent — Maxent-class","text":"object Maxent object","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/Maxent-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Maxent — Maxent-class","text":"results matrix. result usually MaxEnt provide csv file. reg numeric. value regularization multiplier used train model. fc character. feature class combination used train model. iter numeric. number iterations used train model. extra_args character. Extra arguments used run MaxEnt. lambdas vector. lambdas parameters model. coeff data.frame. lambda coefficients model. formula formula. formula used make prediction. lpn numeric. Linear Predictor Normalizer. dn numeric. Density Normalizer. entropy numeric. entropy value. min_max data.frame. minimum maximum values continuous variables, used clamping.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/Maxent-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maxent — Maxent-class","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/Maxnet-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Maxnet — Maxnet-class","title":"Maxnet — Maxnet-class","text":"Class represents Maxnet model objects hosts information related model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/Maxnet-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maxnet — Maxnet-class","text":"","code":"# S4 method for class 'Maxnet' show(object)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/Maxnet-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maxnet — Maxnet-class","text":"object Maxnet object","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/Maxnet-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Maxnet — Maxnet-class","text":"reg numeric. value regularization multiplier used train model. fc character. feature class combination used train model. model maxnet. maxnet model object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/Maxnet-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maxnet — Maxnet-class","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/RF-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Forest — RF-class","title":"Random Forest — RF-class","text":"Class represents Random Forest model objects hosts information related model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/RF-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Forest — RF-class","text":"","code":"# S4 method for class 'RF' show(object)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/RF-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Forest — RF-class","text":"object RF object","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/RF-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Forest — RF-class","text":"See randomForest meaning slots.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/RF-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Random Forest — RF-class","text":"mtry integer. Number variable randomly sampled. ntree integer. Number grown trees. nodesize integer. Minimum size terminal nodes. model randomForest. randomForest model object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/RF-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random Forest — RF-class","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SDMmodel — SDMmodel-class","title":"SDMmodel — SDMmodel-class","text":"Class represents SDMmodel object hosts information related model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodel-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SDMmodel — SDMmodel-class","text":"","code":"# S4 method for class 'SDMmodel' show(object)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodel-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SDMmodel — SDMmodel-class","text":"object SDMmodel object","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodel-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SDMmodel — SDMmodel-class","text":"data SWD object. data used train model. model object class ANN, BRT, RF, Maxent Maxnet.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodel-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SDMmodel — SDMmodel-class","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodel2MaxEnt.html","id":null,"dir":"Reference","previous_headings":"","what":"SDMmodel2MaxEnt — SDMmodel2MaxEnt","title":"SDMmodel2MaxEnt — SDMmodel2MaxEnt","text":"Converts SDMmodel object containing MaxEnt model dismo MaxEnt object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodel2MaxEnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SDMmodel2MaxEnt — SDMmodel2MaxEnt","text":"","code":"SDMmodel2MaxEnt(model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodel2MaxEnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SDMmodel2MaxEnt — SDMmodel2MaxEnt","text":"model SDMmodel object converted.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodel2MaxEnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SDMmodel2MaxEnt — SDMmodel2MaxEnt","text":"converted dismo MaxEnt object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodel2MaxEnt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SDMmodel2MaxEnt — SDMmodel2MaxEnt","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodel2MaxEnt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SDMmodel2MaxEnt — SDMmodel2MaxEnt","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [27ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [114ms] #>   # Train a Maxent model model <- train(method = \"Maxent\",                data = data,                fc = \"l\") #> Loading required namespace: rJava  dismo_model <- SDMmodel2MaxEnt(model) dismo_model #> class    : MaxEnt  #> variables: bio1 bio12 bio16 bio17 bio5 bio6 bio7 bio8 biome  #> output html file no longer exists"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodelCV-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SDMmodelCV — SDMmodelCV-class","title":"SDMmodelCV — SDMmodelCV-class","text":"Class represents SDMmodel model object replicates hosts models trained cross validation.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodelCV-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SDMmodelCV — SDMmodelCV-class","text":"","code":"# S4 method for class 'SDMmodelCV' show(object)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodelCV-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SDMmodelCV — SDMmodelCV-class","text":"object SDMmodelCV object","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodelCV-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SDMmodelCV — SDMmodelCV-class","text":"models list. list containing models trained cross validation. data SWD object. Full dataset used make partitions. folds list two matrices, first training second testing dataset. column one matrix represents fold TRUE locations included FALSE excluded partition.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMmodelCV-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SDMmodelCV — SDMmodelCV-class","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMtune-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SDMtune class — SDMtune-class","title":"SDMtune class — SDMtune-class","text":"Class used save results one following functions: gridSearch, randomSearch optimizeModel. Plot SDMtune object. Use interactive argument create interactive chart.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMtune-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SDMtune class — SDMtune-class","text":"","code":"# S4 method for class 'SDMtune' show(object)  # S4 method for class 'SDMtune,missing' plot(x, title = \"\", interactive = FALSE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMtune-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SDMtune class — SDMtune-class","text":"object SDMtune object x SDMtune object. title character. title plot. interactive logical, TRUE plot interactive chart.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMtune-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SDMtune class — SDMtune-class","text":"interactive = FALSE function returns ggplot object otherwise returns SDMtuneChart object contains path temporary folder necessary files create chart saved. cases objects returned invisible.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMtune-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SDMtune class — SDMtune-class","text":"results data.frame. Results evaluation models. models list. List SDMmodel SDMmodelCV objects.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMtune-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SDMtune class — SDMtune-class","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMtune-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SDMtune class — SDMtune-class","text":"","code":"# \\donttest{ # Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\", full.names = TRUE) predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\", p = p_coords, a = bg_coords,                    env = predictors, categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [21ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [48ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data, test = 0.2, only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\", data = train, fc = \"l\")  # Define the hyperparameters to test h <- list(reg = 1:5, fc = c(\"lqp\", \"lqph\"))  # Run the gridSearch function using as metric the AUC output <- gridSearch(model, hypers = h, metric = \"auc\", test = test) #> Grid Search  ■■■■■■                            18% | ETA: 18s - 00:00:04 #> Grid Search  ■■■■■■■■■■■■                      36% | ETA: 11s - 00:00:6.4 #> Grid Search  ■■■■■■■■■■■■■■■■■                 55% | ETA:  7s - 00:00:8.7 #> Grid Search  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■      91% | ETA:  1s - 00:00:12.5 #> Grid Search  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s - 00:00:12.6 #>  output #>  #> ── Object of class: <SDMtune> ── #>  #> Method: Maxnet #>  #> ── Tested hyperparameters  #> • fc: \"lqp\" and \"lqph\" #> • reg: 1, 2, 3, 4, and 5  # Plot the output plot(output, title = \"My experiment\")   # Plot the interactive chart p <- plot(output, title = \"My experiment\", interactive = TRUE) # Print the temporary folder that stores the files used to create the chart str(p) #>  'SDMtuneChart' chr \"/tmp/RtmpZYhaFo/SDMtune24ed29cfb8d4\" # }"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMtune-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SDMtune: Species Distribution Model Selection — SDMtune-package","title":"SDMtune: Species Distribution Model Selection — SDMtune-package","text":"User-friendly framework enables training evaluation species distribution models (SDMs). package implements functions data driven variable selection model tuning includes numerous utilities display results. functions used select variables tune model hyperparameters interactive real-time chart displayed 'RStudio' viewer pane execution.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SDMtune-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SDMtune: Species Distribution Model Selection — SDMtune-package","text":"Maintainer: Sergio Vignali sdmtune@gmail.com (ORCID) Authors: Arnaud Barras (ORCID) Veronika Braunisch (ORCID) contributors: Conservation Biology - University Bern [funder]","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SWD-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample With Data — SWD-class","title":"Sample With Data — SWD-class","text":"Object similar MaxEnt SWD format hosts species name, coordinates locations value environmental variables location places.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SWD-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample With Data — SWD-class","text":"","code":"# S4 method for class 'SWD' show(object)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SWD-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample With Data — SWD-class","text":"object SWD object","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SWD-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample With Data — SWD-class","text":"object can contains presence/absence, presence/background, presence absence/background data. Use prepareSWD function create object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SWD-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Sample With Data — SWD-class","text":"species character. Name species. coords data.frame. Coordinates locations. data data.frame. Value environmental variables location sites. pa numeric. Vector 1 presence 0 absence/background locations.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/SWD-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample With Data — SWD-class","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/addSamplesToBg.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Samples to Background — addSamplesToBg","title":"Add Samples to Background — addSamplesToBg","text":"function add presence locations background. equivalent Maxent argument addsamplestobackground=true.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/addSamplesToBg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Samples to Background — addSamplesToBg","text":"","code":"addSamplesToBg(x, all = FALSE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/addSamplesToBg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Samples to Background — addSamplesToBg","text":"x SWD object. logical. TRUE adds presence locations even already included background locations. equivalent Maxent argument addallsamplestobackground=true.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/addSamplesToBg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Samples to Background — addSamplesToBg","text":"object class SWD.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/addSamplesToBg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add Samples to Background — addSamplesToBg","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/addSamplesToBg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Samples to Background — addSamplesToBg","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>  data #>  #> ── Object of class: <SWD> ── #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\"  # Add presence locations with values not included in the backgrounds to the # background locations new_data <- addSamplesToBg(data) new_data #>  #> ── Object of class: <SWD> ── #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 5207 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\"  # Add all the presence locations to the background locations, even if they # have values already included in the backgrounds new_data <- addSamplesToBg(data,                            all = TRUE) new_data #>  #> ── Object of class: <SWD> ── #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 5400 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/aicc.html","id":null,"dir":"Reference","previous_headings":"","what":"AICc — aicc","title":"AICc — aicc","text":"Compute Akaike Information Criterion corrected small samples size (Warren Seifert, 2011).","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/aicc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AICc — aicc","text":"","code":"aicc(model, env)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/aicc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AICc — aicc","text":"model SDMmodel object. env rast containing environmental variables.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/aicc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AICc — aicc","text":"computed AICc","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/aicc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AICc — aicc","text":"function available Maxent Maxnet methods.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/aicc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"AICc — aicc","text":"Warren D.L., Seifert S.N., (2011). Ecological niche modeling Maxent: importance model complexity performance model selection criteria. Ecological Applications, 21(2), 335–342.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/aicc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AICc — aicc","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/aicc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AICc — aicc","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                    full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>   # Train a model model <- train(method = \"Maxnet\",                data = data,                fc = \"l\")  # Compute the AICc aicc(model,      env = predictors) #> [1] 6731.672"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/auc.html","id":null,"dir":"Reference","previous_headings":"","what":"AUC — auc","title":"AUC — auc","text":"Compute AUC using Man-Whitney U Test formula.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/auc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AUC — auc","text":"","code":"auc(model, test = NULL)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/auc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AUC — auc","text":"model SDMmodel SDMmodelCV object. test SWD object model SDMmodel object; logical SWD object model SDMmodelCV object. provided computes training AUC, see details.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/auc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AUC — auc","text":"value AUC.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/auc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AUC — auc","text":"SDMmodelCV objects, function computes mean training AUC values k-folds. test = TRUE computes mean testing AUC values k-folds. test SWD object, computes mean AUC values provided testing dataset.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/auc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"AUC — auc","text":"Mason, S. J. Graham, N. E. (2002), Areas beneath relative operating characteristics (ROC) relative operating levels (ROL) curves: Statistical significance interpretation. Q.J.R. Meteorol. Soc., 128: 2145-2166.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/auc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AUC — auc","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/auc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AUC — auc","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [48ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"l\")  # Compute the training AUC auc(model) #> [1] 0.8387422  # Compute the testing AUC auc(model,     test = test) #> [1] 0.843245 # \\donttest{ # Same example but using cross validation instead of training and testing # datasets folds <- randomFolds(data,                      k = 4,                      only_presence = TRUE)  model <- train(method = \"Maxnet\",                data = data,                fc = \"l\",                folds = folds)  # Compute the training AUC auc(model) #> [1] 0.8415392  # Compute the testing AUC auc(model,     test = TRUE) #> [1] 0.8340127  # Compute the AUC for the held apart testing dataset auc(model,     test = test)# } #> [1] 0.8458806"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/checkMaxentInstallation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Maxent Installation — checkMaxentInstallation","title":"Check Maxent Installation — checkMaxentInstallation","text":"function checks Maxent correctly installed.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/checkMaxentInstallation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Maxent Installation — checkMaxentInstallation","text":"","code":"checkMaxentInstallation(verbose = TRUE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/checkMaxentInstallation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Maxent Installation — checkMaxentInstallation","text":"verbose logical, TRUE function provides useful messages understand correctly installed.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/checkMaxentInstallation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Maxent Installation — checkMaxentInstallation","text":"TRUE Maxent correctly installed, FALSE otherwise.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/checkMaxentInstallation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Maxent Installation — checkMaxentInstallation","text":"order Maxent correctly configured necessary : Java installed; package \"rJava\" installed; file \"maxent.jar\" correct folder.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/checkMaxentInstallation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check Maxent Installation — checkMaxentInstallation","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/checkMaxentInstallation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Maxent Installation — checkMaxentInstallation","text":"","code":"checkMaxentInstallation() #> ✔ Java is installed. #> ✔ The packege rJava is installed. #> ✔ The file maxent.jar is present in the correct folder. #> [1] TRUE"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/combineCV.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Cross Validation models — combineCV","title":"Combine Cross Validation models — combineCV","text":"function combines cross-validation models retraining new model presence absence/background locations hyperparameters.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/combineCV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Cross Validation models — combineCV","text":"","code":"combineCV(model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/combineCV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Cross Validation models — combineCV","text":"model SDMmodelCV object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/combineCV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Cross Validation models — combineCV","text":"SDMmodel object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/combineCV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine Cross Validation models — combineCV","text":"utility function retrain model data , example, hyperparameters tuning (gridSearch, randomSearch optimizeModel) avoid manual setting hyperparameters train function.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/combineCV.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine Cross Validation models — combineCV","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/combineCV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Cross Validation models — combineCV","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Create 4 random folds splitting only the presence data folds <- randomFolds(data,                      k = 4,                      only_presence = TRUE)  model <- train(method = \"Maxnet\",                data = data,                folds = folds) #> Cross Validation  ■■■■■■■■■                         25% | ETA:  5s - 00:00:1.6 #> Cross Validation  ■■■■■■■■■■■■■■■■■■■■■■■           75% | ETA:  1s - 00:00:4.3 #> Cross Validation  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s - 00:00:5.6 #>   # Define the hyperparameters to test h <- list(reg = 1:2,           fc = c(\"lqp\", \"lqph\"))  # Run the function using the AUC as metric output <- gridSearch(model,                      hypers = h,                      metric = \"auc\") #> Grid Search  ■■■■■■■                           20% | ETA:  8s - 00:00:02 #> Grid Search  ■■■■■■■■■■■■■                     40% | ETA: 13s - 00:00:8.8 #> Grid Search  ■■■■■■■■■■■■■■■■■■■               60% | ETA:  7s - 00:00:10.3 #> Grid Search  ■■■■■■■■■■■■■■■■■■■■■■■■■         80% | ETA:  4s - 00:00:16 #> Grid Search  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s - 00:00:16 #>  output@results #>     fc reg train_AUC  test_AUC   diff_AUC #> 1  lqp   1 0.8644779 0.8527638 0.01171417 #> 2 lqph   1 0.8729872 0.8542633 0.01872400 #> 3  lqp   2 0.8613124 0.8503793 0.01093317 #> 4 lqph   2 0.8670053 0.8504928 0.01651250 output@models #> [[1]] #>  #> ── Object of class: <SDMmodelCV> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqp\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Replicates: 4 #> • Total presence locations: 400 #> • Total absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[2]] #>  #> ── Object of class: <SDMmodelCV> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqph\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Replicates: 4 #> • Total presence locations: 400 #> • Total absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[3]] #>  #> ── Object of class: <SDMmodelCV> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqp\" #> • reg: 2 #>  #> ── Info  #> • Species: Virtual species #> • Replicates: 4 #> • Total presence locations: 400 #> • Total absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[4]] #>  #> ── Object of class: <SDMmodelCV> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqph\" #> • reg: 2 #>  #> ── Info  #> • Species: Virtual species #> • Replicates: 4 #> • Total presence locations: 400 #> • Total absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>   # Order results by highest test AUC output@results[order(-output@results$test_AUC), ] #>     fc reg train_AUC  test_AUC   diff_AUC #> 2 lqph   1 0.8729872 0.8542633 0.01872400 #> 1  lqp   1 0.8644779 0.8527638 0.01171417 #> 4 lqph   2 0.8670053 0.8504928 0.01651250 #> 3  lqp   2 0.8613124 0.8503793 0.01093317  # Combine cross validation models for output with highest test AUC idx <- which.max(output@results$test_AUC) combined_model <- combineCV(output@models[[idx]]) combined_model #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqph\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/confMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Confusion Matrix — confMatrix","title":"Confusion Matrix — confMatrix","text":"Computes Confusion Matrixes threshold values varying 0 1.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/confMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confusion Matrix — confMatrix","text":"","code":"confMatrix(model, test = NULL, th = NULL, type = NULL)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/confMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confusion Matrix — confMatrix","text":"model SDMmodel object. test SWD testing locations, provided uses training dataset. th numeric vector. provided computes evaluation given thresholds. Default NULL computes evaluation unique predicted values presence absence/background locations. type character. output type used \"Maxent\" \"Maxnet\" methods, possible values \"cloglog\" \"logistic\".","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/confMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confusion Matrix — confMatrix","text":"Confusion Matrix used thresholds.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/confMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confusion Matrix — confMatrix","text":"models trained Maxent method argument type can : \"raw\", \"logistic\" \"cloglog\". models trained Maxnet method argument type can : \"link\", \"exponential\", \"logistic\" \"cloglog\", see maxnet details.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/confMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confusion Matrix — confMatrix","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/confMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confusion Matrix — confMatrix","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [48ms] #>   # Train a model model <- train(method = \"Maxnet\",                data = data,                fc = \"l\")  # Get the confusion matrix for thresholds ranging from 0 to 1 cm <- confMatrix(model,                  type = \"cloglog\") head(cm) #>            th  tp   fp fn tn #> 1 0.000000000 400 5000  0  0 #> 2 0.002786585 400 5000  0  0 #> 3 0.003520421 400 4999  0  1 #> 4 0.003616260 400 4998  0  2 #> 5 0.003668746 400 4997  0  3 #> 6 0.003691408 400 4996  0  4 tail(cm) #>             th tp fp  fn   tn #> 5204 0.9933962  0  5 400 4995 #> 5205 0.9940262  0  4 400 4996 #> 5206 0.9960225  0  3 400 4997 #> 5207 0.9965570  0  2 400 4998 #> 5208 0.9970066  0  1 400 4999 #> 5209 1.0000000  0  0 400 5000  # Get the confusion matrix for a specific threshold confMatrix(model,            type = \"logistic\",            th = 0.6) #>    th  tp  fp  fn   tn #> 1 0.6 126 410 274 4590"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/corVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Correlated Variables — corVar","title":"Print Correlated Variables — corVar","text":"Utility prints name correlated variables relative correlation coefficient value.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/corVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Correlated Variables — corVar","text":"","code":"corVar(   bg,   method = \"spearman\",   cor_th = NULL,   order = TRUE,   remove_diagonal = TRUE )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/corVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Correlated Variables — corVar","text":"bg SWD object locations used compute correlation environmental variables. method character. method used compute correlation matrix. cor_th numeric. provided prints variables whose correlation coefficient higher lower given threshold. order logical. TRUE variable ordered less highly correlated. remove_diagonal logical. TRUE values diagonal removed.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/corVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Correlated Variables — corVar","text":"data.frame variables correlation.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/corVar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Correlated Variables — corVar","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/corVar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Correlated Variables — corVar","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare background locations bg_coords <- terra::spatSample(predictors,                                size = 10000,                                method = \"random\",                                na.rm = TRUE,                                xy = TRUE,                                values = FALSE) #> Warning: [spatSample] fewer cells returned than requested  # Create SWD object bg <- prepareSWD(species = \"Virtual species\",                  a = bg_coords,                  env = predictors,                  categorical = \"biome\") #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [72ms] #>   # Get the correlation among all the environmental variables corVar(bg,        method = \"spearman\") #>     Var1  Var2       value #> 1   bio1  bio6  0.95135409 #> 2  bio12 bio16  0.94475589 #> 3   bio6  bio7 -0.87344980 #> 4   bio1  bio8  0.84596493 #> 5  bio16  bio6  0.74712692 #> 6   bio6  bio8  0.72867234 #> 7   bio1  bio7 -0.71191347 #> 8  bio16  bio7 -0.70275684 #> 9   bio1 bio16  0.70235845 #> 10 bio12 bio17  0.69149337 #> 11 bio12  bio6  0.68648556 #> 12 bio12  bio7 -0.67400573 #> 13  bio5  bio8  0.64898352 #> 14  bio1 bio12  0.62722952 #> 15  bio1  bio5  0.53417673 #> 16 bio16 bio17  0.46633132 #> 17 bio16  bio8  0.45811313 #> 18  bio7  bio8 -0.44179392 #> 19 bio12  bio8  0.38856291 #> 20 bio17  bio7 -0.34811898 #> 21  bio5  bio6  0.30086090 #> 22 bio17  bio6  0.26811250 #> 23  bio1 bio17  0.18529719 #> 24 bio16  bio5  0.15713642 #> 25 bio17  bio5 -0.13452379 #> 26  bio5  bio7  0.10995326 #> 27 bio12  bio5  0.09855589 #> 28 bio17  bio8  0.09219238  # Get the environmental variables that have a correlation greater or equal to # the given threshold corVar(bg,        method = \"pearson\",        cor_th = 0.8) #>    Var1  Var2      value #> 1 bio12 bio16  0.9314559 #> 2  bio1  bio6  0.9247660 #> 3  bio6  bio7 -0.8576052 #> 4  bio1  bio8  0.8552133"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/doJk.html","id":null,"dir":"Reference","previous_headings":"","what":"Jackknife Test — doJk","title":"Jackknife Test — doJk","text":"Run Jackknife test variable importance removing one variable time.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/doJk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jackknife Test — doJk","text":"","code":"doJk(   model,   metric,   variables = NULL,   test = NULL,   with_only = TRUE,   env = NULL,   return_models = FALSE,   progress = TRUE )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/doJk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jackknife Test — doJk","text":"model SDMmodel SDMmodelCV object. metric character. metric used evaluate models, possible values : \"auc\", \"tss\" \"aicc\". variables vector. Variables used test, provided takes variables used train model. test SWD. provided reports result also testing dataset. used aicc SDMmodelCV. with_only logical. TRUE runs test also variable isolation. env rast containing environmental variables, used \"aicc\". return_models logical. TRUE returns models together test result. progress logical TRUE shows progress bar.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/doJk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jackknife Test — doJk","text":"data frame test results. return_model = TRUE returns list containing test results together models.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/doJk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Jackknife Test — doJk","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/doJk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jackknife Test — doJk","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"lq\")  # Execute the Jackknife test only for the environmental variables \"bio1\" and # \"bio12\", using the metric AUC doJk(model,      metric = \"auc\",     variables = c(\"bio1\", \"bio12\"),     test = test) #>   Variable Train_AUC_without Train_AUC_withonly Test_AUC_without #> 1     bio1         0.8605459          0.8427728        0.8348900 #> 2    bio12         0.8628366          0.7484241        0.8367775 #>   Test_AUC_withonly #> 1         0.8270363 #> 2         0.7095675  # The same without testing dataset doJk(model,      metric = \"auc\",      variables = c(\"bio1\", \"bio12\")) #>   Variable Train_AUC_without Train_AUC_withonly #> 1     bio1         0.8605459          0.8427728 #> 2    bio12         0.8628366          0.7484241  # Execute the Jackknife test only for the environmental variables \"bio1\" and # \"bio12\", using the metric TSS but without running the test for one single # variable doJk(model,      metric = \"tss\",      variables = c(\"bio1\", \"bio12\"),      test = test,      with_only = FALSE) #>   Variable Train_TSS_without Test_TSS_without #> 1     bio1          0.628325           0.6206 #> 2    bio12          0.633950           0.6240  # Execute the Jackknife test only for the environmental variables \"bio1\" and # \"bio12\", using the metric AICc but without running the test for one single # variable doJk(model,      metric = \"aicc\",      variables = c(\"bio1\", \"bio12\"),      with_only = FALSE,      env = predictors) #>   Variable AICc_without #> 1     bio1     5268.356 #> 2    bio12     5267.217  # Execute the Jackknife test for all the environmental variables using the # metric AUC and returning all the trained models jk <- doJk(model,            metric = \"auc\",            test = test,            return_models = TRUE) #> Jk Test  ■■■■■■■■■                         28% | ETA:  3s - 00:00:1.1 #> Jk Test  ■■■■■■■■■■■■■                     39% | ETA:  2s - 00:00:1.5 #> Jk Test  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s - 00:00:3.7 #>   jk$results #>   Variable Train_AUC_without Train_AUC_withonly Test_AUC_without #> 1     bio1         0.8605459          0.8427728        0.8348900 #> 2    bio12         0.8628366          0.7484241        0.8367775 #> 3    bio16         0.8633309          0.7604431        0.8364225 #> 4    bio17         0.8634928          0.6049622        0.8360250 #> 5     bio5         0.8627328          0.7281881        0.8369975 #> 6     bio6         0.8635784          0.8279953        0.8365125 #> 7     bio7         0.8635141          0.7356097        0.8370350 #> 8     bio8         0.8559647          0.8287769        0.8294275 #> 9    biome         0.8595491          0.7923491        0.8408100 #>   Test_AUC_withonly #> 1         0.8270363 #> 2         0.7095675 #> 3         0.7118025 #> 4         0.5964213 #> 5         0.7127687 #> 6         0.7958225 #> 7         0.6984638 #> 8         0.8274950 #> 9         0.7665000 jk$models_without #> [[1]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and \"bio8\" #> • Categorical: \"biome\" #>  #> [[2]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and \"bio8\" #> • Categorical: \"biome\" #>  #> [[3]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and \"bio8\" #> • Categorical: \"biome\" #>  #> [[4]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio5\", \"bio6\", \"bio7\", and \"bio8\" #> • Categorical: \"biome\" #>  #> [[5]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio6\", \"bio7\", and \"bio8\" #> • Categorical: \"biome\" #>  #> [[6]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio7\", and \"bio8\" #> • Categorical: \"biome\" #>  #> [[7]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", and \"bio8\" #> • Categorical: \"biome\" #>  #> [[8]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", and \"bio7\" #> • Categorical: \"biome\" #>  #> [[9]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: NA #>  jk$models_withonly #> [[1]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\" #> • Categorical: NA #>  #> [[2]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio12\" #> • Categorical: NA #>  #> [[3]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio16\" #> • Categorical: NA #>  #> [[4]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio17\" #> • Categorical: NA #>  #> [[5]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio5\" #> • Categorical: NA #>  #> [[6]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio6\" #> • Categorical: NA #>  #> [[7]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio7\" #> • Categorical: NA #>  #> [[8]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio8\" #> • Categorical: NA #>  #> [[9]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lq\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: NA #> • Categorical: \"biome\" #>"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/getTunableArgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Tunable Arguments — getTunableArgs","title":"Get Tunable Arguments — getTunableArgs","text":"Returns name function arguments can tuned given model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/getTunableArgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Tunable Arguments — getTunableArgs","text":"","code":"getTunableArgs(model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/getTunableArgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Tunable Arguments — getTunableArgs","text":"model SDMmodel SDMmodelCV object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/getTunableArgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Tunable Arguments — getTunableArgs","text":"character vector.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/getTunableArgs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Tunable Arguments — getTunableArgs","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/getTunableArgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Tunable Arguments — getTunableArgs","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Train a Maxnet model and get tunable hyperparameters model <- train(method = \"Maxnet\",                data = data,                fc = \"l\")  getTunableArgs(model) #> [1] \"fc\"  \"reg\""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/gridSearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid Search — gridSearch","title":"Grid Search — gridSearch","text":"Given set possible hyperparameter values, function trains models possible combinations hyperparameters.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/gridSearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grid Search — gridSearch","text":"","code":"gridSearch(   model,   hypers,   metric,   test = NULL,   env = NULL,   save_models = TRUE,   interactive = TRUE,   progress = TRUE )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/gridSearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grid Search — gridSearch","text":"model SDMmodel SDMmodelCV object. hypers named list containing values hyperparameters tuned, see details. metric character. metric used evaluate models, possible values : \"auc\", \"tss\" \"aicc\". test SWD object. Testing dataset used evaluate model, used aicc SDMmodelCV objects. env rast containing environmental variables, used \"aicc\". save_models logical. FALSE models saved output contains data frame metric values hyperparameter combination. Set FALSE many combinations avoid R crashing memory overload. interactive logical. FALSE interactive chart created. progress logical. TRUE shows progress bar.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/gridSearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid Search — gridSearch","text":"SDMtune object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/gridSearch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Grid Search — gridSearch","text":"know hyperparameters can tuned can use output function getTunableArgs. Hyperparameters included hypers argument take value passed model. interactive chart showing real-time steps performed algorithm displayed Viewer pane.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/gridSearch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Grid Search — gridSearch","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/gridSearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid Search — gridSearch","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [21ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"l\")  # Define the hyperparameters to test h <- list(reg = 1:2,           fc = c(\"lqp\", \"lqph\"))  # Run the function using the AUC as metric output <- gridSearch(model,                      hypers = h,                      metric = \"auc\",                      test = test) #> Grid Search  ■■■■■■■■■■■■■                     40% | ETA:  4s - 00:00:2.5 #> Grid Search  ■■■■■■■■■■■■■■■■■■■■■■■■■         80% | ETA:  1s - 00:00:4.8 #> Grid Search  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s - 00:00:4.8 #>  output@results #>     fc reg train_AUC  test_AUC   diff_AUC #> 1  lqp   1 0.8648872 0.8471450 0.01774219 #> 2 lqph   1 0.8747291 0.8450225 0.02970656 #> 3  lqp   2 0.8611684 0.8448300 0.01633844 #> 4 lqph   2 0.8683447 0.8411400 0.02720469 output@models #> [[1]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqp\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[2]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqph\" #> • reg: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[3]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqp\" #> • reg: 2 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[4]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqph\" #> • reg: 2 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>   # Order results by highest test AUC output@results[order(-output@results$test_AUC), ] #>     fc reg train_AUC  test_AUC   diff_AUC #> 1  lqp   1 0.8648872 0.8471450 0.01774219 #> 2 lqph   1 0.8747291 0.8450225 0.02970656 #> 3  lqp   2 0.8611684 0.8448300 0.01633844 #> 4 lqph   2 0.8683447 0.8411400 0.02720469  # Run the function using the AICc as metric and without saving the trained # models, helpful when numerous hyperparameters are tested to avoid memory # problems output <- gridSearch(model,                      hypers = h,                      metric = \"aicc\",                      env = predictors,                      save_models = FALSE) #> Grid Search  ■■■■■■■■■■■■■■■■■■■               60% | ETA:  2s - 00:00:2.7 #> Grid Search  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s - 00:00:4.3 #>  output@results #>     fc reg     AICc delta_AICc #> 1  lqp   1 5267.125   4.856503 #> 2 lqph   1 5275.776  13.508058 #> 3  lqp   2 5285.205  22.936465 #> 4 lqph   2 5262.268   0.000000"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentTh.html","id":null,"dir":"Reference","previous_headings":"","what":"MaxEnt Thresholds — maxentTh","title":"MaxEnt Thresholds — maxentTh","text":"Returns value thresholds generated MaxEnt software.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentTh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MaxEnt Thresholds — maxentTh","text":"","code":"maxentTh(model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentTh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MaxEnt Thresholds — maxentTh","text":"model SDMmodel object trained using \"Maxent\" method.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentTh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MaxEnt Thresholds — maxentTh","text":"data.frame thresholds.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentTh.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MaxEnt Thresholds — maxentTh","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentTh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MaxEnt Thresholds — maxentTh","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>   # Train a Maxent model model <- train(method = \"Maxent\",                data = data,                fc = \"l\")  maxentTh(model) #>                                                                       threshold #> Fixed.cumulative.value.1.Cloglog                                         0.0320 #> Fixed.cumulative.value.5.Cloglog                                         0.1013 #> Fixed.cumulative.value.10.Cloglog                                        0.2317 #> Minimum.training.presence.Cloglog                                        0.1068 #> X10.percentile.training.presence.Cloglog                                 0.3373 #> Equal.training.sensitivity.and.specificity.Cloglog                       0.4937 #> Maximum.training.sensitivity.plus.specificity.Cloglog                    0.2880 #> Balance.training.omission..predicted.area.and.value.Cloglog              0.1068 #> Balance.training.omission..predicted.area.and.value.area                 0.5096 #> Balance.training.omission..predicted.area.and.value.training.omission    0.0000 #> Equate.entropy.ofed.and.original.distributions.Cloglog                   0.1412 #> Equate.entropy.ofed.and.original.distributions.area                      0.4506 #> Equate.entropy.ofed.and.original.distributions.training.omission         0.0200"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentVarImp.html","id":null,"dir":"Reference","previous_headings":"","what":"Maxent Variable Importance — maxentVarImp","title":"Maxent Variable Importance — maxentVarImp","text":"Shows percent contribution permutation importance environmental variables used train model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentVarImp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maxent Variable Importance — maxentVarImp","text":"","code":"maxentVarImp(model)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentVarImp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maxent Variable Importance — maxentVarImp","text":"model SDMmodel SDMmodelCV object trained using \"Maxent\" method.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentVarImp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maxent Variable Importance — maxentVarImp","text":"data frame variable importance.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentVarImp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maxent Variable Importance — maxentVarImp","text":"SDMmodelCV object passed function, output average variable importance model trained cross validation.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentVarImp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maxent Variable Importance — maxentVarImp","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/maxentVarImp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maxent Variable Importance — maxentVarImp","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Train a Maxent model # The next line checks if Maxent is correctly configured but you don't need # to run it in your script model <- train(method = \"Maxent\",                data = data,                fc = \"l\")  maxentVarImp(model) #>   Variable Percent_contribution Permutation_importance #> 1     bio1              48.4267                 0.0000 #> 2    biome              36.7933                 7.0174 #> 3     bio8               7.3643                21.7752 #> 4     bio6               2.6993                56.4936 #> 5     bio7               2.5507                 0.0000 #> 6    bio16               1.2838                 0.0000 #> 7    bio17               0.5727                 0.0000 #> 8    bio12               0.2764                14.2192 #> 9     bio5               0.0328                 0.4946"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/mergeSWD.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge SWD Objects — mergeSWD","title":"Merge SWD Objects — mergeSWD","text":"Merge two SWD objects.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/mergeSWD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge SWD Objects — mergeSWD","text":"","code":"mergeSWD(swd1, swd2, only_presence = FALSE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/mergeSWD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge SWD Objects — mergeSWD","text":"swd1 SWD object. swd2 SWD object. only_presence logical TRUE presence locations merged absence/background locations taken swd1 object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/mergeSWD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge SWD Objects — mergeSWD","text":"merged SWD object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/mergeSWD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge SWD Objects — mergeSWD","text":"case two SWD objects different columns, common columns used merged object. SWD object created way presence locations always absence/background locations.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/mergeSWD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Merge SWD Objects — mergeSWD","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/mergeSWD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge SWD Objects — mergeSWD","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Split only presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Merge the training and the testing datasets together merged <- mergeSWD(train,                    test,                    only_presence = TRUE)  # Split presence and absence locations in training (80%) and testing (20%) datasets #> [[1]] #>  #> ── Object of class: <SWD> ── #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[2]] #>  #> ── Object of class: <SWD> ── #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 80 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  datasets <- trainValTest(data,                          test = 0.2) train <- datasets[[1]] test <- datasets[[2]]  # Merge the training and the testing datasets together merged <- mergeSWD(train, test)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/modelReport.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Report — modelReport","title":"Model Report — modelReport","text":"Make report shows main results.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/modelReport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Report — modelReport","text":"","code":"modelReport(   model,   folder,   test = NULL,   type = NULL,   response_curves = FALSE,   only_presence = FALSE,   jk = FALSE,   env = NULL,   clamp = TRUE,   permut = 10,   verbose = TRUE )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/modelReport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Report — modelReport","text":"model SDMmodel object. folder character. name folder save output. folder created working directory. test SWD object test locations. type character. output type used \"Maxent\" \"Maxnet\" methods, possible values \"cloglog\" \"logistic\". response_curves logical, TRUE plots response curves html output. only_presence logical, TRUE uses range presence location marginal response. jk logical, TRUE runs jackknife test. env rast. provided computes adds prediction map output. clamp logical clumping prediction, used response curves prediction map. permut integer. Number permutations. verbose logical, TRUE prints informative messages.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/modelReport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model Report — modelReport","text":"function produces report similar one created MaxEnt software. See terra documentation see pass factors.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/modelReport.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model Report — modelReport","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/modelReport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Report — modelReport","text":"","code":"# If you run the following examples with the function example(), # you may want to set the argument ask like following: example(\"modelReport\", # ask = FALSE) # Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"lq\")  # Create the report if (FALSE) { # \\dontrun{ modelReport(model,             type = \"cloglog\",             folder = \"my_folder\",             test = test,             response_curves = TRUE,             only_presence = TRUE,             jk = TRUE,             env = predictors,             permut = 2)} # }"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/optimizeModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize Model — optimizeModel","title":"Optimize Model — optimizeModel","text":"function uses Genetic Algorithm implementation optimize model hyperparameter configuration according chosen metric.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/optimizeModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize Model — optimizeModel","text":"","code":"optimizeModel(   model,   hypers,   metric,   test = NULL,   pop = 20,   gen = 5,   env = NULL,   keep_best = 0.4,   keep_random = 0.2,   mutation_chance = 0.4,   interactive = TRUE,   progress = TRUE,   seed = NULL )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/optimizeModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize Model — optimizeModel","text":"model SDMmodel SDMmodelCV object. hypers named list containing values hyperparameters tuned, see details. metric character. metric used evaluate models, possible values : \"auc\", \"tss\" \"aicc\". test SWD object. Testing dataset used evaluate model, used aicc SDMmodelCV objects. pop numeric. Size population. gen numeric. Number generations. env rast containing environmental variables, used \"aicc\". keep_best numeric. Percentage best models population retained iteration, expressed decimal number. keep_random numeric. Probability retaining excluded models iteration, expressed decimal number. mutation_chance numeric. Probability mutation child models, expressed decimal number. interactive logical. FALSE interactive chart created. progress logical. TRUE shows progress bar. seed numeric. value used set seed consistent results.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/optimizeModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize Model — optimizeModel","text":"SDMtune object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/optimizeModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimize Model — optimizeModel","text":"know hyperparameters can tuned can use output function getTunableArgs. Hyperparameters included hypers argument take value passed model. interactive chart showing real-time steps performed algorithm displayed Viewer pane. Part code inspired post.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/optimizeModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Optimize Model — optimizeModel","text":"Sergio Vignali","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotCor.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Correlation — plotCor","title":"Plot Correlation — plotCor","text":"Plot correlation matrix heat map value correlation coefficients according given method. cor_th passed prints coefficients higher lower given threshold.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotCor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Correlation — plotCor","text":"","code":"plotCor(bg, method = \"spearman\", cor_th = NULL, text_size = 3)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotCor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Correlation — plotCor","text":"bg SWD object used compute correlation matrix. method character. method used compute correlation matrix. cor_th numeric. provided prints coefficients higher lower given threshold. text_size numeric, used change size text.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotCor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Correlation — plotCor","text":"ggplot object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotCor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Correlation — plotCor","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotCor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Correlation — plotCor","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare background locations bg_coords <- terra::spatSample(predictors,                                size = 9000,                                method = \"random\",                                na.rm = TRUE,                                xy = TRUE,                                values = FALSE)  # Create SWD object bg <- prepareSWD(species = \"Virtual species\",                  a = bg_coords,                  env = predictors,                  categorical = \"biome\") #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [67ms] #>   # Plot heat map plotCor(bg,         method = \"spearman\")   # Plot heat map showing only values higher than given threshold and change # text size plotCor(bg,         method = \"spearman\",         cor_th = 0.8,         text_size = 4)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotJk.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Jackknife Test — plotJk","title":"Plot Jackknife Test — plotJk","text":"Plot Jackknife Test variable importance.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotJk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Jackknife Test — plotJk","text":"","code":"plotJk(jk, type = c(\"train\", \"test\"), ref = NULL)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotJk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Jackknife Test — plotJk","text":"jk data.frame output doJk function. type character, \"train\" \"test\" plot result test train testing dataset. ref numeric. value chosen metric model trained using variables. provided plots vertical line showing reference value.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotJk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Jackknife Test — plotJk","text":"ggplot object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotJk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Jackknife Test — plotJk","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotJk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Jackknife Test — plotJk","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"lq\")  # Execute the Jackknife test for all the environmental variables using the # metric AUC jk <- doJk(model,            metric = \"auc\",            test = test) #> Jk Test  ■■■■■■■■■■■■■■■■■■■■■■■           72% | ETA:  1s - 00:00:2.8 #> Jk Test  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s - 00:00:3.7 #>   # Plot Jackknife test result for training plotJk(jk,        type = \"train\",        ref = auc(model))   #' # Plot Jackknife test result for testing plotJk(jk,        type = \"test\",        ref = auc(model, test = test))"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPA.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Presence Absence Map — plotPA","title":"Plot Presence Absence Map — plotPA","text":"Plot presence absence map using given threshold.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Presence Absence Map — plotPA","text":"","code":"plotPA(   map,   th,   colors = NULL,   hr = FALSE,   filename = \"\",   overwrite = FALSE,   wopt = list(),   ... )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Presence Absence Map — plotPA","text":"map rast object prediction. th numeric. threshold used convert output presence/absence map. colors vector. Colors used, default NULL uses red blue. hr logical. TRUE produces output high resolution. filename character. provided raster map saved file. must include extension. overwrite logical. TRUE existing file overwritten. wopt list. Writing options passed writeRaster. ... Unused arguments.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Presence Absence Map — plotPA","text":"ggplot object.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Presence Absence Map — plotPA","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Presence Absence Map — plotPA","text":"","code":"map <- terra::rast(matrix(runif(400, 0, 1),                                     nrow = 20,                                     ncol = 20)) plotPA(map,        th = 0.8)   # Custom colors plotPA(map,        th = 0.5,        colors = c(\"#d8b365\", \"#018571\"))   if (FALSE) { # \\dontrun{ # Save the file. The following command will save the map in the working # directory. Note that `filename` must include the extension. plotPA(map,        th = 0.7,        filename = \"my_map.tif\")} # }"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPred.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Prediction — plotPred","title":"Plot Prediction — plotPred","text":"Plot Prediction output.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Prediction — plotPred","text":"","code":"plotPred(map, lt = \"\", colorramp = NULL, hr = FALSE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Prediction — plotPred","text":"map rast object prediction. lt character. Legend title. colorramp vector. custom colour ramp given vector colours (see example), default NULL uses blue/red colour ramp. hr logical. TRUE produces output high resolution.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Prediction — plotPred","text":"ggplot object.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPred.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Prediction — plotPred","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotPred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Prediction — plotPred","text":"","code":"map <- terra::rast(matrix(runif(400, 0, 1),                                     nrow = 20,                                     ncol= 20))  plotPred(map,          lt = \"Habitat suitability \\ncloglog\")   # Custom colors plotPred(map,          lt = \"Habitat suitability\",          colorramp = c(\"#2c7bb6\", \"#ffffbf\", \"#d7191c\"))"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC curve — plotROC","title":"Plot ROC curve — plotROC","text":"Plot ROC curve given model print AUC value.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC curve — plotROC","text":"","code":"plotROC(model, test = NULL)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC curve — plotROC","text":"model SDMmodel object. test SWD object. testing dataset.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ROC curve — plotROC","text":"ggplot object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotROC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot ROC curve — plotROC","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ROC curve — plotROC","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"l\")  # Plot the training ROC curve plotROC(model)   # Plot the training and testing  ROC curves plotROC(model,         test = test)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotResponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Response Curve — plotResponse","title":"Plot Response Curve — plotResponse","text":"Plot Response Curve given environmental variable.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotResponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Response Curve — plotResponse","text":"","code":"plotResponse(   model,   var,   type = NULL,   only_presence = FALSE,   marginal = FALSE,   fun = mean,   rug = FALSE,   color = \"red\" )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotResponse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Response Curve — plotResponse","text":"model SDMmodel SDMmodelCV object. var character. Name variable plotted. type character. output type used \"Maxent\" \"Maxnet\" methods, possible values \"cloglog\" \"logistic\". only_presence logical. TRUE uses presence locations applying function marginal response. marginal logical. TRUE plots marginal response curve. fun function used compute level variables marginal curves. rug logical. TRUE adds rug plot presence absence/background locations, available continuous variables. color color curve, default \"red\".","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotResponse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Response Curve — plotResponse","text":"ggplot object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotResponse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Response Curve — plotResponse","text":"Note fun character argument, must use mean \"mean\". want modify plot, first assign output function variable, two options: Modify ggplot object editing theme adding additional elements Get data ggplot2::ggplot_build() build plot (see examples)","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotResponse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Response Curve — plotResponse","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotResponse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Response Curve — plotResponse","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [21ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>   # Train a model model <- train(method = \"Maxnet\",                data = data,                fc = \"lq\")  # Plot cloglog response curve for a continuous environmental variable (bio1) plotResponse(model,              var = \"bio1\",              type = \"cloglog\")   # Plot marginal cloglog response curve for a continuous environmental # variable (bio1) plotResponse(model,              var = \"bio1\",              type = \"cloglog\",              marginal = TRUE)   # Plot logistic response curve for a continuous environmental variable # (bio12) adding the rugs and giving a custom color plotResponse(model,              var = \"bio12\",              type = \"logistic\",              rug = TRUE,              color = \"blue\")   # Plot response curve for a categorical environmental variable (biome) giving # a custom color plotResponse(model,              var = \"biome\",              type = \"logistic\",              color = \"green\")   # Modify plot # Change y axes limits my_plot <- plotResponse(model,                         var = \"bio1\",                         type = \"cloglog\") my_plot +   ggplot2::scale_y_continuous(limits = c(0, 1))   # Get the data and create your own plot: df <- ggplot2::ggplot_build(my_plot)$data[[1]] plot(df$x, df$y,      type = \"l\",      lwd = 3,      col = \"blue\",      xlab = \"bio1\",      ylab = \"cloglog output\")   # Train a model with cross validation folds <- randomFolds(data,                      k = 4,                      only_presence = TRUE)  model <- train(method = \"Maxnet\",                data = data,                fc = \"lq\",                folds = folds)  # Plot cloglog response curve for a continuous environmental variable (bio17) plotResponse(model,              var = \"bio1\",              type = \"cloglog\")   # Plot logistic response curve for a categorical environmental variable # (biome) giving a custom color plotResponse(model,              var = \"biome\",              type = \"logistic\",              color = \"green\")"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotVarImp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Variable Importance — plotVarImp","title":"Plot Variable Importance — plotVarImp","text":"Plot variable importance bar plot.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotVarImp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Variable Importance — plotVarImp","text":"","code":"plotVarImp(df, color = \"grey\")"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotVarImp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Variable Importance — plotVarImp","text":"df data.frame. data.frame containing name variables first column value variable importance second column. color character. colour bar plot.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotVarImp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Variable Importance — plotVarImp","text":"ggplot object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotVarImp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Variable Importance — plotVarImp","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/plotVarImp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Variable Importance — plotVarImp","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Train a model model <- train(method = \"Maxnet\",                data = data,                fc = \"l\")  # Compute variable importance vi <- varImp(model,              permut = 1)  # Plot variable importance plotVarImp(vi)   # Plot variable importance with custom color plotVarImp(vi,            color = \"red\")"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-ANN-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict ANN — predict,ANN-method","title":"Predict ANN — predict,ANN-method","text":"Predict output new dataset trained ANN model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-ANN-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict ANN — predict,ANN-method","text":"","code":"# S4 method for class 'ANN' predict(object, data, type, clamp)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-ANN-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict ANN — predict,ANN-method","text":"object ANN object. data data.frame data prediction. type used. clamp used.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-ANN-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict ANN — predict,ANN-method","text":"vector predicted values.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-ANN-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict ANN — predict,ANN-method","text":"Used predict,SDMmodel-method, exported.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-ANN-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict ANN — predict,ANN-method","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-BRT-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict BRT — predict,BRT-method","title":"Predict BRT — predict,BRT-method","text":"Predict output new dataset trained BRT model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-BRT-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict BRT — predict,BRT-method","text":"","code":"# S4 method for class 'BRT' predict(object, data, type, clamp)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-BRT-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict BRT — predict,BRT-method","text":"object BRT object. data data.frame data prediction. type used. clamp used.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-BRT-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict BRT — predict,BRT-method","text":"vector predicted values.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-BRT-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict BRT — predict,BRT-method","text":"Used predict,SDMmodel-method, exported. function uses number tree defined train model \"response\" type output.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-BRT-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict BRT — predict,BRT-method","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxent-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Maxent — predict,Maxent-method","title":"Predict Maxent — predict,Maxent-method","text":"Predict output new dataset trained Maxent model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxent-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Maxent — predict,Maxent-method","text":"","code":"# S4 method for class 'Maxent' predict(object, data, type = c(\"cloglog\", \"logistic\", \"raw\"), clamp = TRUE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxent-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Maxent — predict,Maxent-method","text":"object Maxent object. data data.frame data prediction. type character. MaxEnt output type, possible values \"cloglog\", \"logistic\" \"raw\". clamp logical clumping prediction.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxent-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Maxent — predict,Maxent-method","text":"vector prediction","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxent-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Maxent — predict,Maxent-method","text":"Used predict,SDMmodel-method, exported. function performs prediction R without calling MaxEnt Java software. results faster computation large datasets might result slightly different output compared Java software.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxent-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict Maxent — predict,Maxent-method","text":"Wilson P.D., (2009). Guidelines computing MaxEnt model output values lambdas file.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxent-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict Maxent — predict,Maxent-method","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxnet-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Maxnet — predict,Maxnet-method","title":"Predict Maxnet — predict,Maxnet-method","text":"Predict output new dataset trained Maxnet model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxnet-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Maxnet — predict,Maxnet-method","text":"","code":"# S4 method for class 'Maxnet' predict(   object,   data,   type = c(\"link\", \"exponential\", \"cloglog\", \"logistic\"),   clamp = TRUE )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxnet-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Maxnet — predict,Maxnet-method","text":"object Maxnet object. data data.frame data prediction. type character. Maxnet output type, possible values \"link\", \"exponential\", \"cloglog\" \"logistic\". clamp logical clumping prediction.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxnet-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Maxnet — predict,Maxnet-method","text":"vector predicted values.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxnet-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Maxnet — predict,Maxnet-method","text":"Used predict,SDMmodel-method, exported.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-Maxnet-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict Maxnet — predict,Maxnet-method","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-RF-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict RF — predict,RF-method","title":"Predict RF — predict,RF-method","text":"Predict output new dataset trained RF model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-RF-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict RF — predict,RF-method","text":"","code":"# S4 method for class 'RF' predict(object, data, type, clamp)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-RF-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict RF — predict,RF-method","text":"object RF object. data data.frame data prediction. type used. clamp used.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-RF-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict RF — predict,RF-method","text":"vector predicted probabilities class 1.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-RF-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict RF — predict,RF-method","text":"Used predict,SDMmodel-method, exported.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-RF-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict RF — predict,RF-method","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodel-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict — predict,SDMmodel-method","title":"Predict — predict,SDMmodel-method","text":"Predict output new dataset given trained SDMmodel model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodel-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict — predict,SDMmodel-method","text":"","code":"# S4 method for class 'SDMmodel' predict(   object,   data,   type = NULL,   clamp = TRUE,   filename = \"\",   overwrite = FALSE,   wopt = list(),   extent = NULL,   ... )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodel-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict — predict,SDMmodel-method","text":"object SDMmodel object. data data.frame, SWD rast data prediction. type character. Output type, see details, used Maxent Maxnet methods. clamp logical clumping prediction, used Maxent Maxnet methods. filename character. provided raster map saved file. must include extension. overwrite logical. TRUE existing file overwritten. wopt list. Writing options passed writeRaster. extent ext object, provided restricts prediction given extent. ... Additional arguments pass predict function.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodel-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict — predict,SDMmodel-method","text":"vector prediction rast object data raster rast.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodel-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict — predict,SDMmodel-method","text":"filename, extent arguments used prediction run rast object. models trained Maxent method argument type can : \"raw\", \"logistic\" \"cloglog\". function performs prediction R without calling MaxEnt Java software. results faster computation large datasets might result slightly different output compared Java software. models trained Maxnet method argument type can : \"link\", \"exponential\", \"logistic\" \"cloglog\", see maxnet details. models trained ANN method function uses \"raw\" output type. models trained RF method output probability class 1. models trained BRT method function uses number trees defined train model \"response\" output type.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodel-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict — predict,SDMmodel-method","text":"Wilson P.D., (2009). Guidelines computing MaxEnt model output values lambdas file.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodel-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict — predict,SDMmodel-method","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodel-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict — predict,SDMmodel-method","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"l\")  # Make cloglog prediction for the test dataset predict(model,         data = test,         type = \"cloglog\") #>    [1] 0.127839869 0.734709165 0.697267325 0.600505235 0.914788343 0.796468111 #>    [7] 0.225176028 0.809906027 0.823359613 0.602298707 0.834541438 0.625052618 #>   [13] 0.594425021 0.832215162 0.647878612 0.957458324 0.879027903 0.849765257 #>   [19] 0.711372255 0.693196621 0.781683811 0.880590697 0.794957961 0.634243347 #>   [25] 0.312819056 0.981874600 0.945964122 0.650796424 0.816757537 0.476675990 #>   [31] 0.628331947 0.635957515 0.910731560 0.864884362 0.705940935 0.136007887 #>   [37] 0.562802955 0.355442213 0.923157142 0.888141110 0.878073999 0.302794636 #>   [43] 0.938030485 0.947010325 0.377987836 0.869388151 0.716865400 0.940113941 #>   [49] 0.867435359 0.764937215 0.909091146 0.746786305 0.903663411 0.568197980 #>   [55] 0.342353228 0.527701258 0.866206583 0.604170861 0.633844212 0.359453379 #>   [61] 0.530254744 0.669443437 0.830135422 0.544097124 0.481198929 0.955408565 #>   [67] 0.510752540 0.888252625 0.513482430 0.936461430 0.657583995 0.828707910 #>   [73] 0.213103317 0.962980368 0.901820496 0.717342420 0.615047015 0.765208580 #>   [79] 0.469813359 0.522618747 0.174612345 0.594203012 0.517768367 0.070328823 #>   [85] 0.592958769 0.795545400 0.170604119 0.066907619 0.038384737 0.238607745 #>   [91] 0.140670017 0.070403240 0.538360908 0.111867979 0.191966331 0.053766597 #>   [97] 0.151517778 0.100981048 0.072012756 0.282475755 0.239075037 0.857330652 #>  [103] 0.954786666 0.089981671 0.042952318 0.053683553 0.040851806 0.746584768 #>  [109] 0.062091026 0.523321611 0.034063136 0.650526100 0.328622462 0.030253446 #>  [115] 0.081541651 0.746786305 0.063020293 0.087516160 0.034440169 0.023676781 #>  [121] 0.178960190 0.842548980 0.612815240 0.042019676 0.711372255 0.642434474 #>  [127] 0.129733849 0.390107736 0.030948350 0.171024206 0.100833065 0.149594843 #>  [133] 0.190737626 0.043135196 0.637813072 0.038787118 0.698186773 0.021376908 #>  [139] 0.046855173 0.104042474 0.116928698 0.026199221 0.045898144 0.036496629 #>  [145] 0.303073030 0.920986649 0.835165516 0.147841390 0.230138500 0.870613107 #>  [151] 0.049729132 0.056785150 0.036691286 0.021666040 0.029397845 0.426550841 #>  [157] 0.153340641 0.350558442 0.592149991 0.027027565 0.094832677 0.098472700 #>  [163] 0.071029042 0.053411857 0.134037735 0.440610826 0.035791527 0.043773863 #>  [169] 0.136448116 0.048726320 0.414290391 0.026005768 0.025581268 0.818220154 #>  [175] 0.041284057 0.092185111 0.040920029 0.237492036 0.068615314 0.042652951 #>  [181] 0.664330291 0.021547196 0.110299610 0.540288344 0.056451819 0.395775543 #>  [187] 0.527331707 0.971806378 0.237996372 0.661424520 0.034339492 0.026369774 #>  [193] 0.568912402 0.048619633 0.071035158 0.051359819 0.643896964 0.078535138 #>  [199] 0.948741079 0.058033088 0.059356187 0.656033030 0.481160016 0.103115922 #>  [205] 0.604565976 0.662283914 0.507038010 0.755644399 0.036799880 0.022797513 #>  [211] 0.039439874 0.046660859 0.035657638 0.041216239 0.053493280 0.683679302 #>  [217] 0.070468377 0.091232472 0.029427517 0.061997894 0.646225888 0.760337050 #>  [223] 0.594564206 0.034779416 0.094150739 0.046341885 0.474834674 0.029961917 #>  [229] 0.287898171 0.109673043 0.027331301 0.097065075 0.641156531 0.083445590 #>  [235] 0.063455023 0.024396260 0.047803668 0.068574896 0.043508502 0.138241055 #>  [241] 0.038952896 0.741628931 0.636903091 0.023354444 0.809924008 0.037498165 #>  [247] 0.076554465 0.602383284 0.057322365 0.089755497 0.157425965 0.046155894 #>  [253] 0.075731128 0.725022811 0.373372626 0.393435260 0.100503108 0.026799297 #>  [259] 0.042476970 0.845962421 0.024019547 0.035266951 0.056112449 0.518769989 #>  [265] 0.032592274 0.565838021 0.279403077 0.123122667 0.034715925 0.472106929 #>  [271] 0.561328402 0.026064606 0.206395950 0.021905768 0.020113065 0.854653357 #>  [277] 0.919746365 0.075331352 0.853070008 0.033824094 0.062575833 0.058989717 #>  [283] 0.031129998 0.141524364 0.528469195 0.085380046 0.069310032 0.062435161 #>  [289] 0.039067594 0.719928197 0.024938489 0.032192725 0.065240793 0.428890274 #>  [295] 0.100593839 0.709417002 0.162962684 0.029432504 0.065887503 0.371045771 #>  [301] 0.030269582 0.097329586 0.138017768 0.085826210 0.397216071 0.056817213 #>  [307] 0.101247853 0.129377941 0.018136157 0.663845560 0.652607275 0.718358593 #>  [313] 0.690884625 0.081744565 0.074991771 0.140982555 0.844315075 0.099005474 #>  [319] 0.565779624 0.053716338 0.267690273 0.401170576 0.724343345 0.448450789 #>  [325] 0.019751241 0.865660107 0.695769601 0.027489561 0.301102322 0.051329660 #>  [331] 0.045648531 0.043583470 0.126425218 0.051820868 0.076001339 0.002224914 #>  [337] 0.060930387 0.068637619 0.544743294 0.437032626 0.027481743 0.102235579 #>  [343] 0.298748417 0.979961834 0.223578677 0.912652954 0.029930190 0.088361193 #>  [349] 0.069775344 0.085427959 0.029953400 0.534462056 0.584763144 0.129316442 #>  [355] 0.536399881 0.781070438 0.048581021 0.270822784 0.030955829 0.083914137 #>  [361] 0.021155338 0.029438809 0.385155289 0.093030128 0.042967150 0.288384289 #>  [367] 0.041594274 0.021073388 0.032964932 0.086614255 0.787427839 0.175171045 #>  [373] 0.670330121 0.299696065 0.387570599 0.091808063 0.848533069 0.043727855 #>  [379] 0.031440071 0.043552157 0.230855238 0.936079124 0.056333661 0.391483416 #>  [385] 0.090592776 0.117680220 0.099570083 0.356299004 0.050442666 0.024439532 #>  [391] 0.132071579 0.428515932 0.092639124 0.384106566 0.184782042 0.058599343 #>  [397] 0.452006637 0.886826460 0.928910470 0.125989101 0.779439043 0.061647904 #>  [403] 0.091381160 0.449041618 0.442915583 0.110413177 0.747717801 0.094555172 #>  [409] 0.057291298 0.093487198 0.891179722 0.781340772 0.551559719 0.659742402 #>  [415] 0.241941222 0.653481043 0.502909839 0.753169500 0.039827023 0.062753942 #>  [421] 0.805278118 0.159665394 0.232017457 0.158455505 0.042255046 0.690246351 #>  [427] 0.687950187 0.063078240 0.042345451 0.774431140 0.316323334 0.043411904 #>  [433] 0.032296451 0.056647416 0.030910825 0.845892468 0.035753347 0.022047974 #>  [439] 0.631733901 0.031937552 0.037612419 0.019925372 0.853316795 0.035210229 #>  [445] 0.467300577 0.721938462 0.115105883 0.467898505 0.590154377 0.424025337 #>  [451] 0.261771206 0.049511503 0.847831912 0.739440375 0.699522234 0.133366258 #>  [457] 0.798247224 0.057251833 0.114828419 0.148089762 0.962156702 0.119847374 #>  [463] 0.039898104 0.905245984 0.017733522 0.354126722 0.172856073 0.926768210 #>  [469] 0.929252979 0.739866679 0.087411126 0.871418755 0.030008506 0.019127975 #>  [475] 0.039357756 0.072430728 0.071622602 0.827808557 0.533698457 0.320231226 #>  [481] 0.693808120 0.029017326 0.036946220 0.040178923 0.032845717 0.046118819 #>  [487] 0.039128149 0.088942593 0.177945391 0.177695492 0.396413061 0.077732622 #>  [493] 0.894438048 0.016115999 0.037211385 0.040963461 0.038486066 0.599862447 #>  [499] 0.043895256 0.774076827 0.402023888 0.338607599 0.104298126 0.077783526 #>  [505] 0.030516260 0.147629399 0.074574655 0.133484548 0.897655173 0.025012021 #>  [511] 0.030514148 0.355313314 0.029564555 0.050026037 0.046436518 0.869539935 #>  [517] 0.693076751 0.126939656 0.579560259 0.150991890 0.090699717 0.851284856 #>  [523] 0.140370546 0.692914123 0.087420514 0.256739405 0.458817178 0.321591135 #>  [529] 0.694358595 0.176618318 0.026885934 0.020519511 0.070270301 0.829539042 #>  [535] 0.044275094 0.574782172 0.005654311 0.495789159 0.391523858 0.111482488 #>  [541] 0.089538950 0.506091419 0.044805914 0.172336947 0.025697876 0.521383063 #>  [547] 0.025298636 0.190599608 0.264869038 0.048234042 0.412740584 0.065142370 #>  [553] 0.104980279 0.651599995 0.037310735 0.133678510 0.434105052 0.052728731 #>  [559] 0.037809204 0.120573682 0.026057400 0.070594306 0.806731768 0.365444712 #>  [565] 0.024263320 0.041524593 0.074695904 0.040591649 0.041430498 0.524496268 #>  [571] 0.064683190 0.075191792 0.698357145 0.903364222 0.089882048 0.086973558 #>  [577] 0.062549716 0.523621802 0.047092208 0.072255353 0.660424355 0.783974135 #>  [583] 0.032767543 0.611852843 0.712468007 0.309218803 0.077878175 0.440794501 #>  [589] 0.486128644 0.597702331 0.030795082 0.214317358 0.059301420 0.036809086 #>  [595] 0.026952239 0.035915983 0.033618616 0.094322824 0.072999272 0.834458908 #>  [601] 0.396363296 0.410068397 0.294339484 0.814805223 0.243352302 0.718277077 #>  [607] 0.893078141 0.021155115 0.362542127 0.068970617 0.086137423 0.928598141 #>  [613] 0.079113787 0.176919231 0.030811473 0.024338142 0.072274699 0.324600045 #>  [619] 0.048917590 0.791930360 0.038011312 0.831484607 0.561323479 0.147213084 #>  [625] 0.938678674 0.561926561 0.195398699 0.502898213 0.100068325 0.730963858 #>  [631] 0.204734068 0.171310415 0.513915278 0.036276711 0.417167403 0.127205449 #>  [637] 0.147827858 0.079065607 0.951931171 0.595034662 0.398323821 0.040684838 #>  [643] 0.026756646 0.057846362 0.665638395 0.145095897 0.035792168 0.102285993 #>  [649] 0.626412052 0.155156569 0.213618344 0.104105718 0.044153768 0.088052848 #>  [655] 0.685366522 0.003662088 0.150157225 0.111052462 0.788061626 0.037446844 #>  [661] 0.102145278 0.100858401 0.033474783 0.025952745 0.047661278 0.603809942 #>  [667] 0.860997231 0.114396425 0.037174622 0.299616509 0.112892330 0.037291950 #>  [673] 0.650959035 0.042058060 0.925937048 0.026219463 0.050983495 0.153447282 #>  [679] 0.029022179 0.062136303 0.229515631 0.097606790 0.065268323 0.892235805 #>  [685] 0.316921249 0.017641314 0.936622012 0.045337964 0.848043960 0.150737697 #>  [691] 0.616129800 0.038759719 0.604170861 0.511930561 0.949757341 0.018137371 #>  [697] 0.052147904 0.025892030 0.153966862 0.415678942 0.026687186 0.021284373 #>  [703] 0.150143489 0.922540299 0.127827669 0.032345146 0.065464964 0.147675226 #>  [709] 0.017454577 0.392683238 0.873308997 0.018761170 0.169921892 0.073712441 #>  [715] 0.025493922 0.103710076 0.104027468 0.030865336 0.036666307 0.076059678 #>  [721] 0.072324647 0.049578337 0.665024675 0.074287183 0.027405453 0.031593330 #>  [727] 0.081022798 0.365539362 0.162278949 0.104600361 0.188858686 0.123807498 #>  [733] 0.559359109 0.101609603 0.664636934 0.083294182 0.607745248 0.294256261 #>  [739] 0.106365203 0.058482391 0.050156089 0.762792164 0.363227672 0.024709513 #>  [745] 0.764536069 0.692977225 0.049250079 0.899550846 0.019847912 0.053125974 #>  [751] 0.568676241 0.660702999 0.046400834 0.051631133 0.056768894 0.715183559 #>  [757] 0.024107958 0.056961958 0.028289992 0.045058105 0.036359472 0.061806257 #>  [763] 0.310250316 0.139929163 0.100018242 0.033070984 0.026257354 0.530323204 #>  [769] 0.030047659 0.033950927 0.668079746 0.024992867 0.047458416 0.066880506 #>  [775] 0.128456723 0.536564065 0.085013715 0.745204257 0.460728242 0.023347934 #>  [781] 0.060522060 0.541179044 0.020568867 0.726639386 0.479354339 0.261002060 #>  [787] 0.056294592 0.611937798 0.077564271 0.018477179 0.480687187 0.580172063 #>  [793] 0.923157142 0.139138127 0.045032232 0.050320972 0.637508383 0.749541302 #>  [799] 0.110395969 0.074456145 0.165419709 0.553805123 0.031771662 0.742655222 #>  [805] 0.029356053 0.063519779 0.827402879 0.796468111 0.030548356 0.045467431 #>  [811] 0.028995101 0.507861819 0.015944559 0.883293394 0.069791922 0.101269101 #>  [817] 0.664780606 0.047611801 0.029792559 0.760419617 0.031942897 0.041919460 #>  [823] 0.098349069 0.093628488 0.023561008 0.890290222 0.029149047 0.477611949 #>  [829] 0.047025554 0.033665548 0.038918634 0.377415450 0.190342972 0.308450010 #>  [835] 0.022319619 0.051121981 0.082349266 0.039799720 0.042296482 0.737913602 #>  [841] 0.050846802 0.320896617 0.422192171 0.461280388 0.441298080 0.130745415 #>  [847] 0.095445630 0.090785870 0.136190248 0.937240266 0.676085623 0.049178995 #>  [853] 0.173852411 0.046596763 0.102769938 0.402665649 0.076372120 0.128858223 #>  [859] 0.153119412 0.386506419 0.091803496 0.632382647 0.636219641 0.021515956 #>  [865] 0.023552154 0.155555915 0.112994112 0.302026287 0.064644264 0.100365040 #>  [871] 0.059420787 0.099205249 0.488925901 0.485236208 0.050566517 0.845476807 #>  [877] 0.439876058 0.334003202 0.042517843 0.190401923 0.623594808 0.118175937 #>  [883] 0.773535760 0.144631465 0.168554175 0.882063376 0.036232993 0.113540321 #>  [889] 0.032372289 0.032806696 0.731205153 0.104396306 0.631189073 0.031298358 #>  [895] 0.070439240 0.062612153 0.665644154 0.438468004 0.104245498 0.025559632 #>  [901] 0.023064253 0.026347456 0.824674707 0.568881334 0.075046037 0.249093751 #>  [907] 0.124812924 0.041001961 0.613974809 0.040090121 0.020798169 0.047021454 #>  [913] 0.358755916 0.044789355 0.388913039 0.562647595 0.576027576 0.032728722 #>  [919] 0.224026786 0.039851541 0.046258309 0.656003401 0.090549696 0.547381882 #>  [925] 0.859777739 0.093191458 0.907083340 0.029736867 0.119471313 0.205220264 #>  [931] 0.031604662 0.532414133 0.045434353 0.649464562 0.714605242 0.027794832 #>  [937] 0.504232790 0.043560023 0.870200348 0.046301065 0.036269855 0.050432063 #>  [943] 0.581261317 0.082803541 0.043283489 0.045489359 0.257705413 0.738701863 #>  [949] 0.651395359 0.031246827 0.068067433 0.554609334 0.625553964 0.037530694 #>  [955] 0.713322885 0.529699290 0.236093607 0.219378226 0.295482884 0.072182808 #>  [961] 0.078248657 0.065778119 0.021323781 0.078574079 0.635073129 0.046287430 #>  [967] 0.026368364 0.032721044 0.030172796 0.046195145 0.029420847 0.230705799 #>  [973] 0.022330673 0.628328538 0.037543696 0.019973164 0.076775260 0.030509901 #>  [979] 0.283253244 0.062724144 0.862175127 0.024623469 0.027438386 0.205879842 #>  [985] 0.746864277 0.851309347 0.055342209 0.031604770 0.082788972 0.527619996 #>  [991] 0.296155346 0.110902338 0.222051222 0.632471652 0.046345983 0.785026714 #>  [997] 0.668936395 0.156464245 0.017354093 0.097291956 0.653143061 0.653024415 #> [1003] 0.256400520 0.099573503 0.362481036 0.067004013 0.163144157 0.104526067 #> [1009] 0.074826780 0.045936477 0.265777462 0.624785367 0.157065857 0.026593129 #> [1015] 0.034420296 0.840182321 0.035922296 0.615355528 0.555871863 0.786918523 #> [1021] 0.044428311 0.432139136 0.770624089 0.139940549 0.281519619 0.116780315 #> [1027] 0.260217711 0.018960685 0.342160142 0.030528075 0.135148141 0.028796507 #> [1033] 0.066552561 0.234084232 0.692353514 0.184515777 0.513949082 0.079511950 #> [1039] 0.031083384 0.090315853 0.032047327 0.039389651 0.077576601 0.031538961 #> [1045] 0.441005073 0.248677262 0.803083990 0.104338380 0.243464295 0.054126389 #> [1051] 0.873831158 0.036347623 0.098341684 0.035125417 0.171528435 0.591376866 #> [1057] 0.400005328 0.095417271 0.774034994 0.055963701 0.037204139 0.059576202 #> [1063] 0.299234924 0.041532060 0.106825737 0.101128972 0.636980238 0.148474092 #> [1069] 0.025816991 0.590476070 0.031812494 0.031047558 0.521013054 0.177876773 #> [1075] 0.021806487 0.033265005 0.086067193 0.712873283 0.517915518 0.024372108 #> [1081] 0.083474809 0.110819050 0.016109000 0.510752540 0.162378275 0.047686700 #> [1087] 0.020244511 0.673161456 0.085512844 0.099574231 0.168423344 0.766986162 #> [1093] 0.021887639 0.197574749 0.048943010 0.715078735 0.049699693 0.847827667 #> [1099] 0.853351846 0.606230728 0.474598826 0.046221012 0.422863074 0.020048156 #> [1105] 0.201187142 0.045457662 0.331191307 0.647878612 0.059440906 0.093886253 #> [1111] 0.081469715 0.748772848 0.134347454 0.415550664 0.245190935 0.019477860 #> [1117] 0.030835650 0.423821215 0.215776769 0.049965078 0.063410546 0.044391197 #> [1123] 0.563838550 0.611909797 0.158801089 0.754902762 0.040137247 0.383953996 #> [1129] 0.033817282 0.485701094 0.019801058 0.033741333 0.160062331 0.043724866 #> [1135] 0.052890945 0.036720071 0.103993453 0.137315659 0.119679141 0.870290811 #> [1141] 0.045236629 0.043854201 0.775088633 0.849300051 0.714374739 0.022918112 #> [1147] 0.114026185 0.025658885 0.093540722 0.927643089 0.178357782 0.466854947 #> [1153] 0.065154109 0.051165751 0.032557386 0.035535880 0.097498548 0.045328865 #> [1159] 0.090027849 0.054075379 0.020820392 0.064132885 0.054631474 0.027089421 #> [1165] 0.634243347 0.050997856 0.048874069 0.050950525 0.129005740 0.097781631 #> [1171] 0.026026051 0.032682874 0.072123612 0.305026329 0.073684623 0.627990045 #> [1177] 0.091266021 0.098458660 0.034323797 0.170826584 0.112417738 0.042041975 #> [1183] 0.029934415 0.390354016 0.529506339 0.124993163 0.239424354 0.029931650 #> [1189] 0.022228486 0.065828134 0.023708869 0.031934014 0.676053571 0.047708385 #> [1195] 0.138003646 0.017472274 0.115058943 0.016651969 0.401399259 0.081657539 #> [1201] 0.800663203 0.563302716 0.098566922 0.051599080 0.094531952 0.508852092 #> [1207] 0.035699995 0.148457407 0.225141689 0.039040240 0.073882472 0.032692422 #> [1213] 0.024493841 0.096230555 0.913930693 0.040572675 0.022291429 0.247395706 #> [1219] 0.126286340 0.661605524 0.023903240 0.766660537 0.716865400 0.045757621 #> [1225] 0.098773731 0.507693152 0.283281453 0.647598040 0.111924627 0.027212926 #> [1231] 0.052819555 0.385166307 0.875011563 0.647663590 0.611470101 0.101881894 #> [1237] 0.048193630 0.046046838 0.029616557 0.094422365 0.036924664 0.068133108 #> [1243] 0.257318576 0.027861925 0.448287527 0.132581577 0.059584632 0.107583190 #> [1249] 0.160716555 0.020461510 0.073560532 0.220464094 0.122290166 0.066581701 #> [1255] 0.284469608 0.177363559 0.032309998 0.910969635 0.859079457 0.411329250 #> [1261] 0.136698609 0.124416071 0.055207442 0.340661192 0.582295373 0.042841164 #> [1267] 0.613400470 0.182279317 0.101908859 0.094200067 0.020717609 0.021593326 #> [1273] 0.235280009 0.502105162 0.241118432 0.535282233 0.879776678 0.444169789 #> [1279] 0.047501396 0.844300731 0.426846884 0.660402038 0.028217908 0.604871007 #> [1285] 0.679268611 0.031633778 0.065535372 0.909592528 0.042170515 0.040201637 #> [1291] 0.034192976 0.107316922 0.094707540 0.308964845 0.486128133 0.025209413 #> [1297] 0.071505224 0.315202355 0.093381100 0.106126977 0.828277588 0.086371913 #> [1303] 0.092963362 0.471337753 0.900633464 0.118143994 0.114220701 0.047969013 #> [1309] 0.028958307 0.598447598 0.020244386 0.040287228 0.030283233 0.028157803 #> [1315] 0.043104786 0.045632713 0.035886700 0.044966077 0.340760728 0.051054860 #> [1321] 0.074069189 0.732312699 0.021982163 0.595553302 0.022704082 0.164674705 #> [1327] 0.618448454 0.197204892 0.437433340 0.520172654 0.772165716 0.104787816 #> [1333] 0.116135926 0.026376578 0.695007689 0.026767968 0.030110491 0.119002495 #> [1339] 0.271998432 0.367626054 0.107980273 0.691479327 0.060771306 0.040005499 #> [1345] 0.705435584 0.587218315 0.693653183 0.673426229 0.607294818 0.020544189 #> [1351] 0.092195047 0.068526518 0.445981715 0.556129745 0.850374144 0.040094015 #> [1357] 0.562641794 0.766007967 0.466380902 0.939933724 0.392738391 0.222976770 #> [1363] 0.020999268 0.132450591 0.813934521 0.033727359 0.083975740 0.084229341 #> [1369] 0.070000002 0.716344549 0.696647515 0.362264235 0.125664711 0.016488390 #> [1375] 0.062010933 0.233423308 0.043821206 0.137099033 0.041741959 0.025344766 #> [1381] 0.022148898 0.081121402 0.030428942 0.018974196 0.039291099 0.730514944 #> [1387] 0.064477383 0.366596127 0.147779005 0.858922047 0.048153692 0.073451678 #> [1393] 0.030337960 0.057550443 0.683529646 0.446497202 0.693762721 0.656298037 #> [1399] 0.926742408 0.027197185 0.113414914 0.987719012 0.551104082 0.027245556 #> [1405] 0.530184305 0.079999587 0.685981442 0.160411448 0.168413338 0.153523987 #> [1411] 0.061145626 0.507502855 0.071789130 0.048346363 0.033767740 0.903670862 #> [1417] 0.231385465 0.406713627 0.143013962 0.239145179 0.397673551 0.463942983 #> [1423] 0.025221505 0.202080427 0.380713027 0.670534542 0.063391367 0.023988725 #> [1429] 0.470222955 0.109449291 0.393307959 0.168469102 0.021711347 0.033137865 #> [1435] 0.658234849 0.303280199 0.067330448 0.035818351 0.267117570 0.175908010 #> [1441] 0.051380585 0.796359938 0.155124192 0.912072077 0.784990401 0.527352263 #> [1447] 0.905709035 0.513453071 0.054430303 0.058016545 0.028392394 0.038066767 #> [1453] 0.044039271 0.935992999 0.582495601 0.016290057 0.553821701 0.331689170 #> [1459] 0.878446412 0.329065000 0.392855221 0.042767293 0.070724260 0.453082526 #> [1465] 0.249832543 0.660032597 0.638247339 0.147734602 0.342996356 0.031261456 #> [1471] 0.798342944 0.034393076 0.125954303 0.037486056 0.534941939 0.046146652 #> [1477] 0.087970395 0.030210789 0.395265433 0.528536951 0.553829687 0.881981632 #> [1483] 0.085788837 0.848413491 0.047040085 0.870178825 0.052867546 0.161867779 #> [1489] 0.093779732 0.101361409 0.018474620 0.098049981 0.065105924 0.068548451 #> [1495] 0.038522235 0.580182441 0.536921674 0.044636457 0.044186641 0.189153789 #> [1501] 0.062940096 0.062376513 0.622262733 0.847616641 0.049706702 0.096172929 #> [1507] 0.819894393 0.651511647 0.520157772 0.048525632 0.029691750 0.045973462 #> [1513] 0.074476471 0.096367379 0.699365554 0.108106692 0.015304685 0.932905114 #> [1519] 0.066655745 0.077067596 0.035986080 0.488240683 0.056501456 0.112803676 #> [1525] 0.713791111 0.368022961 0.020826814 0.086586607 0.142719858 0.174914379 #> [1531] 0.023764128 0.044867233 0.641705862 0.264127236 0.266856667 0.837223072 #> [1537] 0.874911082 0.044533069 0.040796136 0.113787329 0.880061792 0.496472931 #> [1543] 0.346924680 0.043357337 0.095060569 0.608655270 0.927161066 0.923695089 #> [1549] 0.064494023 0.756760434 0.451415029 0.044395331 0.512723156 0.016860350 #> [1555] 0.662639149 0.957755756 0.047983054 0.035030492 0.299624931 0.101947232 #> [1561] 0.027777558 0.052368464 0.023549842 0.722827188 0.456148585 0.084574697 #> [1567] 0.589574905 0.111678332 0.024252993 0.026251026 0.132167912 0.915535437 #> [1573] 0.053877131 0.566579657 0.702130012 0.044946835 0.044187311 0.095463602 #> [1579] 0.101023395 0.197774879 0.845428549 0.092421778 0.454077573 0.524550926 #> [1585] 0.516960587 0.138685475 0.468585887 0.472516382 0.039786302 0.138357863 #> [1591] 0.602645725 0.026169926 0.042721902 0.018607038 0.925526966 0.082846075 #> [1597] 0.744513726 0.089625370 0.205779927 0.031997270 0.471907955 0.427626116 #> [1603] 0.085730913 0.078324519 0.865499696 0.033827275 0.174652054 0.592890089 #> [1609] 0.902695805 0.144181561 0.698714940 0.065290502 0.027779947 0.463445065 #> [1615] 0.027398239 0.389924007 0.027014366 0.028773554 0.533040804 0.312499664 #> [1621] 0.026537210 0.169010413 0.077696424 0.277525186 0.040491233 0.089747576 #> [1627] 0.032033512 0.131691777 0.070743889 0.721053137 0.459715268 0.042640688 #> [1633] 0.036200133 0.912157446 0.050236187 0.036886093 0.028438756 0.031905093 #> [1639] 0.061282440 0.630278265 0.045217309 0.023149461 0.023518992 0.944903246 #> [1645] 0.317142149 0.772602730 0.131914289 0.111269832 0.042372400 0.137851440 #> [1651] 0.414616318 0.060592224 0.025779827 0.419102604 0.808134787 0.357684217 #> [1657] 0.464279229 0.597236893 0.588628668 0.040502387 0.420282602 0.141018567 #> [1663] 0.098641308 0.074490126 0.021348210 0.080172078 0.368149926 0.059170897 #> [1669] 0.039086401 0.462982750 0.146396460 0.630968665 0.641544154 0.049092322 #> [1675] 0.663526102 0.041407834 0.135618402 0.109681512 0.113495249 0.044081538 #> [1681] 0.582852883 0.102835667 0.048801600 0.934501558 0.443488798 0.451819461 #> [1687] 0.875446405 0.025853746 0.039052768 0.385125003 0.539278011 0.381840084 #> [1693] 0.086874095 0.634036780 0.488330185 0.068345698 0.145207317 0.857649345 #> [1699] 0.025437208 0.022097645 0.314502358 0.048276666 0.981532447 0.055989765 #> [1705] 0.074587410 0.103172936 0.501582690 0.825254559 0.065017194 0.412872302 #> [1711] 0.658915269 0.661471729 0.020344497 0.074815621 0.091805542 0.668956109 #> [1717] 0.847834712 0.101046159 0.101087390 0.068693105 0.193839539 0.498819716 #> [1723] 0.052493624 0.377987836 0.034723646 0.652679501 0.023559293 0.223639967 #> [1729] 0.755008584 0.045248658 0.665872926 0.086859314 0.031146343 0.580187522 #> [1735] 0.056357566 0.130188121 0.575113230 0.025239306 0.435136020 0.109288667 #> [1741] 0.138569714 0.092605173 0.798869954 0.021325775 0.151428860 0.645733062 #> [1747] 0.421132590 0.063070833 0.141006629 0.177392831 0.618396029 0.078039244 #> [1753] 0.748939716 0.044681553 0.030026981 0.125552812 0.976884162 0.895930804 #> [1759] 0.030839105 0.678608465 0.150792445 0.021246664 0.657583995 0.020129209 #> [1765] 0.088936748 0.072913594 0.621164024 0.537479399 0.471561632 0.049095395 #> [1771] 0.025077440 0.215880205 0.026931232 0.025657696 0.104341799 0.103966601 #> [1777] 0.026163931 0.924415317 0.112648118 0.489901575 0.077060325 0.633844212 #> [1783] 0.138947028 0.022181725 0.039287403 0.776109913 0.728180234 0.190629357 #> [1789] 0.044576333 0.293420333 0.685871375 0.151395157 0.031087175 0.024175876 #> [1795] 0.022730078 0.032539989 0.605324027 0.431534398 0.862261784 0.391441322 #> [1801] 0.621383317 0.518493354 0.233704052 0.031430699 0.518616881 0.858268091 #> [1807] 0.574422956 0.088124463 0.505362464 0.553657847 0.044477475 0.367021146 #> [1813] 0.206733732 0.623232013 0.943685617 0.020915679 0.064734144 0.667864430 #> [1819] 0.699697725 0.093487579 0.087445726 0.114844093 0.053781381 0.493389730 #> [1825] 0.031517715 0.053512064 0.037350830 0.039992097 0.028233937 0.581278075 #> [1831] 0.402900889 0.750574162 0.070159131 0.113080517 0.032143550 0.365408237 #> [1837] 0.036539048 0.059874492 0.026922483 0.156480245 0.022324357 0.055102875 #> [1843] 0.045329566 0.044780759 0.142745515 0.656101476 0.041942662 0.878902609 #> [1849] 0.711317546 0.062055966 0.049575277 0.364331483 0.029151647 0.205673601 #> [1855] 0.025305731 0.034425387 0.938030485 0.667331766 0.095111449 0.848765802 #> [1861] 0.052152533 0.017335815 0.039157319 0.033136113 0.042745447 0.016965298 #> [1867] 0.126360379 0.428323675 0.332710713 0.038532347 0.136015254 0.034928507 #> [1873] 0.032965822 0.096539809 0.030819229 0.038978841 0.644060914 0.895165885 #> [1879] 0.004235480 0.091112237 0.024792537 0.514143560 0.271687136 0.069111305 #> [1885] 0.764718135 0.039248350 0.105746758 0.085979684 0.963749832 0.039912278 #> [1891] 0.091107453 0.016384912 0.072294424 0.619001981 0.112195671 0.644395451 #> [1897] 0.116480579 0.299458888 0.382378032 0.205629346 0.042802911 0.193415815 #> [1903] 0.074842487 0.155341043 0.297363702 0.821726957 0.409233802 0.034937907 #> [1909] 0.084471957 0.687911276 0.035950506 0.061379282 0.446905101 0.077370800 #> [1915] 0.050157613 0.034354451 0.083074013 0.119461148 0.146596530 0.030633676 #> [1921] 0.402092656 0.025739997 0.119851292 0.290250887 0.094615694 0.578331460 #> [1927] 0.096018057 0.211779123 0.602794707 0.602298707 0.035616435 0.787565761 #> [1933] 0.554415735 0.039246207 0.101966776 0.457810756 0.327010549 0.085077997 #> [1939] 0.053821947 0.044789168 0.778874894 0.026169534 0.070453412 0.221727147 #> [1945] 0.139282034 0.044027568 0.094141425 0.107621986 0.481067651 0.078444900 #> [1951] 0.913528793 0.647865411 0.085667171 0.168316682 0.025651635 0.061355673 #> [1957] 0.846654910 0.227062542 0.754865165 0.230271883 0.020413897 0.022874771 #> [1963] 0.109240748 0.018965277 0.033631136 0.085115157 0.035193963 0.185710309 #> [1969] 0.607222722 0.076448996 0.203391042 0.518795358 0.040834588 0.310456584 #> [1975] 0.036668346 0.220541868 0.022829959 0.179568467 0.053573730 0.836204385 #> [1981] 0.055167124 0.446155572 0.020132209 0.069180923 0.602440132 0.003378804 #> [1987] 0.085293999 0.673341481 0.102972000 0.320591506 0.357412876 0.174440768 #> [1993] 0.150794761 0.903877506 0.038776772 0.154713712 0.021659486 0.020208685 #> [1999] 0.739483804 0.112803029 0.317909836 0.106556434 0.674042632 0.349597428 #> [2005] 0.311971502 0.248374239 0.100411297 0.057479093 0.481775399 0.529939683 #> [2011] 0.441776436 0.039947132 0.045240792 0.070359627 0.591637474 0.071285766 #> [2017] 0.523377707 0.084918810 0.306399473 0.821793395 0.663212920 0.584754821 #> [2023] 0.030560480 0.059862085 0.041364748 0.144682347 0.075197729 0.702694425 #> [2029] 0.181990799 0.023525466 0.024047915 0.042954971 0.276210002 0.027393151 #> [2035] 0.099829532 0.261048833 0.855042400 0.529554304 0.885761348 0.771506603 #> [2041] 0.028864522 0.104605438 0.920999398 0.704091478 0.076420602 0.033719582 #> [2047] 0.098283629 0.115289862 0.090380361 0.140527874 0.594425021 0.042186246 #> [2053] 0.095352059 0.033578233 0.328596771 0.945657528 0.709717911 0.045457797 #> [2059] 0.034787211 0.174205509 0.162402392 0.331366430 0.229084894 0.845544567 #> [2065] 0.057461191 0.028763893 0.053306426 0.438111755 0.109198313 0.035206352 #> [2071] 0.026074131 0.794170889 0.121919989 0.783937482 0.101548552 0.028932452 #> [2077] 0.262857216 0.491423449 0.220969050 0.246587741 0.710298580 0.946772467 #> [2083] 0.112454103 0.098187478 0.256111220 0.081476314 0.038527362 0.598971704 #> [2089] 0.035797333 0.941616941 0.507307102 0.136327021 0.027566429 0.050752559 #> [2095] 0.783630833 0.564404864 0.023982403 0.484481427 0.166943625 0.032416750 #> [2101] 0.046663458 0.038910278 0.866979034 0.038277362 0.062314396 0.028946728 #> [2107] 0.025526811 0.028755716 0.045045839 0.397122603 0.101465861 0.450559889 #> [2113] 0.062760109 0.288324955 0.691825938 0.835571913 0.056142767 0.019856889 #> [2119] 0.143298815 0.016732146 0.518751927 0.723433381 0.030990948 0.136803386 #> [2125] 0.338787330 0.025959292 0.070758969 0.681416479 0.041142983 0.076473739 #> [2131] 0.659761397 0.103365037 0.041754571 0.059346546 0.049041752 0.057165767 #> [2137] 0.494273798 0.117120514 0.083468456 0.025878650 0.034957601 0.570174114 #> [2143] 0.131015628 0.539849445 0.119823946 0.611692776 0.636044001 0.019764260 #> [2149] 0.041686942 0.874212203 0.037626850 0.065255191 0.069660633 0.506394438 #> [2155] 0.031363756 0.092714412 0.023830880 0.102764534 0.473464206 0.046720252 #> [2161] 0.039329928 0.075277925 0.857555644 0.219005863 0.664895139 0.551373982 #> [2167] 0.276991315 0.025247340 0.166911603 0.021361558 0.126189008 0.853604840 #> [2173] 0.046372230 0.490461603 0.256396971 0.039467793 0.286020603 0.036897400 #> [2179] 0.490712829 0.145905303 0.033376853 0.585570392 0.144367597 0.767188994 #> [2185] 0.044207522 0.085343703 0.394025956 0.025120554 0.098248138 0.041181539 #> [2191] 0.036489944 0.497218573 0.023234644 0.537377172 0.033875175 0.162737399 #> [2197] 0.039141176 0.155488451 0.776735455 0.094015486 0.224122575 0.061996663 #> [2203] 0.082255119 0.025116708 0.216031179 0.060998227 0.077147980 0.033694066 #> [2209] 0.082210207 0.031282918 0.296506426 0.060768783 0.050373693 0.352968275 #> [2215] 0.290781282 0.086014957 0.069421327 0.064454930 0.093923781 0.028862065 #> [2221] 0.056837303 0.145679547 0.737915983 0.508339738 0.035863170 0.526968273 #> [2227] 0.547296404 0.620247320 0.876212440 0.078625291 0.025756700 0.039848386 #> [2233] 0.608904428 0.020286549 0.042736557 0.033068022 0.579792199 0.071375672 #> [2239] 0.060605300 0.056713852 0.042266777 0.551738498 0.384647491 0.851003227 #> [2245] 0.632758750 0.737213641 0.058107109 0.039726960 0.834627361 0.062282718 #> [2251] 0.022929613 0.407918993 0.283447814 0.178493512 0.563266923 0.275448992 #> [2257] 0.032234012 0.646200130 0.396469359 0.311590359 0.620921425 0.169089238 #> [2263] 0.705940935 0.037973844 0.026418151 0.398938103 0.090356321 0.036324612 #> [2269] 0.248319371 0.829308357 0.885440219 0.780657664 0.269199469 0.026903184 #> [2275] 0.026559523 0.020088854 0.104508601 0.373363137 0.063671500 0.669688056 #> [2281] 0.153443809 0.669443437 0.917540164 0.598575819 0.084650418 0.027246275 #> [2287] 0.043259072 0.588511496 0.063797682 0.082885938 0.632050193 0.033113320 #> [2293] 0.031510203 0.033212371 0.929809620 0.018929713 0.184395134 0.028637649 #> [2299] 0.064839257 0.656245999 0.808544104 0.738259289 0.047478164 0.914768226 #> [2305] 0.125083597 0.942090686 0.606676376 0.672055630 0.063943536 0.094147588 #> [2311] 0.037832417 0.416798928 0.142316927 0.103052035 0.562496574 0.332537511 #> [2317] 0.458099380 0.028995895 0.899201893 0.039558537 0.622433972 0.030922786 #> [2323] 0.369458307 0.051128242 0.098231075 0.691646898 0.318569683 0.131297299 #> [2329] 0.049083997 0.245987054 0.031547383 0.827930482 0.023469229 0.015795642 #> [2335] 0.633403396 0.026275077 0.167569568 0.037810860 0.784534942 0.077155369 #> [2341] 0.067847377 0.388581090 0.034257466 0.133621340 0.908788049 0.237683395 #> [2347] 0.050805068 0.421944873 0.034346259 0.286766255 0.053255036 0.109411673 #> [2353] 0.620855732 0.399799152 0.425695815 0.549256749 0.090004000 0.028170509 #> [2359] 0.044835604 0.145120782 0.465225090 0.056704384 0.025390824 0.911171616 #> [2365] 0.084485689 0.431753433 0.020073274 0.030962360 0.654120115 0.067925778 #> [2371] 0.045868629 0.092506147 0.167936727 0.052957771 0.596794797 0.050874193 #> [2377] 0.039040003 0.108184637 0.909091146 0.589278559 0.028075661 0.042769110 #> [2383] 0.683006816 0.315154329 0.135647505 0.035634339 0.130683535 0.102268317 #> [2389] 0.044715993 0.188541821 0.028965862 0.162078190 0.042780000 0.086719402 #> [2395] 0.035727544 0.021609244 0.697874047 0.761597908 0.584364103 0.788220153 #> [2401] 0.149951552 0.136163962 0.021966122 0.085192843 0.124505010 0.023849420 #> [2407] 0.482006136 0.556448563 0.486257232 0.029293784 0.067875406 0.709721502 #> [2413] 0.023951025 0.025754475 0.742895079 0.532273873 0.456370969 0.039698495 #> [2419] 0.040289506 0.028834710 0.033593186 0.859638415 0.938737720 0.317161375 #> [2425] 0.416548099 0.148963256 0.100003986 0.026652967 0.019048986 0.638976262 #> [2431] 0.025328837 0.778618848 0.168548710 0.142540312 0.204766179 0.255781887 #> [2437] 0.020090383 0.049787274 0.054992544 0.024712078 0.033886895 0.103683515 #> [2443] 0.020503240 0.103362792 0.193457529 0.488405652 0.044649971 0.089902468 #> [2449] 0.082706544 0.031001636 0.127240063 0.025037134 0.402437495 0.092763358 #> [2455] 0.092235779 0.110494339 0.027442043 0.499185562 0.029193064 0.042380708 #> [2461] 0.354442142 0.027979795 0.056077969 0.047917541 0.088410484 0.086119375 #> [2467] 0.200344050 0.071697146 0.453475042 0.444974173 0.023361509 0.085275970 #> [2473] 0.648286946 0.148808028 0.713616426 0.025073821 0.828707910 0.990047734 #> [2479] 0.056062994 0.040378905 0.055847926 0.113956541 0.785103258 0.758210861 #> [2485] 0.027577643 0.348818762 0.054056077 0.851845009 0.052002169 0.175271764 #> [2491] 0.824366996 0.700217977 0.024783041 0.064972269 0.833575694 0.126406480 #> [2497] 0.542139965 0.027623741 0.424653047 0.862167977 0.083068894 0.407929153 #> [2503] 0.022770672 0.019402514 0.098269940 0.025848661 0.049998733 0.044256952 #> [2509] 0.643627220 0.038629302 0.020969593 0.038120581 0.114189294 0.035856773 #> [2515] 0.104374485 0.254768756 0.116522141 0.024670903 0.030815782 0.309784078 #> [2521] 0.412434513 0.304551819 0.037891717 0.033947041 0.043489879 0.056620727 #> [2527] 0.028404596 0.184941132 0.210052031 0.468140884 0.020971209 0.095552277 #> [2533] 0.303774123 0.058595444 0.463399987 0.766787737 0.098200628 0.599837328 #> [2539] 0.198713509 0.042970795 0.100503214 0.557148069 0.043360318 0.591039450 #> [2545] 0.023679943 0.818838231 0.744661000 0.554483334 0.073844419 0.880578090 #> [2551] 0.036832267 0.309075015 0.482679580 0.098269483 0.085266274 0.825803271 #> [2557] 0.627850567 0.694097163 0.030459595 0.126378616 0.318080191 0.439931651 #> [2563] 0.038586495 0.679070741 0.301783699 0.623455556 0.024786264 0.391023089 #> [2569] 0.304015297 0.092425289 0.044179276 0.144267378 0.035007952 0.494398102 #> [2575] 0.024876168 0.191375162 0.084752354 0.049145548 0.025366709 0.872587750 #> [2581] 0.722580988 0.038456730 0.332514249 0.035069247 0.834960749 0.033487937 #> [2587] 0.273020072 0.794957961 0.028851852 0.062249278 0.647244847 0.096547647 #> [2593] 0.075509624 0.728507902 0.073135432 0.032105768 0.448623389 0.028399181 #> [2599] 0.089263847 0.933981859 0.081156457 0.048221878 0.050829082 0.875009816 #> [2605] 0.068326140 0.496848064 0.029618130 0.088977225 0.876799458 0.086747086 #> [2611] 0.705507113 0.109198828 0.099094101 0.126161005 0.135745943 0.013322180 #> [2617] 0.062825476 0.146747260 0.607143307 0.871392078 0.141767513 0.024179113 #> [2623] 0.164978362 0.030520310 0.300345027 0.702220623 0.180085785 0.021820441 #> [2629] 0.336912990 0.839477371 0.092515045 0.090385824 0.069384642 0.595716766 #> [2635] 0.629660009 0.469423427 0.310261116 0.021170238 0.065704946 0.045444817 #> [2641] 0.399554735 0.098828821 0.302981662 0.074945221 0.834927581 0.029811703 #> [2647] 0.018178414 0.042017805 0.432630049 0.150524113 0.183069301 0.095959858 #> [2653] 0.028007051 0.050232870 0.610223683 0.075234584 0.056911322 0.029771181 #> [2659] 0.199369112 0.098896393 0.696700397 0.110909852 0.077984077 0.041454209 #> [2665] 0.028441552 0.368271901 0.251283221 0.686279877 0.393050452 0.228355988 #> [2671] 0.150880716 0.110463229 0.815506995 0.342884189 0.092312774 0.910615558 #> [2677] 0.519933551 0.024216324 0.487410108 0.034924355 0.038541525 0.138591843 #> [2683] 0.829426220 0.073573754 0.051968360 0.050393731 0.686321592 0.126864056 #> [2689] 0.810746133 0.496885953 0.141648269 0.602499624 0.085500497 0.869286409 #> [2695] 0.840427635 0.135729570 0.025153345 0.076804678 0.035137078 0.024904759 #> [2701] 0.034340799 0.387095261 0.023781539 0.044367140 0.071651717 0.475617724 #> [2707] 0.503931560 0.457306988 0.020838347 0.125747563 0.099581458 0.370359029 #> [2713] 0.417251774 0.049279873 0.035211111 0.311845656 0.429814002 0.055334216 #> [2719] 0.015558351 0.050231418 0.025630670 0.498546389 0.035436163 0.355135720 #> [2725] 0.249362233 0.206538618 0.020765678 0.481735903 0.076967323 0.394082858 #> [2731] 0.064489364 0.682633987 0.022569913 0.023363361 0.021274978 0.094066688 #> [2737] 0.087110330 0.933751303 0.030539931 0.054964246 0.364917990 0.740484395 #> [2743] 0.038845750 0.681879828 0.088684197 0.796194167 0.238662160 0.136502780 #> [2749] 0.028981516 0.025034582 0.052986959 0.527553909 0.089733843 0.093238303 #> [2755] 0.716090735 0.032944399 0.117301443 0.569566538 0.096827903 0.534247076 #> [2761] 0.018588423 0.847529011 0.053383722 0.036026163 0.039708836 0.412633952 #> [2767] 0.034255491 0.021448827 0.024343635 0.075140707 0.901976987 0.480370609 #> [2773] 0.064267256 0.048871091 0.026414142 0.342726167 0.027955769 0.059125966 #> [2779] 0.119291087 0.170496073 0.023834614 0.127365619 0.330169873 0.429185561 #> [2785] 0.058264798 0.087521522 0.953340463 0.041506683 0.193664379 0.155981494 #> [2791] 0.445116445 0.152058900 0.035369937 0.089331081 0.783342031 0.422813211 #> [2797] 0.032228409 0.284559753 0.091618879 0.039519834 0.808336777 0.047280482 #> [2803] 0.753220503 0.084911069 0.527507713 0.051123720 0.669717526 0.021727953 #> [2809] 0.028917753 0.609242707 0.922424897 0.047536156 0.122130586 0.069569603 #> [2815] 0.166933612 0.045746356 0.596621209 0.046282648 0.497025844 0.557824748 #> [2821] 0.067138302 0.098024645 0.019278275 0.008271213 0.025155728 0.036453604 #> [2827] 0.035818465 0.022905986 0.415790471 0.043141431 0.029110876 0.650093600 #> [2833] 0.233119701 0.140122791 0.778956028 0.020582875 0.644690328 0.067981222 #> [2839] 0.410264107 0.069045912 0.239644619 0.018609347 0.048286753 0.910307415 #> [2845] 0.463511331 0.073800946 0.795039916 0.025826184 0.846518225 0.929041698 #> [2851] 0.044740444 0.179774365 0.059177014 0.034269428 0.150633677 0.121086697 #> [2857] 0.061068313 0.618251643 0.082818260 0.290877533 0.667859536 0.032924812 #> [2863] 0.042929791 0.047820893 0.084000861 0.135507501 0.638692251 0.038558643 #> [2869] 0.513991948 0.025824597 0.055884052 0.726528628 0.112126500 0.049765985 #> [2875] 0.032801410 0.057515457 0.026907509 0.411433110 0.037668284 0.022683716 #> [2881] 0.041909659 0.025110957 0.086968262 0.084087667 0.100057165 0.149931256 #> [2887] 0.047796502 0.036244861 0.042077461 0.016751676 0.020471958 0.853553295 #> [2893] 0.605755388 0.551397625 0.037643041 0.257675656 0.039301285 0.107216234 #> [2899] 0.160106762 0.060438799 0.021241669 0.020525666 0.479851600 0.548169450 #> [2905] 0.661851864 0.646221444 0.447296510 0.392547800 0.019912080 0.353959610 #> [2911] 0.098003312 0.094452698 0.056155632 0.082916810 0.279465114 0.043141308 #> [2917] 0.529404471 0.626670746 0.840070721 0.180304059 0.049563466 0.614645640 #> [2923] 0.683104572 0.519753995 0.057177720 0.202545154 0.026166669 0.380272585 #> [2929] 0.127057405 0.731720749 0.142756392 0.426150206 0.466275367 0.054201197 #> [2935] 0.327146573 0.038608830 0.605862170 0.043771246 0.084332996 0.884573949 #> [2941] 0.026575533 0.496758661 0.809516649 0.042560498 0.107716457 0.066728764 #> [2947] 0.011884174 0.793272058 0.084766072 0.809906027 0.025265815 0.047061044 #> [2953] 0.895637665 0.586950473 0.318385833 0.650530927 0.076565710 0.029879854 #> [2959] 0.954070745 0.039355887 0.297379958 0.410289004 0.055810225 0.604763522 #> [2965] 0.052234417 0.769523682 0.077494662 0.044997088 0.310588776 0.342539287 #> [2971] 0.103272956 0.076406132 0.031282722 0.253415594 0.031991541 0.033684249 #> [2977] 0.580572417 0.294207620 0.327354433 0.594015374 0.057681241 0.573056775 #> [2983] 0.035785878 0.530651242 0.054381443 0.491741168 0.046800736 0.050015037 #> [2989] 0.851734199 0.183071443 0.922209118 0.016718037 0.513421713 0.145250337 #> [2995] 0.031168965 0.028549488 0.031501788 0.028004728 0.029394282 0.112251452 #> [3001] 0.030644512 0.053752753 0.073145080 0.109859459 0.636653104 0.851301790 #> [3007] 0.707139368 0.933508254 0.369610657 0.022450186 0.125641533 0.409169108 #> [3013] 0.866179073 0.643869976 0.132742905 0.289247601 0.090522113 0.469561096 #> [3019] 0.027945184 0.023435378 0.080532995 0.088001908 0.092554326 0.703759778 #> [3025] 0.046281387 0.246110500 0.097719664 0.048524935 0.124728007 0.249440984 #> [3031] 0.056258390 0.964621671 0.034712278 0.216452314 0.163404217 0.247949985 #> [3037] 0.919448122 0.497292629 0.073367289 0.037207795 0.021369210 0.599196123 #> [3043] 0.024714428 0.053223192 0.240623398 0.550767769 0.032147448 0.055211095 #> [3049] 0.033962467 0.036405282 0.877149645 0.028961278 0.038806456 0.679606032 #> [3055] 0.027289920 0.070446191 0.025940154 0.015008639 0.595157809 0.024424758 #> [3061] 0.074186306 0.019453205 0.096776560 0.638280102 0.392301349 0.408898877 #> [3067] 0.077331951 0.077250900 0.048506780 0.237918024 0.019341137 0.033988786 #> [3073] 0.435255114 0.383980728 0.050708965 0.029451072 0.697267325 0.023974150 #> [3079] 0.200302438 0.142421795 0.021087482 0.020068112 0.734709165 0.591945179 #> [3085] 0.027679892 0.134533559 0.091702803 0.631954376 0.050339430 0.030600298 #> [3091] 0.060594364 0.041635856 0.687173696 0.047060136 0.383144588 0.761077694 #> [3097] 0.794201218 0.074327944 0.077365738 0.429403191 0.155414265 0.050927867 #> [3103] 0.249641846 0.026015277 0.059772564 0.136773475 0.897360723 0.028369912 #> [3109] 0.164385205 0.023251478 0.700022070 0.842429973 0.426873461 0.560846220 #> [3115] 0.864884362 0.098614525 0.156664838 0.581599583 0.024208065 0.092036514 #> [3121] 0.203739072 0.024951595 0.338181687 0.154035558 0.771578444 0.108628621 #> [3127] 0.815320984 0.198240777 0.248426563 0.599944422 0.384255645 0.096960105 #> [3133] 0.608127071 0.078430883 0.102758414 0.127031986 0.735818245 0.248940568 #> [3139] 0.387900745 0.543285780 0.022649715 0.030685808 0.127839869 0.016879227 #> [3145] 0.022309478 0.030914483 0.036796537 0.037023903 0.026074879 0.412942775 #> [3151] 0.048826099 0.897334776 0.542279568 0.030382508 0.944373107 0.853265944 #> [3157] 0.049748054 0.915134260 0.811782998 0.021661216 0.835546797 0.749756055 #> [3163] 0.093744159 0.099792673 0.496480697 0.608427041 0.504644971 0.650708203 #> [3169] 0.082493909 0.624240479 0.055320105 0.040270738 0.043007117 0.152506933 #> [3175] 0.030091304 0.078069827 0.058024365 0.187428264 0.748877612 0.033246187 #> [3181] 0.052636134 0.738165623 0.031721407 0.839194964 0.084439793 0.047007582 #> [3187] 0.627555094 0.620265379 0.044882273 0.726179911 0.103885132 0.094215309 #> [3193] 0.886258362 0.748442069 0.355056913 0.046657553 0.052806240 0.858281275 #> [3199] 0.109421139 0.045721511 0.478424994 0.708551676 0.050373240 0.056629811 #> [3205] 0.927766105 0.032860111 0.645593976 0.316106134 0.652949292 0.702115018 #> [3211] 0.086981384 0.508509814 0.051465158 0.592142208 0.908114874 0.056407479 #> [3217] 0.036690627 0.443521228 0.030993698 0.834287733 0.669899813 0.582387495 #> [3223] 0.587226323 0.080413753 0.043646806 0.023722173 0.660404357 0.430614426 #> [3229] 0.020582621 0.289248084 0.501878553 0.022589076 0.758840331 0.047570502 #> [3235] 0.055781296 0.029349193 0.975163636 0.132816362 0.124115394 0.017271585 #> [3241] 0.036610881 0.032493660 0.076521263 0.857508387 0.113251735 0.916846410 #> [3247] 0.781875263 0.116797906 0.615047015 0.665998621 0.240000246 0.338959909 #> [3253] 0.030029844 0.568642963 0.191115816 0.639853222 0.898731993 0.043527901 #> [3259] 0.175264287 0.097663478 0.216541792 0.645372823 0.080019802 0.102842969 #> [3265] 0.026954304 0.639605922 0.020046376 0.359862669 0.044986593 0.042951823 #> [3271] 0.754990470 0.630304321 0.031569350 0.903497245 0.069819021 0.133883114 #> [3277] 0.041352718 0.123387516 0.018933078 0.454093181 0.031141343 0.017040020 #> [3283] 0.256703717 0.042489286 0.833241847 0.086167020 0.381729377 0.197452144 #> [3289] 0.534460885 0.084595896 0.933152675 0.204706749 0.033463583 0.048280516 #> [3295] 0.406475631 0.079166132 0.250919620 0.060164175 0.039357338 0.392277957 #> [3301] 0.070241182 0.889932370 0.039690219 0.718743434 0.686394970 0.023112913 #> [3307] 0.089782458 0.029183982 0.065802363 0.390247287 0.827201403 0.042185397 #> [3313] 0.015685399 0.881947868 0.102499661 0.028648299 0.421017339 0.037886435 #> [3319] 0.048424587 0.778636405 0.178911374 0.927372206 0.057330373 0.625907944 #> [3325] 0.045711833 0.240789229 0.028223282 0.112884705 0.602614823 0.830445896 #> [3331] 0.110248823 0.032210799 0.880962149 0.738192222 0.577328363 0.202291090 #> [3337] 0.928837067 0.017676939 0.081001721 0.026749199 0.077745846 0.988712293 #> [3343] 0.485483396 0.810235703 0.057072325 0.032037766 0.357669772 0.070508215 #> [3349] 0.037198716 0.031338259 0.047669222 0.015542251 0.019148386 0.027356940 #> [3355] 0.107119264 0.051791816 0.784832398 0.072706848 0.026424722 0.038102018 #> [3361] 0.038707898 0.490187447 0.061445751 0.048310333 0.031397677 0.456390081 #> [3367] 0.735971774 0.035360165 0.065817485 0.115160451 0.049572793 0.113268271 #> [3373] 0.574204172 0.061714672 0.713783242 0.535082992 0.308866828 0.071481767 #> [3379] 0.212148075 0.110425896 0.851738391 0.019120065 0.045411604 0.026928412 #> [3385] 0.473853745 0.047117224 0.025806317 0.296572971 0.943392381 0.025839286 #> [3391] 0.774573255 0.045205660 0.088811134 0.729091048 0.727488587 0.044411433 #> [3397] 0.096067327 0.622298814 0.077030876 0.832787534 0.086600478 0.714405813 #> [3403] 0.477863951 0.399856182 0.480426713 0.116520947 0.691807696 0.332660562 #> [3409] 0.420535550 0.082753453 0.207488361 0.542443302 0.687457867 0.387365391 #> [3415] 0.044312530 0.209193259 0.054594736 0.076155157 0.668346029 0.021540379 #> [3421] 0.081089017 0.594172265 0.888239594 0.858380683 0.034227453 0.339743728 #> [3427] 0.020452160 0.045906205 0.523901428 0.780401648 0.630184751 0.022597290 #> [3433] 0.404902348 0.077001228 0.489543235 0.333462367 0.331250158 0.025500308 #> [3439] 0.025690645 0.634443534 0.650636147 0.048114850 0.053673359 0.039964197 #> [3445] 0.106481694 0.069112858 0.095735650 0.030721756 0.073333803 0.047932662 #> [3451] 0.382505904 0.026408438 0.043747429 0.076195167 0.786287736 0.101123401 #> [3457] 0.025250869 0.355695998 0.104816396 0.151599513 0.028375253 0.839345009 #> [3463] 0.102361420 0.467587662 0.333864585 0.220326700 0.075835811 0.546981822 #> [3469] 0.250597824 0.575541533 0.947800279 0.044905667 0.032605156 0.411132061 #> [3475] 0.056411085 0.025360059 0.024459226 0.068796273 0.089061493 0.164133445 #> [3481] 0.083954412 0.716029193 0.053419616 0.027652940 0.048744476 0.073312133 #> [3487] 0.936521891 0.175592462 0.869738069 0.312819056 0.773561874 0.804798266 #> [3493] 0.078288065 0.026593312 0.956592066 0.063718100 0.085110151 0.095353294 #> [3499] 0.087835888 0.352882289 0.026371990 0.805403282 0.666189581 0.045785675 #> [3505] 0.049208284 0.870859959 0.092980609 0.259138438 0.058294459 0.088225682 #> [3511] 0.547908754 0.157154748 0.026260189 0.720386186 0.084104859 0.511871951 #> [3517] 0.053399656 0.042939734 0.039999390 0.056873913 0.104780486 0.152462126 #> [3523] 0.029939577 0.156940528 0.039797274 0.148499328 0.835126202 0.813914868 #> [3529] 0.224702169 0.432260404 0.068443523 0.626840811 0.877945755 0.492680080 #> [3535] 0.119335825 0.184903276 0.115038357 0.517376709 0.017666278 0.111224237 #> [3541] 0.278195196 0.909050241 0.027756280 0.049093692 0.057643419 0.560465014 #> [3547] 0.437191211 0.544058800 0.597730390 0.102329852 0.051402539 0.266758805 #> [3553] 0.682112414 0.637920625 0.085435995 0.086642762 0.045096171 0.094792764 #> [3559] 0.043121881 0.097043824 0.546725056 0.046141605 0.096072831 0.026050773 #> [3565] 0.033239695 0.041095920 0.660144872 0.075313025 0.090104148 0.097550157 #> [3571] 0.031874508 0.035623692 0.037735638 0.505337714 0.628547189 0.241256077 #> [3577] 0.711934037 0.643117633 0.687429163 0.412734440 0.876580830 0.025063085 #> [3583] 0.334080960 0.022700244 0.984198310 0.034674369 0.018833941 0.484364101 #> [3589] 0.068569990 0.852814555 0.146366641 0.051312995 0.105463190 0.537795133 #> [3595] 0.028131220 0.099060080 0.109507489 0.096844163 0.627691944 0.617042783 #> [3601] 0.676085661 0.039524195 0.541630082 0.685068046 0.089455414 0.124277512 #> [3607] 0.829717459 0.018080757 0.575154913 0.086008815 0.029333931 0.863913500 #> [3613] 0.277420848 0.805784149 0.047671180 0.598627927 0.350288579 0.576696251 #> [3619] 0.047158814 0.367812071 0.030029159 0.026044781 0.928610373 0.893889649 #> [3625] 0.208237910 0.454249052 0.039833027 0.073569845 0.138789542 0.032344388 #> [3631] 0.033835536 0.044788929 0.039790596 0.067515499 0.519836923 0.035693839 #> [3637] 0.085618685 0.086338317 0.088270433 0.095038253 0.624831518 0.032018491 #> [3643] 0.196302735 0.059135032 0.038278732 0.887891037 0.049812065 0.413135672 #> [3649] 0.035966147 0.803188018 0.529210277 0.053078066 0.086262073 0.561882692 #> [3655] 0.195415521 0.026690159 0.077496534 0.388113680 0.447302409 0.003312211 #> [3661] 0.040694952 0.473149178 0.104567508 0.044126455 0.145512272 0.052932985 #> [3667] 0.859423343 0.302234552 0.553557001 0.056934079 0.067258740 0.204877070 #> [3673] 0.013160634 0.124324389 0.045444835 0.507889747 0.711303149 0.779388634 #> [3679] 0.845225322 0.049338768 0.038043760 0.119254694 0.033750202 0.042033824 #> [3685] 0.138636434 0.102538152 0.064888083 0.358000661 0.151168971 0.057168968 #> [3691] 0.860400200 0.035084379 0.064169926 0.034949545 0.781641462 0.198895287 #> [3697] 0.298215903 0.152381958 0.647451331 0.025987953 0.902193285 0.845698436 #> [3703] 0.022695778 0.056375364 0.818270958 0.022157703 0.205703023 0.149110941 #> [3709] 0.121922613 0.029412430 0.928846676 0.738806763 0.043310744 0.078714206 #> [3715] 0.648104053 0.042944580 0.832884249 0.679977170 0.198420984 0.037123578 #> [3721] 0.024001227 0.090182609 0.149932579 0.095868235 0.059948449 0.111508019 #> [3727] 0.045017883 0.024144714 0.443820375 0.021863597 0.606773543 0.031169225 #> [3733] 0.083426511 0.910946464 0.544733044 0.031554573 0.446759499 0.467289986 #> [3739] 0.097536472 0.340827983 0.381298602 0.126730543 0.252927740 0.039451196 #> [3745] 0.422150798 0.424601583 0.695159270 0.048061358 0.114514778 0.099440985 #> [3751] 0.674911824 0.093297292 0.030682429 0.387759981 0.042619347 0.069677216 #> [3757] 0.049603909 0.049909547 0.052447094 0.092268864 0.070050472 0.011677587 #> [3763] 0.069194771 0.021303481 0.478388886 0.054703170 0.034025629 0.103413880 #> [3769] 0.020266994 0.029101937 0.018048124 0.376265825 0.040631594 0.020244704 #> [3775] 0.803999249 0.539084525 0.293615572 0.712224331 0.600283926 0.147163284 #> [3781] 0.054004085 0.279979153 0.415713231 0.774408243 0.648527479 0.704873555 #> [3787] 0.710205839 0.612296864 0.044080202 0.050332965 0.640668561 0.039200941 #> [3793] 0.041272364 0.021437984 0.072009144 0.388836291 0.842498762 0.057395843 #> [3799] 0.397346841 0.599172740 0.121875223 0.040905005 0.067004801 0.026560963 #> [3805] 0.121823180 0.146795629 0.912686003 0.696765717 0.102037854 0.037819372 #> [3811] 0.705717706 0.803209204 0.022340089 0.024830420 0.112365441 0.560018154 #> [3817] 0.124216343 0.525362656 0.158063049 0.036845043 0.143582579 0.040283433 #> [3823] 0.049908833 0.114563296 0.071533160 0.016408288 0.680660980 0.137939968 #> [3829] 0.285662100 0.092379771 0.026895803 0.032071391 0.044467389 0.177816017 #> [3835] 0.608721512 0.094790802 0.055527716 0.176237358 0.193597009 0.784765265 #> [3841] 0.293391181 0.660993461 0.920562804 0.073844629 0.475978835 0.910731560 #> [3847] 0.477823465 0.515481944 0.041386208 0.097597550 0.938601929 0.147618766 #> [3853] 0.545964760 0.425182982 0.452333918 0.026764738 0.272075809 0.801207882 #> [3859] 0.048159450 0.660654405 0.143417897 0.066767171 0.643683662 0.552385319 #> [3865] 0.867385330 0.829064321 0.015247124 0.159396097 0.021878162 0.224967967 #> [3871] 0.115340556 0.024510636 0.068701671 0.158033861 0.322989432 0.040139851 #> [3877] 0.071701514 0.519579457 0.022993300 0.105064165 0.048669575 0.081572988 #> [3883] 0.158503242 0.062485565 0.546828791 0.049795974 0.029527884 0.103948580 #> [3889] 0.041073688 0.691537185 0.773783768 0.079161682 0.195414344 0.071539880 #> [3895] 0.031235026 0.268052467 0.510217870 0.908727241 0.754113751 0.069771906 #> [3901] 0.252710387 0.499494490 0.458909594 0.096423490 0.632577522 0.014768983 #> [3907] 0.074511204 0.048105796 0.921077229 0.037006088 0.039673233 0.095588212 #> [3913] 0.034836669 0.086558755 0.277030536 0.377543442 0.085575357 0.053898094 #> [3919] 0.034156788 0.062441564 0.017132229 0.146897911 0.016604034 0.146075834 #> [3925] 0.060057063 0.034997376 0.055770980 0.098753938 0.900033830 0.575390027 #> [3931] 0.030656025 0.028189048 0.561490502 0.022977407 0.236303359 0.034369904 #> [3937] 0.546914808 0.045318601 0.053415277 0.100812749 0.256730490 0.051870131 #> [3943] 0.696242387 0.003656634 0.536622756 0.024384056 0.636555694 0.091023693 #> [3949] 0.080762996 0.892676716 0.855620384 0.930797595 0.093851555 0.304104206 #> [3955] 0.132581940 0.715280302 0.048740212 0.795267187 0.066590461 0.102161494 #> [3961] 0.154480945 0.053139253 0.701591526 0.026443012 0.451906377 0.057473278 #> [3967] 0.023385333 0.023237723 0.055429734 0.072990882 0.374007931 0.720981324 #> [3973] 0.075366441 0.013753280 0.604055961 0.028942813 0.642614615 0.024553422 #> [3979] 0.262888582 0.580207678 0.125842248 0.034152504 0.760964290 0.020046891 #> [3985] 0.173057562 0.696554296 0.582745462 0.632969322 0.073255515 0.867077614 #> [3991] 0.377046764 0.020461025 0.231541585 0.081377761 0.030226362 0.051223294 #> [3997] 0.020259509 0.465022675 0.611427387 0.115678863 0.594212587 0.052258426 #> [4003] 0.158257263 0.059552181 0.094785300 0.043671089 0.101301599 0.155837852 #> [4009] 0.144077382 0.557230741 0.773174439 0.909235059 0.776869053 0.037184300 #> [4015] 0.512376077 0.097228381 0.072725934 0.085894477 0.058874952 0.099854137 #> [4021] 0.647536377 0.077159650 0.079991528 0.628722970 0.027463062 0.027673689 #> [4027] 0.243387007 0.230248215 0.030595483 0.140000684 0.777929272 0.024626996 #> [4033] 0.096224345 0.111603673 0.056978191 0.024184590 0.039748873 0.697251000 #> [4039] 0.563914752 0.028488629 0.058519913 0.787331888 0.135362778 0.122453602 #> [4045] 0.048728994 0.083049511 0.810416982 0.170420978 0.048008097 0.890332623 #> [4051] 0.439235304 0.147710536 0.030213061 0.096349411 0.087556792 0.696973690 #> [4057] 0.908838005 0.814297620 0.125689349 0.910889184 0.043684621 0.401367118 #> [4063] 0.102030933 0.745068508 0.068446335 0.281275970 0.115700913 0.425258760 #> [4069] 0.051938544 0.814131464 0.888555584 0.492803739 0.670673995 0.076600162 #> [4075] 0.389573585 0.773248579 0.115684438 0.469716244 0.622064395 0.726634262 #> [4081] 0.413589473 0.088127451 0.049743471 0.027535806 0.088261773 0.003714751 #> [4087] 0.116407241 0.025673310 0.863608538 0.073903835 0.729375286 0.910545755 #> [4093] 0.041877775 0.669448161 0.087787402 0.504846485 0.166656354 0.159321283 #> [4099] 0.128838802 0.022978964 0.754372204 0.022888922 0.662769458 0.386271385 #> [4105] 0.371966021 0.043173452 0.092876044 0.322302949 0.846411500 0.026678964 #> [4111] 0.042825711 0.030393650 0.158309071 0.024324861 0.687117377 0.059729334 #> [4117] 0.040551345 0.875948723 0.622854888 0.558504209 0.060373511 0.239665484 #> [4123] 0.075160392 0.299948963 0.024601255 0.037302200 0.030734238 0.031072502 #> [4129] 0.634782734 0.112334438 0.021739080 0.125140353 0.693378126 0.027784112 #> [4135] 0.038408342 0.802573124 0.079008205 0.038330551 0.437645761 0.384540721 #> [4141] 0.018207061 0.528211557 0.059005532 0.855678476 0.135927714 0.063290287 #> [4147] 0.035487201 0.371124462 0.061879953 0.077932455 0.461706651 0.027237112 #> [4153] 0.476990128 0.069634691 0.111293909 0.165804562 0.508840237 0.035456428 #> [4159] 0.048629105 0.080795667 0.010431043 0.018161210 0.044998722 0.018505729 #> [4165] 0.053910048 0.042210732 0.075227064 0.069326789 0.078540087 0.906913580 #> [4171] 0.039915095 0.089294336 0.082032121 0.029033643 0.045019142 0.120944073 #> [4177] 0.184126964 0.023368064 0.607158736 0.425845909 0.520845189 0.730294689 #> [4183] 0.026088478 0.594899401 0.095799984 0.036330183 0.313513204 0.082639385 #> [4189] 0.046175010 0.324880773 0.685743820 0.845217774 0.716999186 0.636284250 #> [4195] 0.022843660 0.051657652 0.100354323 0.658885174 0.051248538 0.043592633 #> [4201] 0.027671892 0.624466972 0.205143391 0.897843069 0.047900149 0.220133590 #> [4207] 0.621068451 0.057175138 0.705022536 0.553041967 0.045453436 0.414546751 #> [4213] 0.705273186 0.493970268 0.031408759 0.901087452 0.029022997 0.019436663 #> [4219] 0.318397868 0.044553653 0.015455492 0.752288658 0.034852444 0.374488070 #> [4225] 0.037690151 0.024846413 0.062752453 0.342966487 0.747625476 0.083103454 #> [4231] 0.567156273 0.724613416 0.038649630 0.024680243 0.802727899 0.301576414 #> [4237] 0.029197265 0.710114440 0.487968840 0.057932526 0.436712995 0.496742758 #> [4243] 0.309222693 0.029605803 0.514980813 0.531967197 0.108216661 0.746183688 #> [4249] 0.463747741 0.097702872 0.920994566 0.203971716 0.093556782 0.039689028 #> [4255] 0.423327085 0.085972816 0.406412218 0.244082599 0.071608201 0.021790253 #> [4261] 0.062451586 0.069339544 0.170872948 0.024553596 0.444478194 0.048841981 #> [4267] 0.411228093 0.122499966 0.365743877 0.701891412 0.070007872 0.055585622 #> [4273] 0.080216470 0.017340739 0.363821143 0.095091850 0.445721199 0.064610519 #> [4279] 0.024584333 0.053323772 0.717342420 0.489437218 0.676221205 0.019057471 #> [4285] 0.055286342 0.035782402 0.532861279 0.708069984 0.088590907 0.313292888 #> [4291] 0.856363139 0.825664702 0.430557705 0.088048359 0.246953613 0.741790632 #> [4297] 0.377991369 0.031397566 0.816995378 0.088848187 0.908306742 0.605122800 #> [4303] 0.123384358 0.079452244 0.120278240 0.024889430 0.041385979 0.034276106 #> [4309] 0.030649018 0.021893499 0.025909789 0.044419420 0.913768635 0.094425123 #> [4315] 0.062094744 0.052572105 0.903894078 0.026957554 0.762032270 0.092959203 #> [4321] 0.095126461 0.823650352 0.568289551 0.820349916 0.859430818 0.373949790 #> [4327] 0.515535403 0.925675909 0.075652357 0.073381927 0.305063962 0.052128799 #> [4333] 0.023529978 0.588308068 0.802282672 0.042843413 0.051336166 0.030741850 #> [4339] 0.593222225 0.022636802 0.376577874 0.048268966 0.071265343 0.022225710 #> [4345] 0.033182748 0.468627328 0.030706403 0.066356597 0.130478462 0.851740685 #> [4351] 0.029272579 0.253174432 0.863819784 0.129764399 0.044874425 0.047442005 #> [4357] 0.063459063 0.390447288 0.029448803 0.053271252 0.031440193 0.025976945 #> [4363] 0.056419324 0.060698469 0.097788625 0.558367433 0.829836491 0.060197346 #> [4369] 0.822579779 0.502832154 0.024866949 0.579007601 0.094027871 0.038955390 #> [4375] 0.038908905 0.033021906 0.102053480 0.061792110 0.043091731 0.064921212 #> [4381] 0.634942435 0.032715484 0.111720441 0.571583426 0.092949478 0.022465763 #> [4387] 0.643735878 0.077007656 0.017623604 0.487269647 0.146644878 0.048569388 #> [4393] 0.373221999 0.148050740 0.703476992 0.701895712 0.541168023 0.083242999 #> [4399] 0.053810070 0.035342835 0.880772042 0.017892974 0.016314562 0.090381650 #> [4405] 0.345034548 0.122475016 0.041067262 0.061197504 0.050687440 0.035456372 #> [4411] 0.499886850 0.031873600 0.587156308 0.036388874 0.900303393 0.057370611 #> [4417] 0.028672388 0.061721032 0.061666318 0.839719864 0.529121556 0.526443573 #> [4423] 0.797728591 0.710451319 0.043849206 0.145021842 0.408348968 0.677128104 #> [4429] 0.025692430 0.536190336 0.036335020 0.693196621 0.085402957 0.047839719 #> [4435] 0.065450988 0.690610901 0.206144171 0.903047929 0.468506769 0.866411299 #> [4441] 0.525286879 0.926605150 0.016511427 0.633762623 0.409100005 0.025685153 #> [4447] 0.021427687 0.043758252 0.020789376 0.042432103 0.024354367 0.136630208 #> [4453] 0.039316917 0.506877518 0.892815242 0.032561188 0.414171718 0.069447530 #> [4459] 0.910249116 0.777236746 0.320649422 0.042481030 0.328161589 0.832998846 #> [4465] 0.763908646 0.409200638 0.081707526 0.096447062 0.080661171 0.169388340 #> [4471] 0.382136044 0.029112453 0.048498891 0.024776824 0.745741890 0.048572667 #> [4477] 0.098118613 0.558939718 0.736556158 0.076352244 0.408568903 0.337976031 #> [4483] 0.047633562 0.031096539 0.604504442 0.037832683 0.026538426 0.129295032 #> [4489] 0.105817138 0.032230499 0.448558752 0.111484033 0.130060267 0.547718803 #> [4495] 0.088655501 0.043825114 0.097309222 0.423582233 0.630426691 0.026507513 #> [4501] 0.807966178 0.256262952 0.038189513 0.212827441 0.021989615 0.029404253 #> [4507] 0.056899736 0.133638675 0.025418317 0.138274159 0.915969743 0.035888830 #> [4513] 0.620705966 0.717793889 0.101657520 0.052026090 0.038354649 0.870298165 #> [4519] 0.021856219 0.149985849 0.046313190 0.274396890 0.038745649 0.565066544 #> [4525] 0.156184786 0.030308283 0.952720829 0.107404534 0.650795151 0.031000309 #> [4531] 0.262482190 0.051159939 0.836642253 0.155995649 0.527535250 0.174783661 #> [4537] 0.772800371 0.105941189 0.036397803 0.126195194 0.026886365 0.109662595 #> [4543] 0.082080788 0.077754230 0.272378602 0.381125624 0.646477973 0.424100929 #> [4549] 0.452256421 0.036026676 0.086325432 0.149499113 0.049676582 0.165990137 #> [4555] 0.135253908 0.043611100 0.052691635 0.003895895 0.599129052 0.668424884 #> [4561] 0.262145185 0.098741143 0.822140452 0.457960218 0.216401922 0.523683757 #> [4567] 0.629537377 0.055938624 0.888252625 0.496649366 0.764198744 0.504099418 #> [4573] 0.026347901 0.044285985 0.036464731 0.033079161 0.189490111 0.067244733 #> [4579] 0.169532672 0.493610608 0.080780143 0.085493335 0.027005679 0.885592292 #> [4585] 0.026132296 0.441044091 0.942236885 0.261033552 0.686867185 0.049759662 #> [4591] 0.547414594 0.037397699 0.024284644 0.388754241 0.044183547 0.207111162 #> [4597] 0.021254230 0.457214365 0.047681038 0.027344725 0.037273692 0.052677473 #> [4603] 0.120262712 0.026176453 0.102187623 0.436579303 0.599670200 0.784857947 #> [4609] 0.619051638 0.122312927 0.058995398 0.497267856 0.592488068 0.320900238 #> [4615] 0.025206881 0.040350616 0.479252087 0.025841612 0.140654337 0.025394163 #> [4621] 0.191492463 0.019685414 0.088022272 0.026277067 0.022335542 0.070678149 #> [4627] 0.879562575 0.047498985 0.991923502 0.653437041 0.036140737 0.683960508 #> [4633] 0.055264338 0.406960797 0.074308311 0.063848198 0.037689523 0.143501069 #> [4639] 0.456447265 0.100469745 0.028669052 0.104333087 0.320519301 0.651044470 #> [4645] 0.833341357 0.306824297 0.131447914 0.068881795 0.184248387 0.102986816 #> [4651] 0.751240251 0.254422207 0.244294335 0.049614377 0.051851311 0.945075868 #> [4657] 0.883768803 0.527532736 0.450638839 0.043220325 0.392518082 0.781683811 #> [4663] 0.392634977 0.319188736 0.149964941 0.139008544 0.553561665 0.532270429 #> [4669] 0.034329896 0.804140667 0.783644807 0.720347077 0.034636542 0.088299810 #> [4675] 0.080414962 0.262636963 0.241566800 0.432789331 0.274634822 0.265993364 #> [4681] 0.460769459 0.778744332 0.040499473 0.906059086 0.141619595 0.578207157 #> [4687] 0.093490335 0.606474982 0.017637289 0.061586845 0.887464411 0.063196808 #> [4693] 0.022381942 0.044653094 0.032517003 0.533482360 0.038820778 0.401435453 #> [4699] 0.034533980 0.025030288 0.029467661 0.679628222 0.403520222 0.768093906 #> [4705] 0.080308224 0.029043483 0.606744520 0.054497873 0.048348090 0.361084930 #> [4711] 0.286984669 0.102735442 0.444546021 0.051957644 0.790127700 0.080838288 #> [4717] 0.742282337 0.019620475 0.120835457 0.121683884 0.112249528 0.762123955 #> [4723] 0.452133425 0.504737419 0.193938677 0.043974996 0.032271545 0.200606977 #> [4729] 0.030757720 0.236195829 0.306983737 0.127385404 0.030652826 0.438243343 #> [4735] 0.142001532 0.715108257 0.178270834 0.226990701 0.051301945 0.153650272 #> [4741] 0.021290129 0.062691226 0.425118301 0.556074949 0.024085836 0.080692635 #> [4747] 0.057529559 0.172717521 0.113434028 0.065909536 0.618398260 0.651395483 #> [4753] 0.133812592 0.063837369 0.039751352 0.651512411 0.399370923 0.127348385 #> [4759] 0.574068588 0.869642306 0.050037545 0.018858150 0.044031039 0.562766278 #> [4765] 0.113691229 0.018300822 0.640345115 0.124929631 0.058784678 0.034880678 #> [4771] 0.158728903 0.433737933 0.430312143 0.027260822 0.067991212 0.116807517 #> [4777] 0.052932243 0.032280321 0.197932804 0.373727467 0.067955612 0.191121413 #> [4783] 0.761083113 0.776944851 0.102309033 0.534592527 0.048664201 0.568031041 #> [4789] 0.811152849 0.138706197 0.396315585 0.028055881 0.661896952 0.600387462 #> [4795] 0.424069693 0.156256932 0.018275105 0.761629435 0.652694091 0.869388151 #> [4801] 0.064518019 0.330256497 0.115700716 0.553344188 0.158228088 0.192013424 #> [4807] 0.063363780 0.544219638 0.960974165 0.266340098 0.785700179 0.036314574 #> [4813] 0.026195908 0.614587816 0.137086957 0.347908400 0.694494369 0.025371664 #> [4819] 0.030816849 0.133674125 0.512501868 0.019487212 0.612305083 0.017246596 #> [4825] 0.153307283 0.384174818 0.202429975 0.149540724 0.107693788 0.058319929 #> [4831] 0.083564636 0.079356049 0.029423666 0.508133829 0.097014214 0.034677956 #> [4837] 0.087692077 0.029245799 0.043358804 0.072165008 0.458559305 0.092920920 #> [4843] 0.591149076 0.086173279 0.060549949 0.359969208 0.060164000 0.670834348 #> [4849] 0.142526055 0.568950919 0.049396950 0.839238193 0.062614979 0.034076557 #> [4855] 0.344358712 0.450151211 0.084551502 0.028154439 0.045180178 0.671308876 #> [4861] 0.283312121 0.065046586 0.077247082 0.054016246 0.015692068 0.020645875 #> [4867] 0.036174034 0.274101445 0.018263096 0.026762408 0.017359933 0.397785493 #> [4873] 0.112351452 0.133269826 0.047626484 0.158391837 0.813321668 0.218303863 #> [4879] 0.062654215 0.131174105 0.037416744 0.062536870 0.926937763 0.028884736 #> [4885] 0.827538695 0.508191246 0.089288888 0.669084191 0.046741706 0.626136003 #> [4891] 0.033421723 0.028055302 0.044132841 0.037795588 0.044908047 0.661457242 #> [4897] 0.035876545 0.040011282 0.048211998 0.336340703 0.817796463 0.094989809 #> [4903] 0.026369423 0.049288536 0.536123282 0.501406939 0.078654170 0.029502756 #> [4909] 0.789895067 0.120354232 0.038108498 0.030396452 0.073867681 0.042193250 #> [4915] 0.225570539 0.912588173 0.574065525 0.045360794 0.185277366 0.033608369 #> [4921] 0.431881918 0.219163230 0.114684075 0.445973399 0.852500986 0.023793785 #> [4927] 0.162504775 0.450537200 0.709056323 0.310436434 0.910524418 0.580046610 #> [4933] 0.652736248 0.132966948 0.048665989 0.519163719 0.443583852 0.223563489 #> [4939] 0.613452856 0.263523163 0.044759389 0.474171673 0.045229872 0.268236009 #> [4945] 0.426348238 0.296982368 0.047255118 0.022471055 0.041397048 0.028748091 #> [4951] 0.840114304 0.040026305 0.041857753 0.681109496 0.690150663 0.666317731 #> [4957] 0.387430439 0.042712671 0.931145811 0.024331072 0.092637435 0.125396737 #> [4963] 0.908098397 0.027350373 0.028082347 0.099552538 0.214956994 0.405205333 #> [4969] 0.054131985 0.565913986 0.659564075 0.082780826 0.294882470 0.081920031 #> [4975] 0.085928780 0.100965697 0.028145671 0.101001183 0.323551733 0.645424036 #> [4981] 0.971498494 0.076548150 0.043291463 0.524605432 0.577143459 0.422493912 #> [4987] 0.037675704 0.286898847 0.042279284 0.210276586 0.063275166 0.031841523 #> [4993] 0.044184193 0.142387454 0.033783368 0.036205011 0.458719620 0.112510542 #> [4999] 0.037022513 0.038103246 0.062046949 0.729297412 0.141954443 0.697749085 #> [5005] 0.042541473 0.834796959 0.598816165 0.047242343 0.910608371 0.065618105 #> [5011] 0.781510458 0.025228733 0.032507737 0.579976347 0.628331947 0.130925719 #> [5017] 0.111030355 0.027814171 0.842308016 0.391557561 0.937761157 0.073143008 #> [5023] 0.044917830 0.047846316 0.092436517 0.051688318 0.669753736 0.035852456 #> [5029] 0.434704738 0.124035115 0.036514980 0.027156221 0.154887970 0.043702754 #> [5035] 0.055540231 0.100247599 0.694740040 0.038799650 0.074454450 0.150352456 #> [5041] 0.049443672 0.070206330 0.177725212 0.347901047 0.783871320 0.052763747 #> [5047] 0.077489784 0.050842072 0.035918748 0.637190866 0.585423485 0.066782096 #> [5053] 0.022880015 0.272851862 0.576678103 0.839201965 0.034164095 0.239141801 #> [5059] 0.475663391 0.055825852 0.540783246 0.162269276 0.395546721 0.366369748 #> [5065] 0.096431160 0.958865954 0.038157350 0.056809381 0.056330636 0.019218226 #> [5071] 0.110618657 0.759991417 0.051476998 0.043979611 0.083295640 0.640089172 #> [5077] 0.085279380 0.027747777 0.357138220 0.071429103  # Make logistic prediction for the whole study area predict(model,         data = predictors,         type = \"logistic\") #> class       : SpatRaster  #> size        : 192, 186, 1  (nrow, ncol, nlyr) #> resolution  : 0.5, 0.5  (x, y) #> extent      : -125, -32, -56, 40  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs  #> source(s)   : memory #> name        :        lyr1  #> min value   : 0.002222442  #> max value   : 0.837308896   if (FALSE) { # \\dontrun{ # Make logistic prediction for the whole study area and save it in a file. # Note that the filename must include the extension. The function saves the # file in your working directory predict(model,         data = predictors,         type = \"logistic\",         filename = \"my_map.tif\")} # }"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodelCV-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict for Cross Validation — predict,SDMmodelCV-method","title":"Predict for Cross Validation — predict,SDMmodelCV-method","text":"Predict output new dataset given trained SDMmodelCV model. output given provided function applied prediction k models.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodelCV-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict for Cross Validation — predict,SDMmodelCV-method","text":"","code":"# S4 method for class 'SDMmodelCV' predict(   object,   data,   fun = \"mean\",   type = NULL,   clamp = TRUE,   filename = \"\",   overwrite = FALSE,   wopt = list(),   extent = NULL,   progress = TRUE,   ... )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodelCV-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict for Cross Validation — predict,SDMmodelCV-method","text":"object SDMmodelCV object. data data.frame, SWD raster rast data prediction. fun character. Function used combine output k models. Note fun character argument, must use \"mean\" mean. can also pass vector character containing multiple function names, see details. type character. Output type, see details, used Maxent Maxnet methods. clamp logical clumping prediction, used Maxent Maxnet methods. filename character. provided raster map saved file. must include extension. overwrite logical. TRUE existing file overwritten. wopt list. Writing options passed writeRaster. extent ext object, provided restricts prediction given extent. progress logical. TRUE shows progress bar prediction. ... Additional arguments pass predict function.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodelCV-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict for Cross Validation — predict,SDMmodelCV-method","text":"vector prediction rast object data rast list case multiple functions.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodelCV-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict for Cross Validation — predict,SDMmodelCV-method","text":"filename, extent arguments used prediction run rast object. character vector passed fun argument, given functions applied named list returned, see examples. filename provided fun argument contains one function name, saved files named filename_fun, see example. models trained Maxent method argument type can : \"raw\", \"logistic\" \"cloglog\". function performs prediction R without calling MaxEnt Java software. results faster computation large datasets might result slightly different output compared Java software. models trained Maxnet method argument type can : \"link\", \"exponential\", \"logistic\" \"cloglog\", see maxnet details. models trained ANN method function uses \"raw\" output type. models trained RF method output probability class 1. models trained BRT method function uses number trees defined train model \"response\" output type.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodelCV-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict for Cross Validation — predict,SDMmodelCV-method","text":"Wilson P.D., (2009). Guidelines computing MaxEnt model output values lambdas file.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodelCV-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict for Cross Validation — predict,SDMmodelCV-method","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/predict-SDMmodelCV-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict for Cross Validation — predict,SDMmodelCV-method","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Create 4 random folds splitting only the presence data folds <- randomFolds(data,                      k = 4,                      only_presence = TRUE)  model <- train(method = \"Maxnet\",                data = data,                fc = \"l\",                folds = folds)  # Make cloglog prediction for the whole study area and get the result as # average of the k models predict(model,         data = predictors,         fun = \"mean\",         type = \"cloglog\") #> class       : SpatRaster  #> size        : 192, 186, 1  (nrow, ncol, nlyr) #> resolution  : 0.5, 0.5  (x, y) #> extent      : -125, -32, -56, 40  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs  #> source(s)   : memory #> name        :        mean  #> min value   : 0.003156557  #> max value   : 0.997560393   # Make cloglog prediction for the whole study area, get the average, standard # deviation, and maximum values of the k models, and save the output in three # files. # The following commands save the output in the working directory. Note that # the `filename` must include the extension if (FALSE) { # \\dontrun{ maps <- predict(model,                 data = predictors,                 fun = c(\"mean\", \"sd\", \"max\"),                 type = \"cloglog\",                 filename = \"prediction.tif\")  # In this case three files are created: prediction_mean.tif, # prediction_sd.tif and prediction_max.tif plotPred(maps$mean) plotPred(maps$sd) plotPred(maps$max)  # Make logistic prediction for the whole study area, given as standard # deviation of the k models, and save it in a file predict(model,         data = predictors,         fun = \"sd\",         type = \"logistic\",         filename = \"my_map.tif\")} # }"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/prepareSWD.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare an SWD object — prepareSWD","title":"Prepare an SWD object — prepareSWD","text":"Given coordinates, species' name environmental variables, function creates SWD object (sample data).","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/prepareSWD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare an SWD object — prepareSWD","text":"","code":"prepareSWD(   species,   env,   p = NULL,   a = NULL,   categorical = NULL,   verbose = TRUE )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/prepareSWD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare an SWD object — prepareSWD","text":"species character. name species. env rast containing environmental variables used extract values coordinate locations. p data.frame. coordinates presence locations. data.frame. coordinates absence/background locations. categorical vector indicating environmental variable categorical. verbose logical, TRUE prints informative messages.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/prepareSWD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare an SWD object — prepareSWD","text":"SWD object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/prepareSWD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare an SWD object — prepareSWD","text":"SWD object created way presence locations always absence/background locations.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/prepareSWD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare an SWD object — prepareSWD","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/prepareSWD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare an SWD object — prepareSWD","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create the SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>  data #>  #> ── Object of class: <SWD> ── #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomFolds.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Random Folds — randomFolds","title":"Create Random Folds — randomFolds","text":"Create random folds cross validation.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomFolds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Random Folds — randomFolds","text":"","code":"randomFolds(data, k, only_presence = FALSE, seed = NULL)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomFolds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Random Folds — randomFolds","text":"data SWD object used train model. k integer. Number fold used create partition. only_presence logical, TRUE random folds created presence locations background locations included fold, used manly presence-methods. seed integer. value used set seed fold partition.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomFolds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Random Folds — randomFolds","text":"list two matrices, first training second testing dataset. column one matrix represents fold TRUE locations included FALSE excluded partition.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomFolds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Random Folds — randomFolds","text":"only_presence = FALSE, proportion presence absence preserved.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomFolds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create Random Folds — randomFolds","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomFolds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Random Folds — randomFolds","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\", full.names = TRUE) predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  data <- prepareSWD(species = \"Virtual species\", p = p_coords, a = bg_coords,                    env = predictors, categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [21ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>   # Create 4 random folds splitting presence and absence locations folds <- randomFolds(data, k = 4)  # Create 4 random folds splitting only the presence locations folds <- randomFolds(data, k = 4, only_presence = TRUE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomSearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Search — randomSearch","title":"Random Search — randomSearch","text":"function performs random search hyperparameters space, creating population random models one random combination provided hyperparameters values.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomSearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Search — randomSearch","text":"","code":"randomSearch(   model,   hypers,   metric,   test = NULL,   pop = 20,   env = NULL,   interactive = TRUE,   progress = TRUE,   seed = NULL )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomSearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Search — randomSearch","text":"model SDMmodel SDMmodelCV object. hypers named list containing values hyperparameters tuned, see details. metric character. metric used evaluate models, possible values : \"auc\", \"tss\" \"aicc\". test SWD object. Test dataset used evaluate model, used aicc SDMmodelCV objects. pop numeric. Size population. env rast containing environmental variables, used \"aicc\". interactive logical. FALSE interactive chart created. progress logical. TRUE shows progress bar. seed numeric. value used set seed consistent results.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomSearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Search — randomSearch","text":"SDMtune object.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomSearch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Search — randomSearch","text":"know hyperparameters can tuned can use output function getTunableArgs. Hyperparameters included hypers argument take value passed model. interactive chart showing real-time steps performed algorithm displayed Viewer pane.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomSearch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random Search — randomSearch","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/randomSearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Search — randomSearch","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"l\")  # Define the hyperparameters to test h <- list(reg = seq(0.2, 3, 0.2),           fc = c(\"lqp\", \"lqph\", \"lh\"))  # Run the function using as metric the AUC output <- randomSearch(model,                        hypers = h,                        metric = \"auc\",                        test = test,                        pop = 10,                        seed = 25) #> Random Search  ■■■■■■                            18% | ETA: 10s - 00:00:2.2 #> Random Search  ■■■■■■■■■                         27% | ETA: 12s - 00:00:4.3 #> Random Search  ■■■■■■■■■■■■■■■                   45% | ETA:  8s - 00:00:6.5 #> Random Search  ■■■■■■■■■■■■■■■■■■■■■■■           73% | ETA:  4s - 00:00:9.9 #> Random Search  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s - 00:00:12.1 #>  output@results #>      fc reg train_AUC  test_AUC   diff_AUC #> 1  lqph 0.6 0.8760250 0.8585438 0.01748125 #> 2   lqp 0.2 0.8672750 0.8491838 0.01809125 #> 3   lqp 0.6 0.8661869 0.8478237 0.01836313 #> 4    lh 1.6 0.8672450 0.8472962 0.01994875 #> 5  lqph 1.8 0.8675938 0.8465187 0.02107500 #> 6  lqph 2.0 0.8668737 0.8459737 0.02090000 #> 7    lh 2.4 0.8635994 0.8453413 0.01825812 #> 8  lqph 2.8 0.8641188 0.8443938 0.01972500 #> 9   lqp 1.2 0.8646050 0.8436613 0.02094375 #> 10  lqp 1.8 0.8628238 0.8407587 0.02206500 output@models #> [[1]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqph\" #> • reg: 0.6 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[2]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqp\" #> • reg: 0.2 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[3]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqp\" #> • reg: 0.6 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[4]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lh\" #> • reg: 1.6 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[5]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqph\" #> • reg: 1.8 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[6]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqph\" #> • reg: 2 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[7]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lh\" #> • reg: 2.4 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[8]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqph\" #> • reg: 2.8 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[9]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqp\" #> • reg: 1.2 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>  #> [[10]] #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Maxnet #>  #> ── Hyperparameters  #> • fc: \"lqp\" #> • reg: 1.8 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 320 #> • Absence locations: 5000 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", \"bio5\", \"bio6\", \"bio7\", and #> \"bio8\" #> • Categorical: \"biome\" #>   # Order results by highest test AUC output@results[order(-output@results$test_AUC), ] #>      fc reg train_AUC  test_AUC   diff_AUC #> 1  lqph 0.6 0.8760250 0.8585438 0.01748125 #> 2   lqp 0.2 0.8672750 0.8491838 0.01809125 #> 3   lqp 0.6 0.8661869 0.8478237 0.01836313 #> 4    lh 1.6 0.8672450 0.8472962 0.01994875 #> 5  lqph 1.8 0.8675938 0.8465187 0.02107500 #> 6  lqph 2.0 0.8668737 0.8459737 0.02090000 #> 7    lh 2.4 0.8635994 0.8453413 0.01825812 #> 8  lqph 2.8 0.8641188 0.8443938 0.01972500 #> 9   lqp 1.2 0.8646050 0.8436613 0.02094375 #> 10  lqp 1.8 0.8628238 0.8407587 0.02206500"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/reduceVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce Variables — reduceVar","title":"Reduce Variables — reduceVar","text":"Remove variables whose importance less given threshold. function removes one variable time trains new model get new variable contribution rank. use_jk TRUE function checks removing variable model performance decreases (according given metric based starting model). case function stops removing variable even contribution lower given threshold.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/reduceVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce Variables — reduceVar","text":"","code":"reduceVar(   model,   th,   metric,   test = NULL,   env = NULL,   use_jk = FALSE,   permut = 10,   use_pc = FALSE,   interactive = TRUE,   verbose = TRUE )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/reduceVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce Variables — reduceVar","text":"model SDMmodel SDMmodelCV object. th numeric. contribution threshold used remove variables. metric character. metric used evaluate models, possible values : \"auc\", \"tss\" \"aicc\", used use_jk TRUE. test SWD object containing test dataset used evaluate model, used aicc, use_jk = FALSE. env rast containing environmental variables, used \"aicc\". use_jk Flag use Jackknife AUC test variable selection, FALSE function uses percent variable contribution. permut integer. Number permutations, used use_pc = FALSE. use_pc logical. TRUE model trained using Maxent method, algorithm uses percent contribution computed Maxent software score variable importance. interactive logical. FALSE interactive chart created. verbose logical. TRUE prints informative messages.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/reduceVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce Variables — reduceVar","text":"model trained using selected variables.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/reduceVar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reduce Variables — reduceVar","text":"interactive chart showing real-time steps performed algorithm displayed Viewer pane.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/reduceVar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reduce Variables — reduceVar","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/reduceVar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce Variables — reduceVar","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [46ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a Maxnet model model <- train(method = \"Maxnet\",                data = train,                fc = \"lq\")  # Remove all variables with permuation importance lower than 2% output <- reduceVar(model,                     th = 2,                     metric = \"auc\",                     test = test,                     permut = 1) #> ✔ The variables bio16, bio6, and bio17 have been removed  # Remove variables with permuation importance lower than 3% only if testing # TSS doesn't decrease if (FALSE) { # \\dontrun{ output <- reduceVar(model,                     th = 3,                     metric = \"tss\",                     test = test,                     permut = 1,                     use_jk = TRUE)  # Remove variables with permuation importance lower than 2% only if AICc # doesn't increase output <- reduceVar(model,                     th = 2,                     metric = \"aicc\",                     permut = 1,                     use_jk = TRUE,                     env = predictors)  # Train a Maxent model model <- train(method = \"Maxent\",                data = train,                fc = \"lq\")  # Remove all variables with percent contribution lower than 2% output <- reduceVar(model,                     th = 2,                     metric = \"auc\",                     test = test,                     use_pc = TRUE)} # }"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/swd2csv.html","id":null,"dir":"Reference","previous_headings":"","what":"SWD to csv — swd2csv","title":"SWD to csv — swd2csv","text":"Save SWD object csv file.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/swd2csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SWD to csv — swd2csv","text":"","code":"swd2csv(swd, file_name)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/swd2csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SWD to csv — swd2csv","text":"swd SWD object. file_name character. name file save object, see details.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/swd2csv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SWD to csv — swd2csv","text":"file_name argument include extension (.e. my_file.csv). file_name single name function saves presence absence/background locations single file, adding column pa 1s presence 0s absence/background locations. file_name vector two names, saves object two files: first name used presence locations second absence/background locations.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/swd2csv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SWD to csv — swd2csv","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/swd2csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SWD to csv — swd2csv","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>  if (FALSE) { # \\dontrun{ # The following commands save the output in the working directory # Save the SWD object as a single csv file swd2csv(data,         file_name = \"train_data.csv\")  # Save the SWD object in two separate csv files swd2csv(data,         file_name = c(\"presence.csv\", \"absence.csv\"))} # }"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thinData.html","id":null,"dir":"Reference","previous_headings":"","what":"Thin Data — thinData","title":"Thin Data — thinData","text":"Remove one location per raster cell. function removes NAs one location falls within raster cell selects randomly one.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thinData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thin Data — thinData","text":"","code":"thinData(coords, env, x = \"x\", y = \"y\", verbose = TRUE, progress = TRUE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thinData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thin Data — thinData","text":"coords data.frame matrix coordinates, see details. env rast containing environmental variables. x character. Name column containing x coordinates. y character. Name column containing y coordinates. verbose logical, TRUE prints informative message. progress logical, TRUE shows progress bar.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thinData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thin Data — thinData","text":"matrix data frame thinned locations.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thinData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Thin Data — thinData","text":"coords env must coordinate reference system. coords argument can contain several columns. useful user information related coordinates want loose thinning procedure. function expects x coordinates column named \"x\", y coordinates column named \"y\". case, name columns containing coordinates can specified using arguments x y.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thinData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Thin Data — thinData","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thinData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thin Data — thinData","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare background locations, by sampling  also on areas with NA values bg_coords <- terra::spatSample(predictors,                                size = 9000,                                method = \"random\",                                xy = TRUE,                                values = FALSE) nrow(bg_coords) #> [1] 9000  # Thin the locations # The function will remove the coordinates that have NA values for some # predictors. Note that the function expects to have the coordinates in two # columns named \"x\" and \"y\"  colnames(bg_coords) #> [1] \"x\" \"y\" thinned_bg <- thinData(bg_coords,                        env = predictors) #> ✔ Removed -6438 NAs and no duplicated locations nrow(thinned_bg) #> [1] 2562  # Here we sample only on areas without NA values and then we double the # coordinates bg_coords <- terra::spatSample(predictors,                                size = 9000,                                method = \"random\",                                na.rm = TRUE,                                xy = TRUE,                                values = FALSE)  thinned_bg <- thinData(rbind(bg_coords, bg_coords),                        env = predictors) #> ✔ Removed no NAs and 9000 duplicated locations  nrow(thinned_bg) #> [1] 9000  # In case of a dataframe containing more than two columns (e.g. a dataframe # with the coordinates plus an additional column with the age of the species) # and custom column names, use the function in this way age <- sample(c(1, 2),               size = nrow(bg_coords),               replace = TRUE)  data <- cbind(age, bg_coords) colnames(data) <- c(\"age\", \"X\", \"Y\")  thinned_bg <- thinData(data,                        env = predictors,                        x = \"X\",                        y = \"Y\") #> ✔ Removed no NAs and no duplicated locations head(data) #>      age      X      Y #> [1,]   1 -92.75  30.75 #> [2,]   1 -57.25 -18.25 #> [3,]   2 -59.25 -13.75 #> [4,]   2 -52.25 -17.75 #> [5,]   1 -87.75  19.75 #> [6,]   2 -41.75 -19.25"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thresholds.html","id":null,"dir":"Reference","previous_headings":"","what":"Thresholds — thresholds","title":"Thresholds — thresholds","text":"Compute three threshold values: minimum training presence, equal training sensitivity specificity maximum training sensitivity plus specificity together fractional predicted area omission rate. test dataset provided returns also equal test sensitivity specificity maximum test sensitivity plus specificity thresholds p-values one-tailed binomial exact test.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thresholds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thresholds — thresholds","text":"","code":"thresholds(model, type = NULL, test = NULL)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thresholds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thresholds — thresholds","text":"model SDMmodel object. type character. output type used \"Maxent\" \"Maxnet\" methods, possible values \"cloglog\" \"logistic\". test SWD testing locations, provided returns training test thresholds.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thresholds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thresholds — thresholds","text":"data.frame thresholds.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thresholds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Thresholds — thresholds","text":"equal training sensitivity specificity minimizes difference sensitivity specificity. one-tailed binomial test checks test points predicted better random prediction fractional predicted area.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thresholds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Thresholds — thresholds","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/thresholds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thresholds — thresholds","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"l\")  # Get the cloglog thresholds thresholds(model,            type = \"cloglog\") #>                                       Threshold Cloglog value #> 1                     Minimum training presence    0.08913867 #> 2    Equal training sensitivity and specificity    0.49192908 #> 3 Maximum training sensitivity plus specificity    0.29045251 #>   Fractional predicted area Training omission rate #> 1                    0.5332               0.000000 #> 2                    0.2376               0.237500 #> 3                    0.3412               0.059375  # Get the logistic thresholds passing the test dataset thresholds(model,            type = \"logistic\",            test = test) #>                                       Threshold Logistic value #> 1                     Minimum training presence     0.08539202 #> 2    Equal training sensitivity and specificity     0.40374481 #> 3 Maximum training sensitivity plus specificity     0.25546924 #> 4        Equal test sensitivity and specificity     0.36816416 #> 5     Maximum test sensitivity plus specificity     0.21103523 #>   Fractional predicted area Training omission rate Test omission rate P-values #> 1                    0.5332               0.000000       0.0000000000        0 #> 2                    0.2376               0.237500       0.0045275591        0 #> 3                    0.3412               0.059375       0.0019685039        0 #> 4                    0.2618               0.190625       0.0041338583        0 #> 5                    0.3736               0.043750       0.0005905512        0"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/train.html","id":null,"dir":"Reference","previous_headings":"","what":"Train — train","title":"Train — train","text":"Train model using one following methods: Artificial Neural Networks, Boosted Regression Trees, Maxent, Maxnet Random Forest.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train — train","text":"","code":"train(method, data, folds = NULL, progress = TRUE, ...)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train — train","text":"method character character vector. Method used train model, possible values \"ANN\", \"BRT\", \"Maxent\", \"Maxnet\" \"RF\", see details. data SWD object presence absence/background locations. folds list. Output function randomFolds folds object created packages, see details. progress logical. TRUE shows progress bar cross validation. ... Arguments passed relative method, see details.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train — train","text":"SDMmodel SDMmodelCV list model objects.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/train.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Train — train","text":"ANN method possible arguments (details see nnet): size: integer. Number units hidden layer. decay numeric. Weight decay, default 0. rang numeric. Initial random weights, default 0.7. maxit integer. Maximum number iterations, default 100. BRT method possible arguments (details see gbm): distribution: character. Name distribution use, default \"bernoulli\". n.trees: integer. Maximum number tree grow, default 100. interaction.depth: integer. Maximum depth tree, default 1. shrinkage: numeric. shrinkage parameter, default 0.1. bag.fraction: numeric. Random fraction data used tree expansion, default 0.5. RF method model trained classification. Possible arguments (details see randomForest): mtry: integer. Number variable randomly sampled split, default floor(sqrt(number variables)). ntree: integer. Number tree grow, default 500. nodesize: integer. Minimum size terminal nodes, default 1. Maxent models trained using arguments \"removeduplicates=false\" \"addsamplestobackground=false\". Use function thinData remove duplicates function addSamplesToBg add presence locations background locations. Maxent method, possible arguments : reg: numeric. value regularization multiplier, default 1. fc: character. value feature classes, possible values combinations \"l\", \"q\", \"p\", \"h\" \"t\", default \"lqph\". iter: numeric. Number iterations used MaxEnt algorithm, default 500. Maxnet models trained using argument \"addsamplestobackground = FALSE\", use function addSamplesToBg add presence locations background locations. Maxnet method, possible arguments (details see maxnet): reg: numeric. value regularization intensity, default 1. fc: character. value feature classes, possible values combinations \"l\", \"q\", \"p\", \"h\" \"t\", default \"lqph\". folds argument accepts also objects created packages: ENMeval blockCV. case function converts internally folds format valid SDMtune. multiple methods given method argument, function returns named list model object, name corresponding used method, see examples.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/train.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Train — train","text":"Venables, W. N. & Ripley, B. D. (2002) Modern Applied Statistics S. Fourth Edition. Springer, New York. ISBN 0-387-95457-0. Brandon Greenwell, Bradley Boehmke, Jay Cunningham GBM Developers (2019). gbm: Generalized Boosted Regression Models. https://CRAN.R-project.org/package=gbm. . Liaw M. Wiener (2002). Classification Regression randomForest. R News 2(3), 18–22. Hijmans, Robert J., Steven Phillips, John Leathwick, Jane Elith. 2017. dismo: Species Distribution Modeling. https://cran.r-project.org/package=dismo. Steven Phillips (2017). maxnet: Fitting 'Maxent' Species Distribution Models 'glmnet'. https://CRAN.R-project.org/package=maxnet. Muscarella, R., Galante, P.J., Soley-Guardia, M., Boria, R.., Kass, J., Uriarte, M. R.P. Anderson (2014). ENMeval: R package conducting spatially independent evaluations estimating optimal model complexity ecological niche models. Methods Ecology Evolution. Roozbeh Valavi, Jane Elith, José Lahoz-Monfort Gurutzeta Guillera-Arroita (2018). blockCV: Spatial environmental blocking k-fold cross-validation. https://github.com/rvalavi/blockCV.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/train.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train — train","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train — train","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>   ## Train a Maxent model model <- train(method = \"Maxent\",                data = data,                fc = \"l\",                reg = 1.5,                iter = 700)  # Add samples to background. This should be done preparing the data before # training the model without using data <- addSamplesToBg(data) model <- train(\"Maxent\",                data = data)  ## Train a Maxnet model model <- train(method = \"Maxnet\",                data = data,                fc = \"lq\",                reg = 1.5)  ## Cross Validation # Create 4 random folds splitting only the presence data folds <- randomFolds(data,                      k = 4,                      only_presence = TRUE)  model <- train(method = \"Maxnet\",                data = data,                fc = \"l\",                reg = 0.8,                folds = folds)  if (FALSE) { # \\dontrun{ # Run only if you have the package ENMeval installed ## Block partition using the ENMeval package require(ENMeval) block_folds <- get.block(occ = data@coords[data@pa == 1, ],                          bg.coords = data@coords[data@pa == 0, ])  model <- train(method = \"Maxnet\",                data = data,                fc = \"l\",                reg = 0.8,                folds = block_folds)  ## Checkerboard1 partition using the ENMeval package cb_folds <- get.checkerboard1(occ = data@coords[data@pa == 1, ],                               env = predictors,                               bg.coords = data@coords[data@pa == 0, ],                               aggregation.factor = 4)  model <- train(method = \"Maxnet\",                data = data,                fc = \"l\",                reg = 0.8,                folds = cb_folds)  ## Environmental block using the blockCV package # Run only if you have the package blockCV require(blockCV) # Create sf object sf_df <- sf::st_as_sf(cbind(data@coords, pa = data@pa),                       coords = c(\"X\", \"Y\"),                       crs = terra::crs(predictors,                                        proj = TRUE))  # Spatial blocks spatial_folds <- cv_spatial(x = sf_df,                             column = \"pa\",                             rows_cols = c(8, 10),                             k = 5,                             hexagon = FALSE,                             selection = \"systematic\")  model <- train(method = \"Maxnet\",                data = data,                fc = \"l\",                reg = 0.8,                folds = spatial_folds)} # }  ## Train presence absence models # Prepare presence and absence locations p_coords <- virtualSp$presence a_coords <- virtualSp$absence # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = a_coords,                    env = predictors[[1:5]]) #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [26ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [25ms] #>   ## Train an Artificial Neural Network model model <- train(\"ANN\",                data = data,                size = 10)  ## Train a Random Forest model model <- train(\"RF\",                data = data,                ntree = 300)  ## Train a Boosted Regression Tree model model <- train(\"BRT\",                data = data,                n.trees = 300,                shrinkage = 0.001)  ## Multiple methods trained together with default arguments output <- train(method = c(\"ANN\", \"BRT\", \"RF\"),                 data = data,                 size = 10) output$ANN #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Artificial Neural Networks #>  #> ── Hyperparameters  #> • size: 10 #> • decay: 0 #> • rang: 0.7 #> • maxit: 100 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 300 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", and \"bio5\" #> • Categorical: NA output$BRT #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Boosted Regression Trees #>  #> ── Hyperparameters  #> • distribution: \"bernoulli\" #> • n.trees: 100 #> • interaction.depth: 1 #> • shrinkage: 0.1 #> • bag.fraction: 0.5 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 300 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", and \"bio5\" #> • Categorical: NA output$RF #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Random Forest #>  #> ── Hyperparameters  #> • mtry: 2 #> • ntree: 500 #> • nodesize: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 300 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", and \"bio5\" #> • Categorical: NA  ## Multiple methods trained together passing extra arguments output <- train(method = c(\"ANN\", \"BRT\", \"RF\"),                 data = data,                 size = 10,                 ntree = 300,                 n.trees = 300,                 shrinkage = 0.001) output #> $ANN #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Artificial Neural Networks #>  #> ── Hyperparameters  #> • size: 10 #> • decay: 0 #> • rang: 0.7 #> • maxit: 100 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 300 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", and \"bio5\" #> • Categorical: NA #>  #> $BRT #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Boosted Regression Trees #>  #> ── Hyperparameters  #> • distribution: \"bernoulli\" #> • n.trees: 300 #> • interaction.depth: 1 #> • shrinkage: 0.001 #> • bag.fraction: 0.5 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 300 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", and \"bio5\" #> • Categorical: NA #>  #> $RF #>  #> ── Object of class: <SDMmodel> ── #>  #> Method: Random Forest #>  #> ── Hyperparameters  #> • mtry: 2 #> • ntree: 300 #> • nodesize: 1 #>  #> ── Info  #> • Species: Virtual species #> • Presence locations: 400 #> • Absence locations: 300 #>  #> ── Variables  #> • Continuous: \"bio1\", \"bio12\", \"bio16\", \"bio17\", and \"bio5\" #> • Categorical: NA #>"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/trainValTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Train, Validation and Test datasets — trainValTest","title":"Train, Validation and Test datasets — trainValTest","text":"Split dataset randomly training testing datasets training, validation testing datasets.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/trainValTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train, Validation and Test datasets — trainValTest","text":"","code":"trainValTest(x, test, val = 0, only_presence = FALSE, seed = NULL)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/trainValTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train, Validation and Test datasets — trainValTest","text":"x SWD object containing data split training, validation testing datasets. test numeric. percentage data withhold testing. val numeric. percentage data withhold validation, default 0. only_presence logical. TRUE split done presence locations background locations included partition, used manly presence-methods, default FALSE. seed numeric. value used set seed order consistent results, default NULL.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/trainValTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train, Validation and Test datasets — trainValTest","text":"list training, validation testing training testing SWD objects accordingly.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/trainValTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Train, Validation and Test datasets — trainValTest","text":"only_presence = FALSE, proportion presence absence preserved.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/trainValTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train, Validation and Test datasets — trainValTest","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/trainValTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train, Validation and Test datasets — trainValTest","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [21ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>   # Split presence locations in training (80%) and testing (20%) datasets # and splitting only the presence locations datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Split presence locations in training (60%), validation (20%) and testing # (20%) datasets and splitting the presence and the absence locations datasets <- trainValTest(data,                          val = 0.2,                          test = 0.2) train <- datasets[[1]] val <- datasets[[2]] test <- datasets[[3]]"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/tss.html","id":null,"dir":"Reference","previous_headings":"","what":"True Skill Statistics — tss","title":"True Skill Statistics — tss","text":"Compute max TSS given model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/tss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"True Skill Statistics — tss","text":"","code":"tss(model, test = NULL)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/tss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"True Skill Statistics — tss","text":"model SDMmodel SDMmodelCV object. test SWD object model SDMmodel object; logical SWD object model SDMmodelCV object. provided computes training TSS, see details.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/tss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"True Skill Statistics — tss","text":"value TSS given model.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/tss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"True Skill Statistics — tss","text":"SDMmodelCV objects, function computes mean training TSS values k-folds. test = TRUE computes mean testing TSS values k-folds. test SWD object, computes mean TSS values provided testing dataset.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/tss.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"True Skill Statistics — tss","text":"Allouche O., Tsoar ., Kadmon R., (2006). Assessing accuracy species distribution models: prevalence, kappa true skill statistic (TSS). Journal Applied Ecology, 43(6), 1223–1232.","code":""},{"path":[]},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/tss.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"True Skill Statistics — tss","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/tss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"True Skill Statistics — tss","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [21ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [48ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"l\")  # Compute the training TSS tss(model) #> [1] 0.596675  # Compute the testing TSS tss(model,     test = test) #> [1] 0.5379  # Same example but using cross validation instead of training and # testing datasets. Create 4 random folds splitting only the presence # locations folds = randomFolds(train,                     k = 4,                     only_presence = TRUE)  model <- train(method = \"Maxnet\",                data = train,                fc = \"l\",                folds = folds)  # Compute the training TSS tss(model) #> [1] 0.600125  # Compute the testing TSS tss(model,     test = TRUE) #> [1] 0.596725  # Compute the TSS for the held apart testing dataset tss(model,     test = test) #> [1] 0.5446"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varImp.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Importance — varImp","title":"Variable Importance — varImp","text":"function randomly permutes one variable time (using training absence/background datasets) computes decrease training AUC. result normalized percentages. implementation MaxEnt java software additional possibility running several permutations obtain better estimate permutation importance. case one permutation (default 10) average decrease training AUC computed.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varImp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable Importance — varImp","text":"","code":"varImp(model, permut = 10, progress = TRUE)"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varImp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable Importance — varImp","text":"model SDMmodel SDMmodelCV object. permut integer. Number permutations. progress logical. TRUE shows progress bar.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varImp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable Importance — varImp","text":"data.frame ordered permutation importance.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varImp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variable Importance — varImp","text":"Note return values slightly different MaxEnt Java software due different random permutation. SDMmodelCV objects function returns average standard deviation permutation importances single models.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varImp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variable Importance — varImp","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varImp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable Importance — varImp","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [20ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"l\")  # Compute variable importance vi <- varImp(model,              permut = 5) vi #>   Variable Permutation_importance    sd #> 1     bio6                   46.1 0.007 #> 2     bio8                   29.3 0.004 #> 3    biome                   12.9 0.005 #> 4    bio12                    9.0 0.003 #> 5     bio5                    2.3 0.001 #> 6     bio1                    0.4 0.001 #> 7    bio16                    0.0 0.000 #> 8    bio17                    0.0 0.000 #> 9     bio7                    0.0 0.000  # Same example but using cross validation instead of training and testing # datasets # Create 4 random folds splitting only the presence locations folds = randomFolds(data,                     k = 4,                     only_presence = TRUE)  model <- train(method = \"Maxnet\",                data = data,                fc = \"l\",                folds = folds)  # Compute variable importance vi <- varImp(model,              permut = 5) #> Variable importance  ■■■■■■■■■■■■■                     39% | ETA:  2s - 00:00:1… #> Variable importance  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s - 00:00:2… #>  vi #>   Variable Permutation_importance     sd #> 1     bio6                 60.575 12.898 #> 2     bio8                 19.900 10.478 #> 3    biome                 10.900  6.154 #> 4    bio12                  6.825  2.350 #> 5     bio5                  1.700  1.990 #> 6    bio17                  0.175  0.287 #> 7     bio1                  0.000  0.000 #> 8    bio16                  0.000  0.000 #> 9     bio7                  0.000  0.000"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varSel.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Selection — varSel","title":"Variable Selection — varSel","text":"function performs data-driven variable selection. Starting provided model iterates variables starting one highest contribution (permutation importance maxent percent contribution). variable correlated variables (according given method threshold) performs Jackknife test among correlated variables removes one results best performing model removed (according given metric training dataset). process repeated remaining variables highly correlated anymore.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varSel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable Selection — varSel","text":"","code":"varSel(   model,   metric,   bg4cor,   test = NULL,   env = NULL,   method = \"spearman\",   cor_th = 0.7,   permut = 10,   use_pc = FALSE,   interactive = TRUE,   progress = TRUE,   verbose = TRUE )"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varSel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable Selection — varSel","text":"model SDMmodel SDMmodelCV object. metric character. metric used evaluate models, possible values : \"auc\", \"tss\" \"aicc\". bg4cor SWD object. Background locations used test correlation environmental variables. test SWD. Test dataset used evaluate model, used aicc SDMmodelCV objects. env rast containing environmental variables, used \"aicc\". method character. method used compute correlation matrix. cor_th numeric. correlation threshold used select highly correlated variables. permut integer. Number permutations. use_pc logical, use percent contribution. TRUE model trained using Maxent method, algorithm uses percent contribution computed Maxent software score variable importance. interactive logical. FALSE interactive chart created. progress logical. TRUE shows progress bar. verbose logical. TRUE prints informative messages.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varSel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable Selection — varSel","text":"SDMmodel SDMmodelCV object trained using selected variables.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varSel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variable Selection — varSel","text":"interactive chart showing real-time steps performed algorithm displayed Viewer pane. find highly correlated variables following formula used: $$| coeff | \\le cor_th$$","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varSel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variable Selection — varSel","text":"Sergio Vignali","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/varSel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable Selection — varSel","text":"","code":"# Acquire environmental variables files <- list.files(path = file.path(system.file(package = \"dismo\"), \"ex\"),                     pattern = \"grd\",                     full.names = TRUE)  predictors <- terra::rast(files)  # Prepare presence and background locations p_coords <- virtualSp$presence bg_coords <- virtualSp$background  # Create SWD object data <- prepareSWD(species = \"Virtual species\",                    p = p_coords,                    a = bg_coords,                    env = predictors,                    categorical = \"biome\") #> ℹ Extracting predictor information for presence locations #> ✔ Extracting predictor information for presence locations [21ms] #>  #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [47ms] #>   # Split presence locations in training (80%) and testing (20%) datasets datasets <- trainValTest(data,                          test = 0.2,                          only_presence = TRUE) train <- datasets[[1]] test <- datasets[[2]]  # Train a model model <- train(method = \"Maxnet\",                data = train,                fc = \"l\")  # Prepare background locations to test autocorrelation, this usually gives a # warning message given that less than 10000 points can be randomly sampled bg_coords <- terra::spatSample(predictors,                                size = 9000,                                method = \"random\",                                na.rm = TRUE,                                xy = TRUE,                                values = FALSE)  bg <- prepareSWD(species = \"Virtual species\",                  a = bg_coords,                  env = predictors,                  categorical = \"biome\") #> ℹ Extracting predictor information for absence/background locations #> ✔ Extracting predictor information for absence/background locations [68ms] #>   if (FALSE) { # \\dontrun{ # Remove variables with correlation higher than 0.7 accounting for the AUC, # in the following example the variable importance is computed as permutation # importance vs <- varSel(model,              metric = \"auc\",              bg4cor = bg,              test = test,              cor_th = 0.7,              permut = 1) vs  # Remove variables with correlation higher than 0.7 accounting for the TSS, # in the following example the variable importance is the MaxEnt percent # contribution # Train a model model <- train(method = \"Maxent\",                data = train,                fc = \"l\")  vs <- varSel(model,              metric = \"tss\",              bg4cor = bg,              test = test,              cor_th = 0.7,              use_pc = TRUE) vs  # Remove variables with correlation higher than 0.7 accounting for the aicc, # in the following example the variable importance is the MaxEnt percent # contribution vs <- varSel(model,              metric = \"aicc\",              bg4cor = bg,              cor_th = 0.7,              use_pc = TRUE,              env = predictors) vs} # }"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/virtualSp.html","id":null,"dir":"Reference","previous_headings":"","what":"Virtual Species — virtualSp","title":"Virtual Species — virtualSp","text":"Dataset containing random generated virtual species. purpose dataset demonstrate use functions included package.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/virtualSp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Virtual Species — virtualSp","text":"","code":"virtualSp"},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/virtualSp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Virtual Species — virtualSp","text":"list five elements: presence 400 random generated coordinates presence locations. absence 300 random generated coordinates absence locations. background 5000 random generated coordinates background locations. pa_map Presence absence map used extract presence absence locations. prob_map Probability map random generated virtual species.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/virtualSp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Virtual Species — virtualSp","text":"random species generated using package virtualspecies.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/reference/virtualSp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Virtual Species — virtualSp","text":"Leroy, B. , Meynard, C. N., Bellard, C. Courchamp, F. (2016), virtualspecies, R package generate virtual species distributions. Ecography, 39: 599-607. doi:10.1111/ecog.01388","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-133","dir":"Changelog","previous_headings":"","what":"SDMtune 1.3.3","title":"SDMtune 1.3.3","text":"Update tests ggplot2 compatible version 4.0.0 (thanks @teunbrand PR). Fix typo CITATION file (thanks @SethMusker PR).","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-132","dir":"Changelog","previous_headings":"","what":"SDMtune 1.3.2","title":"SDMtune 1.3.2","text":"CRAN release: 2024-12-16 Patch release change maintainer email fix CRAN note.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-131","dir":"Changelog","previous_headings":"","what":"SDMtune 1.3.1","title":"SDMtune 1.3.1","text":"CRAN release: 2023-07-03 Minor improvements documentation (#27)","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-130","dir":"Changelog","previous_headings":"","what":"SDMtune 1.3.0","title":"SDMtune 1.3.0","text":"CRAN release: 2023-05-02 Add function combine cross validation models Improve show method package outputs Fix CRAN note undeclared package Rd file","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-121","dir":"Changelog","previous_headings":"","what":"SDMtune 1.2.1","title":"SDMtune 1.2.1","text":"CRAN release: 2023-03-09 plotCor()gains argument text_size tweak size text plot Cross validation folds can created blockCV version 3.x (#24) Support raster package deprecated (#23)","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-120","dir":"Changelog","previous_headings":"","what":"SDMtune 1.2.0","title":"SDMtune 1.2.0","text":"CRAN release: 2022-12-14 SDMtune migrated package terra handle spatial data. Objects created package raster supported future releases SDMtune new progress bar messages/warnings/errors new look modelReport(), prepareSWD, reduceVariable(), thinData(), varSel() gain argument verbose disable informative messages gridSearch(), optimizeModel(), randomSearch(), reduceVar(), varSel() gain argument interactive disable interactive real-time chart doJk(), gridSearch(), optimizeModel(), predict(), randomSearch(), thinData(), train(), varImp(), varSel() gain argument progress disable progress bar function thinData() prints message number removed locations argument factors modelReport() deprecated. See terra documentation see use factors predictions Bug fixes: Real-time charts displayed Windows plotCor() plots correct heatmap 9 variables doJk() runs also without testing dataset","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-116","dir":"Changelog","previous_headings":"","what":"SDMtune 1.1.6","title":"SDMtune 1.1.6","text":"CRAN release: 2022-08-25 Resolve CRAN notes","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-115","dir":"Changelog","previous_headings":"","what":"SDMtune 1.1.5","title":"SDMtune 1.1.5","text":"CRAN release: 2021-07-17 Bug fixes: Allow fold partitions created ENMeval >= 2.0 Fix error generated plotting response categorical predictors using RF Update maxnet version 0.1.4 solve issue cran checks","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-114","dir":"Changelog","previous_headings":"","what":"SDMtune 1.1.4","title":"SDMtune 1.1.4","text":"CRAN release: 2021-03-14 Bug fixes: Add argument factors function modelReport() allow predictions raster objects including categorical variables","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-113","dir":"Changelog","previous_headings":"","what":"SDMtune 1.1.3","title":"SDMtune 1.1.3","text":"CRAN release: 2020-11-24 Include Java >=8 system requirements","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-112","dir":"Changelog","previous_headings":"","what":"SDMtune 1.1.2","title":"SDMtune 1.1.2","text":"CRAN release: 2020-10-02 Removed deprecated function get_tunable_args(). Removed deprecated argument “parallel” form functions. Updated citation text","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-111","dir":"Changelog","previous_headings":"","what":"SDMtune 1.1.1","title":"SDMtune 1.1.1","text":"CRAN release: 2020-07-17 Main changes: New function checkMaxentInstallation() check Maxent correctly configured. argument parallel deprecated used anymore. improved computation large datasets used superseded package snow. function get_tunable_args() replaced getTunableArgs() consistent camel case function naming. moment still possible use functions get_tunable_args() deprecated next release. Four new vignette now available package. Bug fix: plotPA function now works also new version ggplot2.","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-110","dir":"Changelog","previous_headings":"","what":"SDMtune 1.1.0","title":"SDMtune 1.1.0","text":"CRAN release: 2020-03-11 Main changes: function thinData accept now matrix dataframe several columns, useful users information related coordinates doesn’t want lose thinning procedure. function plotResponse plots response full range presences backgrounds/absences only_presence TRUE, only_presence unused compute provided function range presence locations marginal = TRUE Bug fix: Interactive plot SDMtune objects displayed RStudio Viewer pane","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-101","dir":"Changelog","previous_headings":"","what":"SDMtune 1.0.1","title":"SDMtune 1.0.1","text":"CRAN release: 2019-12-17 Bug fixes: Fix CRAN errors Fix bug introduced version 1.0.0","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-100","dir":"Changelog","previous_headings":"","what":"SDMtune 1.0.0","title":"SDMtune 1.0.0","text":"CRAN release: 2019-12-10 Main changes: release deprecated functions functions’ arguments removed, including functions convert old objects (created version < 0.2.0.) new format. Add function addSamplesToBg add presence locations background location. extra_args Maxent models changed anymore. Bug fix: Fix CRAN error r-oldrel","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-021","dir":"Changelog","previous_headings":"","what":"SDMtune 0.2.1","title":"SDMtune 0.2.1","text":"CRAN release: 2019-12-05 Main changes: New function predict SDMmodelCV objects Add possibility pass multiple methods train function Add possibility compute testing AUC TSS held apart testing dataset case SDMmodelCV object Add possibility merge presence locations mergeSWD function Bug fixes: plotPA function now works also large raster objects Removed font family plot functions avoid errors font available","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-020","dir":"Changelog","previous_headings":"","what":"SDMtune 0.2.0","title":"SDMtune 0.2.0","text":"CRAN release: 2019-09-02 release first step enable methods train models. main change SDW object now bundles together presence absence/background locations necessary anymore pass presence absence locations separate arguments train function. Old objects class SWD, SDMmodel, SDMmodelCV SDMtune created version <= 0.1.1 must converted new format using dedicated help functions. Main changes: SWD object bundles together presence absence/background locations New methods train models: Artificial Neural Network (ANN), Boosted Regression Trees (BRT) Random Forest (RF) Enabled spatial cross validation: function train accepts now folds partition generated packages (.e. ENMeval blockCV) Add title argument plot function SDMtune objects New randomly generated dataset virtualSp presence, absence background locations Number background locations tuned anymore using tuning functions Deprecated function: getSubsample","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-011","dir":"Changelog","previous_headings":"","what":"SDMtune 0.1.1","title":"SDMtune 0.1.1","text":"CRAN release: 2019-07-14 Fix bug VarImp function SDMmodelCV objects Real-time charts now displayed also R executed RStudio maxentVarImp function available SDMmodelCV objects","code":""},{"path":"https://consbiol-unibern.github.io/SDMtune/news/index.html","id":"sdmtune-010","dir":"Changelog","previous_headings":"","what":"SDMtune 0.1.0","title":"SDMtune 0.1.0","text":"CRAN release: 2019-06-21 First release","code":""}]
